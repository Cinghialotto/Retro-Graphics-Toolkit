CPPFLAGS=
PREFIX=x86_64-w64-mingw32-
CC=$(PREFIX)gcc
CXX=$(PREFIX)g++
STRIP=$(PREFIX)strip
#to compile on windows you must compile FLTK
#I compiled FLTK in a folder named fltk-1.3.3 which is in the Retro Graphics tookit directory
#if that is not the case for you edit the makefile changing paths
CFLAGS=-Ifltk-1.3.3/ -IautogeneratedBindings/ -I. -Ikens/ -Ifltk-1.3.3/zlib -I fltk-1.3.3/png -Iluawin/src  -Wall -O2 -s -mwindows -fomit-frame-pointer -pipe -Wl,--gc-sections -m32 -flto -fuse-linker-plugin
CXXFLAGS=$(CFLAGS) -std=gnu++11 -flto -fuse-linker-plugin -fno-rtti -std=gnu++11
LDFLAGS=$(CFLAGS) -Wl,--as-needed -Lfltk-1.3.3/lib -s -static-libgcc -static-libstdc++ -lfltk_images -lfltk -lfltk_jpeg -lfltk_png -lfltk_z -mwindows -lole32 -luuid -lcomctl32 -Lluawin/src -llua53 -m32
BINDINGS=$(wildcard autogeneratedBindings/*.cpp)
OBJECTS=project.o main.o callbacks_palette.o callback_tiles.o class_global.o quant.o tilemap.o color_convert.o \
	errorMsg.o classpalettebar.o dither.o class_tiles.o kens/nemesis.o \
	kens/enigma.o kens/kosinski.o kens/comper.o kens/saxman.o spatial_color_quant.o NEUQUANT.o \
	classtilemap.o palette.o zlibwrapper.o color_compare.o windowinit.o tiles_io.o savepng.o \
	callback_project.o callback_tilemap.o callback_gui.o classChunks.o compressionWrapper.o callback_chunk.o gui.o \
	wu.o system.o filemisc.o classSprite.o classSprites.o callbacksprites.o undo.o image.o \
	classlevel.o runlua.o nearestColor.o CIE.o classpalette.o classtilemaps.o callbacktilemaps.o \
	nespal.o filereader.o luaconfig.o lua_zlib.o metasprites.o callbacklua.o dub/dub.o $(BINDINGS:.cpp=.o) cbHelper.o
EXECUTABLE=RetroGraphicsToolkit.exe

all: $(EXECUTABLE)

$(EXECUTABLE): $(OBJECTS)
	$(STRIP) -R .comment -R .note -R '.rdata$$zzz' -s $(OBJECTS)
	$(CXX) $(OBJECTS) $(LDFLAGS) -o $@
	$(STRIP) -R .comment -R .note -R '.rdata$$zzz' -s $(EXECUTABLE)
.c.o:
	$(CC) $(CPPFLAGS) $(CFLAGS) -c $< -o $@
.cc.o:
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $< -o $@
.cpp.o:
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $< -o $@
clean:
	rm -f $(OBJECTS) $(EXECUTABLE)
