/**
 *
 * MACHINE GENERATED FILE. DO NOT EDIT.
 *
 * Bindings for class Fl_Lua_Spinner
 *
 * This file has been generated by dub 2.2.4.
 */
#include "dub/dub.h"
#include <FL/Fl_Spinner.H>
#include "cbHelper.h"
class Fl_Lua_Spinner:public Fl_Spinner{
using Fl_Spinner::Fl_Spinner;
public:
	struct cbInfo ci;
};


/** ~Fl_Lua_Spinner()
 * 
 */
static int Fl_Lua_Spinner__Fl_Lua_Spinner(lua_State *L) {
  try {
    DubUserdata *userdata = ((DubUserdata*)dub::checksdata_d(L, 1, "FLTK.Fl_Lua_Spinner"));
    if (userdata->gc) {
      Fl_Lua_Spinner *self = (Fl_Lua_Spinner *)userdata->ptr;
	if(self->ci.cb) free(self->ci.cb);

      delete self;
    }
    userdata->gc = false;
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "__gc: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "__gc: Unknown exception");
  }
  return dub::error(L);
}

/** Cast (class_name)
 * 
 */
static int Fl_Lua_Spinner__cast_(lua_State *L) {

  Fl_Lua_Spinner *self = *((Fl_Lua_Spinner **)dub::checksdata_n(L, 1, "FLTK.Fl_Lua_Spinner"));
  const char *key = luaL_checkstring(L, 2);
  void **retval__ = (void**)lua_newuserdata(L, sizeof(void*));
  int key_h = dub::hash(key, 2);
  switch(key_h) {
    case 1: {
      if (DUB_ASSERT_KEY(key, "FLTK.Fl_Group")) break;
      *retval__ = static_cast<Fl_Group *>(self);
      return 1;
    }
    case 0: {
      if (DUB_ASSERT_KEY(key, "FLTK.Fl_Widget")) break;
      *retval__ = static_cast<Fl_Widget *>(self);
      return 1;
    }
  }
  return 0;
}

/** Fl_Lua_Spinner::Fl_Lua_Spinner(int X, int Y, int W, int H, const char *L=0)
 * inc/Fl_Lua_Spinner.h:125
 */
static int Fl_Lua_Spinner_Fl_Lua_Spinner(lua_State *L) {
  try {
    int top__ = lua_gettop(L);
    if (top__ >= 5) {
      int X = dub::checkinteger(L, 1);
      int Y = dub::checkinteger(L, 2);
      int W = dub::checkinteger(L, 3);
      int H = dub::checkinteger(L, 4);
      const char *Lstr = dub::checkstring(L, 5);
      Fl_Lua_Spinner *retval__ = new Fl_Lua_Spinner(X, Y, W, H, Lstr);
	retval__->ci.L=L;
	retval__->ci.cb=0;
      dub::pushudata(L, retval__, "FLTK.Fl_Lua_Spinner", true);
      return 1;
    } else {
      int X = dub::checkinteger(L, 1);
      int Y = dub::checkinteger(L, 2);
      int W = dub::checkinteger(L, 3);
      int H = dub::checkinteger(L, 4);
      Fl_Lua_Spinner *retval__ = new Fl_Lua_Spinner(X, Y, W, H);
	retval__->ci.L=L;
	retval__->ci.cb=0;
      dub::pushudata(L, retval__, "FLTK.Fl_Lua_Spinner", true);
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "new: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "new: Unknown exception");
  }
  return dub::error(L);
}

/** const char* Fl_Lua_Spinner::format()
 * inc/Fl_Lua_Spinner.h:128
 */
static int Fl_Lua_Spinner_format(lua_State *L) {
  try {
    Fl_Lua_Spinner *self = *((Fl_Lua_Spinner **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Spinner"));
    int top__ = lua_gettop(L);
    if (top__ >= 2) {
      const char *f = dub::checkstring(L, 2);
      self->format(f);
      return 0;
    } else {
      lua_pushstring(L, self->format());
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "format: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "format: Unknown exception");
  }
  return dub::error(L);
}

/** int Fl_Lua_Spinner::handle(int event)
 * inc/Fl_Lua_Spinner.h:132
 */
static int Fl_Lua_Spinner_handle(lua_State *L) {
  try {
    Fl_Lua_Spinner *self = *((Fl_Lua_Spinner **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Spinner"));
    int event = dub::checkinteger(L, 2);
    lua_pushnumber(L, self->handle(event));
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "handle: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "handle: Unknown exception");
  }
  return dub::error(L);
}

/** double Fl_Lua_Spinner::maxinum() const
 * inc/Fl_Lua_Spinner.h:153
 */
static int Fl_Lua_Spinner_maxinum(lua_State *L) {
  try {
    Fl_Lua_Spinner *self = *((Fl_Lua_Spinner **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Spinner"));
    lua_pushnumber(L, self->maxinum());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "maxinum: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "maxinum: Unknown exception");
  }
  return dub::error(L);
}

/** double Fl_Lua_Spinner::maximum() const
 * inc/Fl_Lua_Spinner.h:155
 */
static int Fl_Lua_Spinner_maximum(lua_State *L) {
  try {
    Fl_Lua_Spinner *self = *((Fl_Lua_Spinner **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Spinner"));
    int top__ = lua_gettop(L);
    if (top__ >= 2) {
      double m = dub::checknumber(L, 2);
      self->maximum(m);
      return 0;
    } else {
      lua_pushnumber(L, self->maximum());
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "maximum: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "maximum: Unknown exception");
  }
  return dub::error(L);
}

/** double Fl_Lua_Spinner::mininum() const
 * inc/Fl_Lua_Spinner.h:159
 */
static int Fl_Lua_Spinner_mininum(lua_State *L) {
  try {
    Fl_Lua_Spinner *self = *((Fl_Lua_Spinner **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Spinner"));
    lua_pushnumber(L, self->mininum());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "mininum: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "mininum: Unknown exception");
  }
  return dub::error(L);
}

/** double Fl_Lua_Spinner::minimum() const
 * inc/Fl_Lua_Spinner.h:161
 */
static int Fl_Lua_Spinner_minimum(lua_State *L) {
  try {
    Fl_Lua_Spinner *self = *((Fl_Lua_Spinner **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Spinner"));
    int top__ = lua_gettop(L);
    if (top__ >= 2) {
      double m = dub::checknumber(L, 2);
      self->minimum(m);
      return 0;
    } else {
      lua_pushnumber(L, self->minimum());
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "minimum: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "minimum: Unknown exception");
  }
  return dub::error(L);
}

/** void Fl_Lua_Spinner::range(double a, double b)
 * inc/Fl_Lua_Spinner.h:165
 */
static int Fl_Lua_Spinner_range(lua_State *L) {
  try {
    Fl_Lua_Spinner *self = *((Fl_Lua_Spinner **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Spinner"));
    double a = dub::checknumber(L, 2);
    double b = dub::checknumber(L, 3);
    self->range(a, b);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "range: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "range: Unknown exception");
  }
  return dub::error(L);
}

/** void Fl_Lua_Spinner::resize(int X, int Y, int W, int H)
 * inc/Fl_Lua_Spinner.h:166
 */
static int Fl_Lua_Spinner_resize(lua_State *L) {
  try {
    Fl_Lua_Spinner *self = *((Fl_Lua_Spinner **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Spinner"));
    int x = dub::checkinteger(L, 2);
    int y = dub::checkinteger(L, 3);
    int w = dub::checkinteger(L, 4);
    int h = dub::checkinteger(L, 5);
    self->resize(x, y, w, h);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "resize: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "resize: Unknown exception");
  }
  return dub::error(L);
}

/** double Fl_Lua_Spinner::step() const
 * inc/Fl_Lua_Spinner.h:179
 */
static int Fl_Lua_Spinner_step(lua_State *L) {
  try {
    Fl_Lua_Spinner *self = *((Fl_Lua_Spinner **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Spinner"));
    int top__ = lua_gettop(L);
    if (top__ >= 2) {
      double s = dub::checknumber(L, 2);
      self->step(s);
      return 0;
    } else {
      lua_pushnumber(L, self->step());
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "step: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "step: Unknown exception");
  }
  return dub::error(L);
}

/** Fl_Color Fl_Lua_Spinner::textcolor() const
 * inc/Fl_Lua_Spinner.h:188
 */
static int Fl_Lua_Spinner_textcolor(lua_State *L) {
  try {
    Fl_Lua_Spinner *self = *((Fl_Lua_Spinner **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Spinner"));
    int top__ = lua_gettop(L);
    if (top__ >= 2) {
      Fl_Color *c = *((Fl_Color **)dub::checksdata(L, 2, "Fl_Color"));
      self->textcolor(*c);
      return 0;
    } else {
      dub::pushudata(L, new Fl_Color(self->textcolor()), "Fl_Color", true);
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "textcolor: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "textcolor: Unknown exception");
  }
  return dub::error(L);
}

/** Fl_Font Fl_Lua_Spinner::textfont() const
 * inc/Fl_Lua_Spinner.h:196
 */
static int Fl_Lua_Spinner_textfont(lua_State *L) {
  try {
    Fl_Lua_Spinner *self = *((Fl_Lua_Spinner **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Spinner"));
    int top__ = lua_gettop(L);
    if (top__ >= 2) {
      Fl_Font *f = *((Fl_Font **)dub::checksdata(L, 2, "Fl_Font"));
      self->textfont(*f);
      return 0;
    } else {
      dub::pushudata(L, new Fl_Font(self->textfont()), "Fl_Font", true);
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "textfont: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "textfont: Unknown exception");
  }
  return dub::error(L);
}

/** Fl_Fontsize Fl_Lua_Spinner::textsize() const
 * inc/Fl_Lua_Spinner.h:204
 */
static int Fl_Lua_Spinner_textsize(lua_State *L) {
  try {
    Fl_Lua_Spinner *self = *((Fl_Lua_Spinner **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Spinner"));
    int top__ = lua_gettop(L);
    if (top__ >= 2) {
      Fl_Fontsize s = dub::checkinteger(L, 2);
      self->textsize(s);
      return 0;
    } else {
      lua_pushnumber(L, self->textsize());
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "textsize: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "textsize: Unknown exception");
  }
  return dub::error(L);
}

/** unsigned char Fl_Lua_Spinner::type() const
 * inc/Fl_Lua_Spinner.h:214
 */
static int Fl_Lua_Spinner_type(lua_State *L) {
  try {
    Fl_Lua_Spinner *self = *((Fl_Lua_Spinner **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Spinner"));
    int top__ = lua_gettop(L);
    if (top__ >= 2) {
      unsigned char v = dub::checkinteger(L, 2);
      self->type(v);
      return 0;
    } else {
      lua_pushnumber(L, self->type());
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "type: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "type: Unknown exception");
  }
  return dub::error(L);
}

/** double Fl_Lua_Spinner::value() const
 * inc/Fl_Lua_Spinner.h:230
 */
static int Fl_Lua_Spinner_value(lua_State *L) {
  try {
    Fl_Lua_Spinner *self = *((Fl_Lua_Spinner **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Spinner"));
    int top__ = lua_gettop(L);
    if (top__ >= 2) {
      double v = dub::checknumber(L, 2);
      self->value(v);
      return 0;
    } else {
      lua_pushnumber(L, self->value());
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "value: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "value: Unknown exception");
  }
  return dub::error(L);
}

/** void Fl_Lua_Spinner::color(Fl_Color v)
 * inc/Fl_Lua_Spinner.h:240
 */
static int Fl_Lua_Spinner_color(lua_State *L) {
  try {
    Fl_Lua_Spinner *self = *((Fl_Lua_Spinner **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Spinner"));
    int top__ = lua_gettop(L);
    if (top__ >= 2) {
      Fl_Color *v = *((Fl_Color **)dub::checksdata(L, 2, "Fl_Color"));
      self->color(*v);
      return 0;
    } else {
      dub::pushudata(L, new Fl_Color(self->color()), "Fl_Color", true);
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "color: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "color: Unknown exception");
  }
  return dub::error(L);
}

/** void Fl_Lua_Spinner::selection_color(Fl_Color val)
 * inc/Fl_Lua_Spinner.h:248
 */
static int Fl_Lua_Spinner_selection_color(lua_State *L) {
  try {
    Fl_Lua_Spinner *self = *((Fl_Lua_Spinner **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Spinner"));
    int top__ = lua_gettop(L);
    if (top__ >= 2) {
      Fl_Color *val = *((Fl_Color **)dub::checksdata(L, 2, "Fl_Color"));
      self->selection_color(*val);
      return 0;
    } else {
      dub::pushudata(L, new Fl_Color(self->selection_color()), "Fl_Color", true);
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "selection_color: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "selection_color: Unknown exception");
  }
  return dub::error(L);
}

/** void Fl_Group::begin()
 * inc/Fl_Group.h:67
 */
static int Fl_Lua_Spinner_begin(lua_State *L) {
  try {
    Fl_Lua_Spinner *self = *((Fl_Lua_Spinner **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Spinner"));
    self->begin();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "begin: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "begin: Unknown exception");
  }
  return dub::error(L);
}

/** void Fl_Group::end()
 * inc/Fl_Group.h:68
 */
static int Fl_Lua_Spinner_end(lua_State *L) {
  try {
    Fl_Lua_Spinner *self = *((Fl_Lua_Spinner **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Spinner"));
    self->end();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "end: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "end: Unknown exception");
  }
  return dub::error(L);
}

/** int Fl_Group::children() const
 * inc/Fl_Group.h:75
 */
static int Fl_Lua_Spinner_children(lua_State *L) {
  try {
    Fl_Lua_Spinner *self = *((Fl_Lua_Spinner **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Spinner"));
    lua_pushnumber(L, self->children());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "children: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "children: Unknown exception");
  }
  return dub::error(L);
}

/** Fl_Widget* Fl_Group::child(int n) const
 * inc/Fl_Group.h:79
 */
static int Fl_Lua_Spinner_child(lua_State *L) {
  try {
    Fl_Lua_Spinner *self = *((Fl_Lua_Spinner **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Spinner"));
    int n = dub::checkinteger(L, 2);
    Fl_Widget *retval__ = self->child(n);
    if (!retval__) return 0;
    dub::pushudata(L, retval__, "FLTK.Fl_Widget", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "child: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "child: Unknown exception");
  }
  return dub::error(L);
}

/** int Fl_Group::find(const Fl_Widget *) const
 * inc/Fl_Group.h:80
 */
static int Fl_Lua_Spinner_find(lua_State *L) {
  try {
    Fl_Lua_Spinner *self = *((Fl_Lua_Spinner **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Spinner"));
    Fl_Widget *p1 = *((Fl_Widget **)dub::checksdata(L, 2, "FLTK.Fl_Widget"));
    lua_pushnumber(L, self->find(p1));
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "find: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "find: Unknown exception");
  }
  return dub::error(L);
}

/** void Fl_Group::add(Fl_Widget &)
 * inc/Fl_Group.h:94
 */
static int Fl_Lua_Spinner_add(lua_State *L) {
  try {
    Fl_Lua_Spinner *self = *((Fl_Lua_Spinner **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Spinner"));
    Fl_Widget *p1 = *((Fl_Widget **)dub::checksdata(L, 2, "FLTK.Fl_Widget"));
    self->add(*p1);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "add: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "add: Unknown exception");
  }
  return dub::error(L);
}

/** void Fl_Group::insert(Fl_Widget &, int i)
 * inc/Fl_Group.h:99
 */
static int Fl_Lua_Spinner_insert(lua_State *L) {
  try {
    Fl_Lua_Spinner *self = *((Fl_Lua_Spinner **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Spinner"));
    int type__ = lua_type(L, 3);
    if (type__ == LUA_TNUMBER) {
      Fl_Widget *p1 = *((Fl_Widget **)dub::checksdata(L, 2, "FLTK.Fl_Widget"));
      int i = dub::checkinteger(L, 3);
      self->insert(*p1, i);
      return 0;
    } else {
      Fl_Widget *o = *((Fl_Widget **)dub::checksdata(L, 2, "FLTK.Fl_Widget"));
      Fl_Widget *before = *((Fl_Widget **)dub::checksdata(L, 3, "FLTK.Fl_Widget"));
      self->insert(*o, before);
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "insert: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "insert: Unknown exception");
  }
  return dub::error(L);
}

/** void Fl_Group::remove(int index)
 * inc/Fl_Group.h:105
 */
static int Fl_Lua_Spinner_remove(lua_State *L) {
  try {
    Fl_Lua_Spinner *self = *((Fl_Lua_Spinner **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Spinner"));
    int type__ = lua_type(L, 2);
    if (type__ == LUA_TNUMBER) {
      int index = dub::checkinteger(L, 2);
      self->remove(index);
      return 0;
    } else {
      Fl_Widget *p1 = *((Fl_Widget **)dub::checksdata(L, 2, "FLTK.Fl_Widget"));
      self->remove(*p1);
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "remove: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "remove: Unknown exception");
  }
  return dub::error(L);
}

/** void Fl_Group::clear()
 * inc/Fl_Group.h:112
 */
static int Fl_Lua_Spinner_clear(lua_State *L) {
  try {
    Fl_Lua_Spinner *self = *((Fl_Lua_Spinner **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Spinner"));
    self->clear();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "clear: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "clear: Unknown exception");
  }
  return dub::error(L);
}

/** void Fl_Group::resizable(Fl_Widget &o)
 * inc/Fl_Group.h:117
 */
static int Fl_Lua_Spinner_resizable(lua_State *L) {
  try {
    Fl_Lua_Spinner *self = *((Fl_Lua_Spinner **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Spinner"));
    int top__ = lua_gettop(L);
    if (top__ >= 2) {
      Fl_Widget *o = *((Fl_Widget **)dub::checksdata(L, 2, "FLTK.Fl_Widget"));
      self->resizable(*o);
      return 0;
    } else {
      Fl_Widget *retval__ = self->resizable();
      if (!retval__) return 0;
      dub::pushudata(L, retval__, "FLTK.Fl_Widget", false);
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "resizable: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "resizable: Unknown exception");
  }
  return dub::error(L);
}

/** void Fl_Group::add_resizable(Fl_Widget &o)
 * inc/Fl_Group.h:154
 */
static int Fl_Lua_Spinner_add_resizable(lua_State *L) {
  try {
    Fl_Lua_Spinner *self = *((Fl_Lua_Spinner **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Spinner"));
    Fl_Widget *o = *((Fl_Widget **)dub::checksdata(L, 2, "FLTK.Fl_Widget"));
    self->add_resizable(*o);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "add_resizable: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "add_resizable: Unknown exception");
  }
  return dub::error(L);
}

/** void Fl_Group::init_sizes()
 * inc/Fl_Group.h:155
 */
static int Fl_Lua_Spinner_init_sizes(lua_State *L) {
  try {
    Fl_Lua_Spinner *self = *((Fl_Lua_Spinner **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Spinner"));
    self->init_sizes();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "init_sizes: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "init_sizes: Unknown exception");
  }
  return dub::error(L);
}

/** void Fl_Group::clip_children(int c)
 * inc/Fl_Group.h:166
 */
static int Fl_Lua_Spinner_clip_children(lua_State *L) {
  try {
    Fl_Lua_Spinner *self = *((Fl_Lua_Spinner **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Spinner"));
    int top__ = lua_gettop(L);
    if (top__ >= 2) {
      int c = dub::checkinteger(L, 2);
      self->clip_children(c);
      return 0;
    } else {
      lua_pushnumber(L, self->clip_children());
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "clip_children: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "clip_children: Unknown exception");
  }
  return dub::error(L);
}

/** virtual Fl_Group* Fl_Group::as_group()
 * inc/Fl_Group.h:177
 */
static int Fl_Lua_Spinner_as_group(lua_State *L) {
  try {
    Fl_Lua_Spinner *self = *((Fl_Lua_Spinner **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Spinner"));
    Fl_Group *retval__ = self->as_group();
    if (!retval__) return 0;
    dub::pushudata(L, retval__, "FLTK.Fl_Group", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "as_group: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "as_group: Unknown exception");
  }
  return dub::error(L);
}

/** void Fl_Group::focus(Fl_Widget *W)
 * inc/Fl_Group.h:186
 */
static int Fl_Lua_Spinner_focus(lua_State *L) {
  try {
    Fl_Lua_Spinner *self = *((Fl_Lua_Spinner **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Spinner"));
    Fl_Widget *W = *((Fl_Widget **)dub::checksdata(L, 2, "FLTK.Fl_Widget"));
    self->focus(W);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "focus: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "focus: Unknown exception");
  }
  return dub::error(L);
}


/** Fl_Group* Fl_Widget::parent() const
 * inc/Fl_Widget.h:243
 */
static int Fl_Lua_Spinner_parent(lua_State *L) {
  try {
    Fl_Lua_Spinner *self = *((Fl_Lua_Spinner **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Spinner"));
    int top__ = lua_gettop(L);
    if (top__ >= 2) {
      Fl_Group *p = *((Fl_Group **)dub::checksdata(L, 2, "FLTK.Fl_Group"));
      self->parent(p);
      return 0;
    } else {
      Fl_Group *retval__ = self->parent();
      if (!retval__) return 0;
      dub::pushudata(L, retval__, "FLTK.Fl_Group", false);
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "parent: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "parent: Unknown exception");
  }
  return dub::error(L);
}

/** int Fl_Widget::x() const
 * inc/Fl_Widget.h:273
 */
static int Fl_Lua_Spinner_x(lua_State *L) {
  try {
    Fl_Lua_Spinner *self = *((Fl_Lua_Spinner **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Spinner"));
    lua_pushnumber(L, self->x());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "x: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "x: Unknown exception");
  }
  return dub::error(L);
}

/** int Fl_Widget::y() const
 * inc/Fl_Widget.h:278
 */
static int Fl_Lua_Spinner_y(lua_State *L) {
  try {
    Fl_Lua_Spinner *self = *((Fl_Lua_Spinner **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Spinner"));
    lua_pushnumber(L, self->y());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "y: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "y: Unknown exception");
  }
  return dub::error(L);
}

/** int Fl_Widget::w() const
 * inc/Fl_Widget.h:283
 */
static int Fl_Lua_Spinner_w(lua_State *L) {
  try {
    Fl_Lua_Spinner *self = *((Fl_Lua_Spinner **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Spinner"));
    lua_pushnumber(L, self->w());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "w: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "w: Unknown exception");
  }
  return dub::error(L);
}

/** int Fl_Widget::h() const
 * inc/Fl_Widget.h:288
 */
static int Fl_Lua_Spinner_h(lua_State *L) {
  try {
    Fl_Lua_Spinner *self = *((Fl_Lua_Spinner **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Spinner"));
    lua_pushnumber(L, self->h());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "h: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "h: Unknown exception");
  }
  return dub::error(L);
}

/** int Fl_Widget::damage_resize(int, int, int, int)
 * inc/Fl_Widget.h:312
 */
static int Fl_Lua_Spinner_damage_resize(lua_State *L) {
  try {
    Fl_Lua_Spinner *self = *((Fl_Lua_Spinner **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Spinner"));
    int p1 = dub::checkinteger(L, 2);
    int p2 = dub::checkinteger(L, 3);
    int p3 = dub::checkinteger(L, 4);
    int p4 = dub::checkinteger(L, 5);
    lua_pushnumber(L, self->damage_resize(p1, p2, p3, p4));
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "damage_resize: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "damage_resize: Unknown exception");
  }
  return dub::error(L);
}

/** void Fl_Widget::position(int X, int Y)
 * inc/Fl_Widget.h:321
 */
static int Fl_Lua_Spinner_position(lua_State *L) {
  try {
    Fl_Lua_Spinner *self = *((Fl_Lua_Spinner **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Spinner"));
    int X = dub::checkinteger(L, 2);
    int Y = dub::checkinteger(L, 3);
    self->position(X, Y);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "position: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "position: Unknown exception");
  }
  return dub::error(L);
}

/** void Fl_Widget::size(int W, int H)
 * inc/Fl_Widget.h:330
 */
static int Fl_Lua_Spinner_size(lua_State *L) {
  try {
    Fl_Lua_Spinner *self = *((Fl_Lua_Spinner **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Spinner"));
    int W = dub::checkinteger(L, 2);
    int H = dub::checkinteger(L, 3);
    self->size(W, H);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "size: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "size: Unknown exception");
  }
  return dub::error(L);
}

/** Fl_Align Fl_Widget::align() const
 * inc/Fl_Widget.h:337
 */
static int Fl_Lua_Spinner_align(lua_State *L) {
  try {
    Fl_Lua_Spinner *self = *((Fl_Lua_Spinner **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Spinner"));
    int top__ = lua_gettop(L);
    if (top__ >= 2) {
      Fl_Align *alignment = *((Fl_Align **)dub::checksdata(L, 2, "Fl_Align"));
      self->align(*alignment);
      return 0;
    } else {
      dub::pushudata(L, new Fl_Align(self->align()), "Fl_Align", true);
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "align: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "align: Unknown exception");
  }
  return dub::error(L);
}

/** Fl_Boxtype Fl_Widget::box() const
 * inc/Fl_Widget.h:352
 */
static int Fl_Lua_Spinner_box(lua_State *L) {
  try {
    Fl_Lua_Spinner *self = *((Fl_Lua_Spinner **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Spinner"));
    int top__ = lua_gettop(L);
    if (top__ >= 2) {
      Fl_Boxtype *new_box = *((Fl_Boxtype **)dub::checksdata(L, 2, "Fl_Boxtype"));
      self->box(*new_box);
      return 0;
    } else {
      dub::pushudata(L, new Fl_Boxtype(self->box()), "Fl_Boxtype", true);
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "box: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "box: Unknown exception");
  }
  return dub::error(L);
}

/** const char* Fl_Widget::label() const
 * inc/Fl_Widget.h:410
 */
static int Fl_Lua_Spinner_label(lua_State *L) {
  try {
    Fl_Lua_Spinner *self = *((Fl_Lua_Spinner **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Spinner"));
    int top__ = lua_gettop(L);
    if (top__ >= 3) {
      Fl_Labeltype a = (Fl_Labeltype)dub::checkinteger(L, 2);
      const char *b = dub::checkstring(L, 3);
      self->label(a, b);
      return 0;
    } else if (top__ >= 2) {
      const char *text = dub::checkstring(L, 2);
      self->label(text);
      return 0;
    } else {
      lua_pushstring(L, self->label());
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "label: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "label: Unknown exception");
  }
  return dub::error(L);
}

/** void Fl_Widget::copy_label(const char *new_label)
 * inc/Fl_Widget.h:434
 */
static int Fl_Lua_Spinner_copy_label(lua_State *L) {
  try {
    Fl_Lua_Spinner *self = *((Fl_Lua_Spinner **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Spinner"));
    const char *new_label = dub::checkstring(L, 2);
    self->copy_label(new_label);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "copy_label: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "copy_label: Unknown exception");
  }
  return dub::error(L);
}

/** Fl_Labeltype Fl_Widget::labeltype() const
 * inc/Fl_Widget.h:445
 */
static int Fl_Lua_Spinner_labeltype(lua_State *L) {
  try {
    Fl_Lua_Spinner *self = *((Fl_Lua_Spinner **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Spinner"));
    int top__ = lua_gettop(L);
    if (top__ >= 2) {
      Fl_Labeltype a = (Fl_Labeltype)dub::checkinteger(L, 2);
      self->labeltype(a);
      return 0;
    } else {
      lua_pushnumber(L, self->labeltype());
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "labeltype: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "labeltype: Unknown exception");
  }
  return dub::error(L);
}

/** Fl_Color Fl_Widget::labelcolor() const
 * inc/Fl_Widget.h:461
 */
static int Fl_Lua_Spinner_labelcolor(lua_State *L) {
  try {
    Fl_Lua_Spinner *self = *((Fl_Lua_Spinner **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Spinner"));
    int top__ = lua_gettop(L);
    if (top__ >= 2) {
      Fl_Color *c = *((Fl_Color **)dub::checksdata(L, 2, "Fl_Color"));
      self->labelcolor(*c);
      return 0;
    } else {
      dub::pushudata(L, new Fl_Color(self->labelcolor()), "Fl_Color", true);
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "labelcolor: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "labelcolor: Unknown exception");
  }
  return dub::error(L);
}

/** Fl_Font Fl_Widget::labelfont() const
 * inc/Fl_Widget.h:476
 */
static int Fl_Lua_Spinner_labelfont(lua_State *L) {
  try {
    Fl_Lua_Spinner *self = *((Fl_Lua_Spinner **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Spinner"));
    int top__ = lua_gettop(L);
    if (top__ >= 2) {
      Fl_Font *f = *((Fl_Font **)dub::checksdata(L, 2, "Fl_Font"));
      self->labelfont(*f);
      return 0;
    } else {
      dub::pushudata(L, new Fl_Font(self->labelfont()), "Fl_Font", true);
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "labelfont: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "labelfont: Unknown exception");
  }
  return dub::error(L);
}

/** Fl_Fontsize Fl_Widget::labelsize() const
 * inc/Fl_Widget.h:491
 */
static int Fl_Lua_Spinner_labelsize(lua_State *L) {
  try {
    Fl_Lua_Spinner *self = *((Fl_Lua_Spinner **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Spinner"));
    int top__ = lua_gettop(L);
    if (top__ >= 2) {
      Fl_Fontsize pix = dub::checkinteger(L, 2);
      self->labelsize(pix);
      return 0;
    } else {
      lua_pushnumber(L, self->labelsize());
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "labelsize: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "labelsize: Unknown exception");
  }
  return dub::error(L);
}

/** Fl_Image* Fl_Widget::image()
 * inc/Fl_Widget.h:503
 */
static int Fl_Lua_Spinner_image(lua_State *L) {
  try {
    Fl_Lua_Spinner *self = *((Fl_Lua_Spinner **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Spinner"));
    int top__ = lua_gettop(L);
    if (top__ >= 2) {
      Fl_Image *img = *((Fl_Image **)dub::checksdata(L, 2, "FLTK.Fl_Image"));
      self->image(img);
      return 0;
    } else {
      Fl_Image *retval__ = self->image();
      if (!retval__) return 0;
      dub::pushudata(L, retval__, "FLTK.Fl_Image", false);
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "image: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "image: Unknown exception");
  }
  return dub::error(L);
}

/** Fl_Image* Fl_Widget::deimage()
 * inc/Fl_Widget.h:522
 */
static int Fl_Lua_Spinner_deimage(lua_State *L) {
  try {
    Fl_Lua_Spinner *self = *((Fl_Lua_Spinner **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Spinner"));
    int top__ = lua_gettop(L);
    if (top__ >= 2) {
      Fl_Image *img = *((Fl_Image **)dub::checksdata(L, 2, "FLTK.Fl_Image"));
      self->deimage(img);
      return 0;
    } else {
      Fl_Image *retval__ = self->deimage();
      if (!retval__) return 0;
      dub::pushudata(L, retval__, "FLTK.Fl_Image", false);
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "deimage: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "deimage: Unknown exception");
  }
  return dub::error(L);
}

/** const char* Fl_Widget::tooltip() const
 * inc/Fl_Widget.h:541
 */
static int Fl_Lua_Spinner_tooltip(lua_State *L) {
  try {
    Fl_Lua_Spinner *self = *((Fl_Lua_Spinner **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Spinner"));
    int top__ = lua_gettop(L);
    if (top__ >= 2) {
      const char *text = dub::checkstring(L, 2);
      self->tooltip(text);
      return 0;
    } else {
      lua_pushstring(L, self->tooltip());
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "tooltip: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "tooltip: Unknown exception");
  }
  return dub::error(L);
}

/** void Fl_Widget::copy_tooltip(const char *text)
 * inc/Fl_Widget.h:544
 */
static int Fl_Lua_Spinner_copy_tooltip(lua_State *L) {
  try {
    Fl_Lua_Spinner *self = *((Fl_Lua_Spinner **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Spinner"));
    const char *text = dub::checkstring(L, 2);
    self->copy_tooltip(text);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "copy_tooltip: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "copy_tooltip: Unknown exception");
  }
  return dub::error(L);
}

/** Fl_Callback_p Fl_Widget::callback() const
 * inc/Fl_Widget.h:550
 */
static int Fl_Lua_Spinner_callback(lua_State *L) {
	try {
		Fl_Lua_Spinner *self = *((Fl_Lua_Spinner **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Spinner"));
		int top__ = lua_gettop(L);
		if (top__ >= 3) {
			self->ci.cb=strdup(luaL_checkstring(L,2));
			self->ci.udat=luaL_checkinteger(L,3);
			self->callback(luaWidgetCallbackHelper,&self->ci);
			return 0;
		} else if (top__ >= 2) {
			self->ci.cb=strdup(luaL_checkstring(L,2));
			self->ci.udat=0;
			self->callback(luaWidgetCallbackHelper,&self->ci);
			return 0;
		} else {
			lua_pushstring(L,self->ci.cb);
			return 1;
		}
	} catch (std::exception &e) {
		lua_pushfstring(L, "callback: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "callback: Unknown exception");
	}
	return dub::error(L);
}

/** void* Fl_Widget::user_data() const
 * inc/Fl_Widget.h:582
 */
static int Fl_Lua_Spinner_user_data(lua_State *L) {
  try {
    Fl_Lua_Spinner *self = *((Fl_Lua_Spinner **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Spinner"));
    int top__ = lua_gettop(L);
    if (top__ >= 2) {
      void *v = *((void **)dub::checksdata(L, 2, "void"));
      self->user_data(v);
      return 0;
    } else {
      self->user_data();
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "user_data: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "user_data: Unknown exception");
  }
  return dub::error(L);
}

/** long Fl_Widget::argument() const
 * inc/Fl_Widget.h:592
 */
static int Fl_Lua_Spinner_argument(lua_State *L) {
  try {
    Fl_Lua_Spinner *self = *((Fl_Lua_Spinner **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Spinner"));
    int top__ = lua_gettop(L);
    if (top__ >= 2) {
      long *v = *((long **)dub::checksdata(L, 2, "long"));
      self->argument(*v);
      return 0;
    } else {
      dub::pushudata(L, new long(self->argument()), "long", true);
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "argument: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "argument: Unknown exception");
  }
  return dub::error(L);
}

/** Fl_When Fl_Widget::when() const
 * inc/Fl_Widget.h:608
 */
static int Fl_Lua_Spinner_when(lua_State *L) {
  try {
    Fl_Lua_Spinner *self = *((Fl_Lua_Spinner **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Spinner"));
    int top__ = lua_gettop(L);
    if (top__ >= 2) {
      unsigned char i = dub::checkinteger(L, 2);
      self->when(i);
      return 0;
    } else {
      dub::pushudata(L, new Fl_When(self->when()), "Fl_When", true);
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "when: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "when: Unknown exception");
  }
  return dub::error(L);
}

/** unsigned int Fl_Widget::visible() const
 * inc/Fl_Widget.h:647
 */
static int Fl_Lua_Spinner_visible(lua_State *L) {
  try {
    Fl_Lua_Spinner *self = *((Fl_Lua_Spinner **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Spinner"));
    lua_pushnumber(L, self->visible());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "visible: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "visible: Unknown exception");
  }
  return dub::error(L);
}

/** int Fl_Widget::visible_r() const
 * inc/Fl_Widget.h:653
 */
static int Fl_Lua_Spinner_visible_r(lua_State *L) {
  try {
    Fl_Lua_Spinner *self = *((Fl_Lua_Spinner **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Spinner"));
    lua_pushnumber(L, self->visible_r());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "visible_r: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "visible_r: Unknown exception");
  }
  return dub::error(L);
}

/** virtual void Fl_Widget::show()
 * inc/Fl_Widget.h:672
 */
static int Fl_Lua_Spinner_show(lua_State *L) {
  try {
    Fl_Lua_Spinner *self = *((Fl_Lua_Spinner **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Spinner"));
    self->show();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "show: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "show: Unknown exception");
  }
  return dub::error(L);
}

/** virtual void Fl_Widget::hide()
 * inc/Fl_Widget.h:677
 */
static int Fl_Lua_Spinner_hide(lua_State *L) {
  try {
    Fl_Lua_Spinner *self = *((Fl_Lua_Spinner **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Spinner"));
    self->hide();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "hide: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "hide: Unknown exception");
  }
  return dub::error(L);
}

/** void Fl_Widget::set_visible()
 * inc/Fl_Widget.h:683
 */
static int Fl_Lua_Spinner_set_visible(lua_State *L) {
  try {
    Fl_Lua_Spinner *self = *((Fl_Lua_Spinner **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Spinner"));
    self->set_visible();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "set_visible: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "set_visible: Unknown exception");
  }
  return dub::error(L);
}

/** void Fl_Widget::clear_visible()
 * inc/Fl_Widget.h:689
 */
static int Fl_Lua_Spinner_clear_visible(lua_State *L) {
  try {
    Fl_Lua_Spinner *self = *((Fl_Lua_Spinner **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Spinner"));
    self->clear_visible();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "clear_visible: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "clear_visible: Unknown exception");
  }
  return dub::error(L);
}

/** unsigned int Fl_Widget::active() const
 * inc/Fl_Widget.h:695
 */
static int Fl_Lua_Spinner_active(lua_State *L) {
  try {
    Fl_Lua_Spinner *self = *((Fl_Lua_Spinner **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Spinner"));
    lua_pushnumber(L, self->active());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "active: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "active: Unknown exception");
  }
  return dub::error(L);
}

/** int Fl_Widget::active_r() const
 * inc/Fl_Widget.h:701
 */
static int Fl_Lua_Spinner_active_r(lua_State *L) {
  try {
    Fl_Lua_Spinner *self = *((Fl_Lua_Spinner **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Spinner"));
    lua_pushnumber(L, self->active_r());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "active_r: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "active_r: Unknown exception");
  }
  return dub::error(L);
}

/** void Fl_Widget::activate()
 * inc/Fl_Widget.h:708
 */
static int Fl_Lua_Spinner_activate(lua_State *L) {
  try {
    Fl_Lua_Spinner *self = *((Fl_Lua_Spinner **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Spinner"));
    self->activate();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "activate: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "activate: Unknown exception");
  }
  return dub::error(L);
}

/** void Fl_Widget::deactivate()
 * inc/Fl_Widget.h:724
 */
static int Fl_Lua_Spinner_deactivate(lua_State *L) {
  try {
    Fl_Lua_Spinner *self = *((Fl_Lua_Spinner **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Spinner"));
    self->deactivate();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "deactivate: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "deactivate: Unknown exception");
  }
  return dub::error(L);
}

/** unsigned int Fl_Widget::output() const
 * inc/Fl_Widget.h:734
 */
static int Fl_Lua_Spinner_output(lua_State *L) {
  try {
    Fl_Lua_Spinner *self = *((Fl_Lua_Spinner **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Spinner"));
    lua_pushnumber(L, self->output());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "output: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "output: Unknown exception");
  }
  return dub::error(L);
}

/** void Fl_Widget::set_output()
 * inc/Fl_Widget.h:739
 */
static int Fl_Lua_Spinner_set_output(lua_State *L) {
  try {
    Fl_Lua_Spinner *self = *((Fl_Lua_Spinner **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Spinner"));
    self->set_output();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "set_output: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "set_output: Unknown exception");
  }
  return dub::error(L);
}

/** void Fl_Widget::clear_output()
 * inc/Fl_Widget.h:744
 */
static int Fl_Lua_Spinner_clear_output(lua_State *L) {
  try {
    Fl_Lua_Spinner *self = *((Fl_Lua_Spinner **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Spinner"));
    self->clear_output();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "clear_output: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "clear_output: Unknown exception");
  }
  return dub::error(L);
}

/** unsigned int Fl_Widget::takesevents() const
 * inc/Fl_Widget.h:751
 */
static int Fl_Lua_Spinner_takesevents(lua_State *L) {
  try {
    Fl_Lua_Spinner *self = *((Fl_Lua_Spinner **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Spinner"));
    lua_pushnumber(L, self->takesevents());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "takesevents: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "takesevents: Unknown exception");
  }
  return dub::error(L);
}

/** unsigned int Fl_Widget::changed() const
 * inc/Fl_Widget.h:768
 */
static int Fl_Lua_Spinner_changed(lua_State *L) {
  try {
    Fl_Lua_Spinner *self = *((Fl_Lua_Spinner **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Spinner"));
    lua_pushnumber(L, self->changed());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "changed: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "changed: Unknown exception");
  }
  return dub::error(L);
}

/** void Fl_Widget::set_changed()
 * inc/Fl_Widget.h:773
 */
static int Fl_Lua_Spinner_set_changed(lua_State *L) {
  try {
    Fl_Lua_Spinner *self = *((Fl_Lua_Spinner **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Spinner"));
    self->set_changed();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "set_changed: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "set_changed: Unknown exception");
  }
  return dub::error(L);
}

/** void Fl_Widget::clear_changed()
 * inc/Fl_Widget.h:778
 */
static int Fl_Lua_Spinner_clear_changed(lua_State *L) {
  try {
    Fl_Lua_Spinner *self = *((Fl_Lua_Spinner **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Spinner"));
    self->clear_changed();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "clear_changed: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "clear_changed: Unknown exception");
  }
  return dub::error(L);
}

/** void Fl_Widget::clear_active()
 * inc/Fl_Widget.h:784
 */
#if (FL_MAJOR_VERSION>=1 && FL_MINOR_VERSION>=3 && FL_PATCH_VERSION>=3)
static int Fl_Lua_Spinner_clear_active(lua_State *L) {
  try {
    Fl_Lua_Spinner *self = *((Fl_Lua_Spinner **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Spinner"));
    self->clear_active();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "clear_active: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "clear_active: Unknown exception");
  }
  return dub::error(L);
}
#endif

/** void Fl_Widget::set_active()
 * inc/Fl_Widget.h:790
 */
#if (FL_MAJOR_VERSION>=1 && FL_MINOR_VERSION>=3 && FL_PATCH_VERSION>=3)
static int Fl_Lua_Spinner_set_active(lua_State *L) {
  try {
    Fl_Lua_Spinner *self = *((Fl_Lua_Spinner **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Spinner"));
    self->set_active();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "set_active: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "set_active: Unknown exception");
  }
  return dub::error(L);
}
#endif

/** int Fl_Widget::take_focus()
 * inc/Fl_Widget.h:799
 */
static int Fl_Lua_Spinner_take_focus(lua_State *L) {
  try {
    Fl_Lua_Spinner *self = *((Fl_Lua_Spinner **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Spinner"));
    lua_pushnumber(L, self->take_focus());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "take_focus: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "take_focus: Unknown exception");
  }
  return dub::error(L);
}

/** void Fl_Widget::set_visible_focus()
 * inc/Fl_Widget.h:807
 */
static int Fl_Lua_Spinner_set_visible_focus(lua_State *L) {
  try {
    Fl_Lua_Spinner *self = *((Fl_Lua_Spinner **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Spinner"));
    self->set_visible_focus();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "set_visible_focus: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "set_visible_focus: Unknown exception");
  }
  return dub::error(L);
}

/** void Fl_Widget::clear_visible_focus()
 * inc/Fl_Widget.h:813
 */
static int Fl_Lua_Spinner_clear_visible_focus(lua_State *L) {
  try {
    Fl_Lua_Spinner *self = *((Fl_Lua_Spinner **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Spinner"));
    self->clear_visible_focus();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "clear_visible_focus: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "clear_visible_focus: Unknown exception");
  }
  return dub::error(L);
}

/** void Fl_Widget::visible_focus(int v)
 * inc/Fl_Widget.h:819
 */
static int Fl_Lua_Spinner_visible_focus(lua_State *L) {
  try {
    Fl_Lua_Spinner *self = *((Fl_Lua_Spinner **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Spinner"));
    int top__ = lua_gettop(L);
    if (top__ >= 2) {
      int v = dub::checkinteger(L, 2);
      self->visible_focus(v);
      return 0;
    } else {
      lua_pushnumber(L, self->visible_focus());
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "visible_focus: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "visible_focus: Unknown exception");
  }
  return dub::error(L);
}

/** void Fl_Widget::do_callback()
 * inc/Fl_Widget.h:840
 */
static int Fl_Lua_Spinner_do_callback(lua_State *L) {
  try {
    Fl_Lua_Spinner *self = *((Fl_Lua_Spinner **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Spinner"));
    int top__ = lua_gettop(L);
    if (top__ >= 3) {
      int type__ = lua_type(L, 3);
      void **ptr3__;
      if ( (ptr3__ = dub::issdata(L, 3, "void", type__)) ) {
        Fl_Widget *o = *((Fl_Widget **)dub::checksdata(L, 2, "FLTK.Fl_Widget"));
        void *arg = *((void **)ptr3__);
        self->do_callback(o, arg);
        return 0;
      } else {
        Fl_Widget *o = *((Fl_Widget **)dub::checksdata(L, 2, "FLTK.Fl_Widget"));
        long *arg = *((long **)dub::checksdata(L, 3, "long"));
        self->do_callback(o, *arg);
        return 0;
      }
    } else if (top__ >= 2) {
      Fl_Widget *o = *((Fl_Widget **)dub::checksdata(L, 2, "FLTK.Fl_Widget"));
      self->do_callback(o);
      return 0;
    } else {
      self->do_callback();
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "do_callback: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "do_callback: Unknown exception");
  }
  return dub::error(L);
}

/** int Fl_Widget::test_shortcut()
 * inc/Fl_Widget.h:855
 */
static int Fl_Lua_Spinner_test_shortcut(lua_State *L) {
  try {
    Fl_Lua_Spinner *self = *((Fl_Lua_Spinner **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Spinner"));
    int top__ = lua_gettop(L);
    if (top__ >= 3) {
      const char *p1 = dub::checkstring(L, 2);
      const bool require_alt = dub::checkboolean(L, 3);
      lua_pushnumber(L, Fl_Lua_Spinner::test_shortcut(p1, require_alt));
      return 1;
    } else if (top__ >= 2) {
      const char *p1 = dub::checkstring(L, 2);
      lua_pushnumber(L, Fl_Lua_Spinner::test_shortcut(p1));
      return 1;
    } else {
      lua_pushnumber(L, self->test_shortcut());
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "test_shortcut: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "test_shortcut: Unknown exception");
  }
  return dub::error(L);
}

/** void Fl_Widget::_set_fullscreen()
 * inc/Fl_Widget.h:861
 */
static int Fl_Lua_Spinner__set_fullscreen(lua_State *L) {
  try {
    Fl_Lua_Spinner *self = *((Fl_Lua_Spinner **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Spinner"));
    self->_set_fullscreen();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "_set_fullscreen: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "_set_fullscreen: Unknown exception");
  }
  return dub::error(L);
}

/** void Fl_Widget::_clear_fullscreen()
 * inc/Fl_Widget.h:862
 */
static int Fl_Lua_Spinner__clear_fullscreen(lua_State *L) {
  try {
    Fl_Lua_Spinner *self = *((Fl_Lua_Spinner **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Spinner"));
    self->_clear_fullscreen();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "_clear_fullscreen: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "_clear_fullscreen: Unknown exception");
  }
  return dub::error(L);
}

/** int Fl_Widget::contains(const Fl_Widget *w) const
 * inc/Fl_Widget.h:869
 */
static int Fl_Lua_Spinner_contains(lua_State *L) {
  try {
    Fl_Lua_Spinner *self = *((Fl_Lua_Spinner **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Spinner"));
    Fl_Widget *w = *((Fl_Widget **)dub::checksdata(L, 2, "FLTK.Fl_Widget"));
    lua_pushnumber(L, self->contains(w));
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "contains: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "contains: Unknown exception");
  }
  return dub::error(L);
}

/** int Fl_Widget::inside(const Fl_Widget *wgt) const
 * inc/Fl_Widget.h:877
 */
static int Fl_Lua_Spinner_inside(lua_State *L) {
  try {
    Fl_Lua_Spinner *self = *((Fl_Lua_Spinner **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Spinner"));
    Fl_Widget *wgt = *((Fl_Widget **)dub::checksdata(L, 2, "FLTK.Fl_Widget"));
    lua_pushnumber(L, self->inside(wgt));
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "inside: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "inside: Unknown exception");
  }
  return dub::error(L);
}

/** void Fl_Widget::redraw()
 * inc/Fl_Widget.h:882
 */
static int Fl_Lua_Spinner_redraw(lua_State *L) {
  try {
    Fl_Lua_Spinner *self = *((Fl_Lua_Spinner **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Spinner"));
    self->redraw();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "redraw: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "redraw: Unknown exception");
  }
  return dub::error(L);
}

/** void Fl_Widget::redraw_label()
 * inc/Fl_Widget.h:888
 */
static int Fl_Lua_Spinner_redraw_label(lua_State *L) {
  try {
    Fl_Lua_Spinner *self = *((Fl_Lua_Spinner **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Spinner"));
    self->redraw_label();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "redraw_label: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "redraw_label: Unknown exception");
  }
  return dub::error(L);
}

/** unsigned char Fl_Widget::damage() const
 * inc/Fl_Widget.h:896
 */
static int Fl_Lua_Spinner_damage(lua_State *L) {
  try {
    Fl_Lua_Spinner *self = *((Fl_Lua_Spinner **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Spinner"));
    int top__ = lua_gettop(L);
    if (top__ >= 6) {
      unsigned char c = dub::checkinteger(L, 2);
      int x = dub::checkinteger(L, 3);
      int y = dub::checkinteger(L, 4);
      int w = dub::checkinteger(L, 5);
      int h = dub::checkinteger(L, 6);
      self->damage(c, x, y, w, h);
      return 0;
    } else if (top__ >= 2) {
      unsigned char c = dub::checkinteger(L, 2);
      self->damage(c);
      return 0;
    } else {
      lua_pushnumber(L, self->damage());
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "damage: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "damage: Unknown exception");
  }
  return dub::error(L);
}

/** void Fl_Widget::clear_damage(unsigned char c=0)
 * inc/Fl_Widget.h:910
 */
static int Fl_Lua_Spinner_clear_damage(lua_State *L) {
  try {
    Fl_Lua_Spinner *self = *((Fl_Lua_Spinner **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Spinner"));
    int top__ = lua_gettop(L);
    if (top__ >= 2) {
      unsigned char c = dub::checkinteger(L, 2);
      self->clear_damage(c);
      return 0;
    } else {
      self->clear_damage();
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "clear_damage: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "clear_damage: Unknown exception");
  }
  return dub::error(L);
}

/** void Fl_Widget::draw_label(int, int, int, int, Fl_Align) const
 * inc/Fl_Widget.h:927
 */
static int Fl_Lua_Spinner_draw_label(lua_State *L) {
  try {
    Fl_Lua_Spinner *self = *((Fl_Lua_Spinner **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Spinner"));
    int p1 = dub::checkinteger(L, 2);
    int p2 = dub::checkinteger(L, 3);
    int p3 = dub::checkinteger(L, 4);
    int p4 = dub::checkinteger(L, 5);
    Fl_Align *p5 = *((Fl_Align **)dub::checksdata(L, 6, "Fl_Align"));
    self->draw_label(p1, p2, p3, p4, *p5);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "draw_label: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "draw_label: Unknown exception");
  }
  return dub::error(L);
}

/** void Fl_Widget::measure_label(int &ww, int &hh) const
 * inc/Fl_Widget.h:936
 */
static int Fl_Lua_Spinner_measure_label(lua_State *L) {
  try {
    Fl_Lua_Spinner *self = *((Fl_Lua_Spinner **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Spinner"));
    int ww = dub::checkinteger(L, 2);
    int hh = dub::checkinteger(L, 3);
    self->measure_label(ww, hh);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "measure_label: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "measure_label: Unknown exception");
  }
  return dub::error(L);
}

/** Fl_Window* Fl_Widget::window() const
 * inc/Fl_Widget.h:938
 */
static int Fl_Lua_Spinner_window(lua_State *L) {
  try {
    Fl_Lua_Spinner *self = *((Fl_Lua_Spinner **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Spinner"));
    Fl_Window *retval__ = self->window();
    if (!retval__) return 0;
    dub::pushudata(L, retval__, "FLTK.Fl_Window", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "window: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "window: Unknown exception");
  }
  return dub::error(L);
}

/** Fl_Window* Fl_Widget::top_window() const
 * inc/Fl_Widget.h:939
 */
#if (FL_MAJOR_VERSION>=1 && FL_MINOR_VERSION>=3 && FL_PATCH_VERSION>=3)
static int Fl_Lua_Spinner_top_window(lua_State *L) {
  try {
    Fl_Lua_Spinner *self = *((Fl_Lua_Spinner **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Spinner"));
    Fl_Window *retval__ = self->top_window();
    if (!retval__) return 0;
    dub::pushudata(L, retval__, "FLTK.Fl_Window", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "top_window: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "top_window: Unknown exception");
  }
  return dub::error(L);
}
#endif

/** Fl_Window* Fl_Widget::top_window_offset(int &xoff, int &yoff) const
 * inc/Fl_Widget.h:940
 */
#if (FL_MAJOR_VERSION>=1 && FL_MINOR_VERSION>=3 && FL_PATCH_VERSION>=3)
static int Fl_Lua_Spinner_top_window_offset(lua_State *L) {
  try {
    Fl_Lua_Spinner *self = *((Fl_Lua_Spinner **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Spinner"));
    int xoff = dub::checkinteger(L, 2);
    int yoff = dub::checkinteger(L, 3);
    Fl_Window *retval__ = self->top_window_offset(xoff, yoff);
    if (!retval__) return 0;
    dub::pushudata(L, retval__, "FLTK.Fl_Window", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "top_window_offset: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "top_window_offset: Unknown exception");
  }
  return dub::error(L);
}
#endif

/** virtual Fl_Window* Fl_Widget::as_window()
 * inc/Fl_Widget.h:979
 */
static int Fl_Lua_Spinner_as_window(lua_State *L) {
  try {
    Fl_Lua_Spinner *self = *((Fl_Lua_Spinner **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Spinner"));
    Fl_Window *retval__ = self->as_window();
    if (!retval__) return 0;
    dub::pushudata(L, retval__, "FLTK.Fl_Window", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "as_window: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "as_window: Unknown exception");
  }
  return dub::error(L);
}

/** virtual class Fl_Gl_Window* Fl_Widget::as_gl_window()
 * inc/Fl_Widget.h:991
 */
static int Fl_Lua_Spinner_as_gl_window(lua_State *L) {
  try {
    Fl_Lua_Spinner *self = *((Fl_Lua_Spinner **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Spinner"));
    class Fl_Gl_Window *retval__ = self->as_gl_window();
    if (!retval__) return 0;
    dub::pushudata(L, retval__, "class Fl_Gl_Window", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "as_gl_window: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "as_gl_window: Unknown exception");
  }
  return dub::error(L);
}

/** int Fl_Widget::use_accents_menu()
 * inc/Fl_Widget.h:995
 */
#if (FL_MAJOR_VERSION>=1 && FL_MINOR_VERSION>=3 && FL_PATCH_VERSION>=3)
static int Fl_Lua_Spinner_use_accents_menu(lua_State *L) {
  try {
    Fl_Lua_Spinner *self = *((Fl_Lua_Spinner **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Spinner"));
    lua_pushnumber(L, self->use_accents_menu());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "use_accents_menu: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "use_accents_menu: Unknown exception");
  }
  return dub::error(L);
}
#endif

/** Fl_Color Fl_Widget::color2() const
 * inc/Fl_Widget.h:1000
 */
static int Fl_Lua_Spinner_color2(lua_State *L) {
  try {
    Fl_Lua_Spinner *self = *((Fl_Lua_Spinner **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Spinner"));
    int top__ = lua_gettop(L);
    if (top__ >= 2) {
      unsigned a = dub::checkinteger(L, 2);
      self->color2(a);
      return 0;
    } else {
      dub::pushudata(L, new Fl_Color(self->color2()), "Fl_Color", true);
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "color2: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "color2: Unknown exception");
  }
  return dub::error(L);
}



// --=============================================== __tostring
static int Fl_Lua_Spinner___tostring(lua_State *L) {
  Fl_Lua_Spinner *self = *((Fl_Lua_Spinner **)dub::checksdata_n(L, 1, "FLTK.Fl_Lua_Spinner"));
  lua_pushfstring(L, "FLTK.Fl_Lua_Spinner: %p", self);
  
  return 1;
}

// --=============================================== METHODS

static const struct luaL_Reg Fl_Lua_Spinner_member_methods[] = {
  { "__gc"         , Fl_Lua_Spinner__Fl_Lua_Spinner },
  { "_cast_"       , Fl_Lua_Spinner__cast_    },
  { "new"          , Fl_Lua_Spinner_Fl_Lua_Spinner },
  { "format"       , Fl_Lua_Spinner_format    },
  { "handle"       , Fl_Lua_Spinner_handle    },
  { "maxinum"      , Fl_Lua_Spinner_maxinum   },
  { "maximum"      , Fl_Lua_Spinner_maximum   },
  { "mininum"      , Fl_Lua_Spinner_mininum   },
  { "minimum"      , Fl_Lua_Spinner_minimum   },
  { "range"        , Fl_Lua_Spinner_range     },
  { "resize"       , Fl_Lua_Spinner_resize    },
  { "step"         , Fl_Lua_Spinner_step      },
  { "textcolor"    , Fl_Lua_Spinner_textcolor },
  { "textfont"     , Fl_Lua_Spinner_textfont  },
  { "textsize"     , Fl_Lua_Spinner_textsize  },
  { "Type"         , Fl_Lua_Spinner_type      },
  { "value"        , Fl_Lua_Spinner_value     },
  { "color"        , Fl_Lua_Spinner_color     },
  { "selection_color", Fl_Lua_Spinner_selection_color },
  { "begin"        , Fl_Lua_Spinner_begin     },
  { "End"          , Fl_Lua_Spinner_end       },
  { "children"     , Fl_Lua_Spinner_children  },
  { "child"        , Fl_Lua_Spinner_child     },
  { "find"         , Fl_Lua_Spinner_find      },
  { "add"          , Fl_Lua_Spinner_add       },
  { "insert"       , Fl_Lua_Spinner_insert    },
  { "remove"       , Fl_Lua_Spinner_remove    },
  { "clear"        , Fl_Lua_Spinner_clear     },
  { "resizable"    , Fl_Lua_Spinner_resizable },
  { "add_resizable", Fl_Lua_Spinner_add_resizable },
  { "init_sizes"   , Fl_Lua_Spinner_init_sizes },
  { "clip_children", Fl_Lua_Spinner_clip_children },
  { "as_group"     , Fl_Lua_Spinner_as_group  },
  { "focus"        , Fl_Lua_Spinner_focus     },
  { "parent"       , Fl_Lua_Spinner_parent    },
  { "x"            , Fl_Lua_Spinner_x         },
  { "y"            , Fl_Lua_Spinner_y         },
  { "w"            , Fl_Lua_Spinner_w         },
  { "h"            , Fl_Lua_Spinner_h         },
  { "damage_resize", Fl_Lua_Spinner_damage_resize },
  { "position"     , Fl_Lua_Spinner_position  },
  { "size"         , Fl_Lua_Spinner_size      },
  { "align"        , Fl_Lua_Spinner_align     },
  { "box"          , Fl_Lua_Spinner_box       },
  { "label"        , Fl_Lua_Spinner_label     },
  { "copy_label"   , Fl_Lua_Spinner_copy_label },
  { "labeltype"    , Fl_Lua_Spinner_labeltype },
  { "labelcolor"   , Fl_Lua_Spinner_labelcolor },
  { "labelfont"    , Fl_Lua_Spinner_labelfont },
  { "labelsize"    , Fl_Lua_Spinner_labelsize },
  { "image"        , Fl_Lua_Spinner_image     },
  { "deimage"      , Fl_Lua_Spinner_deimage   },
  { "tooltip"      , Fl_Lua_Spinner_tooltip   },
  { "copy_tooltip" , Fl_Lua_Spinner_copy_tooltip },
  { "callback"     , Fl_Lua_Spinner_callback  },
  { "user_data"    , Fl_Lua_Spinner_user_data },
  { "argument"     , Fl_Lua_Spinner_argument  },
  { "when"         , Fl_Lua_Spinner_when      },
  { "visible"      , Fl_Lua_Spinner_visible   },
  { "visible_r"    , Fl_Lua_Spinner_visible_r },
  { "show"         , Fl_Lua_Spinner_show      },
  { "hide"         , Fl_Lua_Spinner_hide      },
  { "set_visible"  , Fl_Lua_Spinner_set_visible },
  { "clear_visible", Fl_Lua_Spinner_clear_visible },
  { "active"       , Fl_Lua_Spinner_active    },
  { "active_r"     , Fl_Lua_Spinner_active_r  },
  { "activate"     , Fl_Lua_Spinner_activate  },
  { "deactivate"   , Fl_Lua_Spinner_deactivate },
  { "output"       , Fl_Lua_Spinner_output    },
  { "set_output"   , Fl_Lua_Spinner_set_output },
  { "clear_output" , Fl_Lua_Spinner_clear_output },
  { "takesevents"  , Fl_Lua_Spinner_takesevents },
  { "changed"      , Fl_Lua_Spinner_changed   },
  { "set_changed"  , Fl_Lua_Spinner_set_changed },
  { "clear_changed", Fl_Lua_Spinner_clear_changed },
#if (FL_MAJOR_VERSION>=1 && FL_MINOR_VERSION>=3 && FL_PATCH_VERSION>=3)
  { "clear_active" , Fl_Lua_Spinner_clear_active },
#endif
#if (FL_MAJOR_VERSION>=1 && FL_MINOR_VERSION>=3 && FL_PATCH_VERSION>=3)
  { "set_active"   , Fl_Lua_Spinner_set_active },
#endif
  { "take_focus"   , Fl_Lua_Spinner_take_focus },
  { "set_visible_focus", Fl_Lua_Spinner_set_visible_focus },
  { "clear_visible_focus", Fl_Lua_Spinner_clear_visible_focus },
  { "visible_focus", Fl_Lua_Spinner_visible_focus },
  { "do_callback"  , Fl_Lua_Spinner_do_callback },
  { "test_shortcut", Fl_Lua_Spinner_test_shortcut },
  { "_set_fullscreen", Fl_Lua_Spinner__set_fullscreen },
  { "_clear_fullscreen", Fl_Lua_Spinner__clear_fullscreen },
  { "contains"     , Fl_Lua_Spinner_contains  },
  { "inside"       , Fl_Lua_Spinner_inside    },
  { "redraw"       , Fl_Lua_Spinner_redraw    },
  { "redraw_label" , Fl_Lua_Spinner_redraw_label },
  { "damage"       , Fl_Lua_Spinner_damage    },
  { "clear_damage" , Fl_Lua_Spinner_clear_damage },
  { "draw_label"   , Fl_Lua_Spinner_draw_label },
  { "measure_label", Fl_Lua_Spinner_measure_label },
  { "window"       , Fl_Lua_Spinner_window    },
#if (FL_MAJOR_VERSION>=1 && FL_MINOR_VERSION>=3 && FL_PATCH_VERSION>=3)
  { "top_window"   , Fl_Lua_Spinner_top_window },
#endif
#if (FL_MAJOR_VERSION>=1 && FL_MINOR_VERSION>=3 && FL_PATCH_VERSION>=3)
  { "top_window_offset", Fl_Lua_Spinner_top_window_offset },
#endif
  { "as_window"    , Fl_Lua_Spinner_as_window },
  { "as_gl_window" , Fl_Lua_Spinner_as_gl_window },
#if (FL_MAJOR_VERSION>=1 && FL_MINOR_VERSION>=3 && FL_PATCH_VERSION>=3)
  { "use_accents_menu", Fl_Lua_Spinner_use_accents_menu },
#endif
  { "color2"       , Fl_Lua_Spinner_color2    },
  { "__tostring"   , Fl_Lua_Spinner___tostring },
  { "deleted"      , dub::isDeleted       },
  { NULL, NULL},
};


 int luaopen_FLTK_Fl_Spinner(lua_State *L)
{
  // Create the metatable which will contain all the member methods
  luaL_newmetatable(L, "FLTK.Fl_Lua_Spinner");
  // <mt>

  // register member methods
  dub::fregister(L, Fl_Lua_Spinner_member_methods);
  // setup meta-table
  dub::setup(L, "FLTK.Fl_Lua_Spinner");
  // <mt>
  return 1;
}
