/**
 *
 * MACHINE GENERATED FILE. DO NOT EDIT.
 *
 * Bindings for class Fl_Tree_Item
 *
 * This file has been generated by dub 2.2.4.
 */
#include "dub/dub.h"
#include <FL/Fl_Tree_Item.H>


/** Fl_Tree_Item::Fl_Tree_Item(const Fl_Tree_Prefs &prefs)
 * inc/Fl_Tree_Item.h:125
 */
static int Fl_Tree_Item_Fl_Tree_Item(lua_State *L) {
  try {
    int type__ = lua_type(L, 1);
    void **ptr1__;
    if ( (ptr1__ = dub::issdata(L, 1, "FLTK.Fl_Tree_Prefs", type__)) ) {
      Fl_Tree_Prefs *prefs = *((Fl_Tree_Prefs **)ptr1__);
      Fl_Tree_Item *retval__ = new Fl_Tree_Item(*prefs);
      dub::pushudata(L, retval__, "FLTK.Fl_Tree_Item", true);
      return 1;
    } else {
      Fl_Tree_Item *o = *((Fl_Tree_Item **)dub::checksdata(L, 1, "FLTK.Fl_Tree_Item"));
      Fl_Tree_Item *retval__ = new Fl_Tree_Item(o);
      dub::pushudata(L, retval__, "FLTK.Fl_Tree_Item", true);
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "new: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "new: Unknown exception");
  }
  return dub::error(L);
}

/** Fl_Tree_Item::~Fl_Tree_Item()
 * inc/Fl_Tree_Item.h:130
 */
static int Fl_Tree_Item__Fl_Tree_Item(lua_State *L) {
  try {
    DubUserdata *userdata = ((DubUserdata*)dub::checksdata_d(L, 1, "FLTK.Fl_Tree_Item"));
    if (userdata->gc) {
      Fl_Tree_Item *self = (Fl_Tree_Item *)userdata->ptr;
      delete self;
    }
    userdata->gc = false;
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "__gc: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "__gc: Unknown exception");
  }
  return dub::error(L);
}

/** int Fl_Tree_Item::x() const
 * inc/Fl_Tree_Item.h:134
 */
static int Fl_Tree_Item_x(lua_State *L) {
  try {
    Fl_Tree_Item *self = *((Fl_Tree_Item **)dub::checksdata(L, 1, "FLTK.Fl_Tree_Item"));
    lua_pushnumber(L, self->x());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "x: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "x: Unknown exception");
  }
  return dub::error(L);
}

/** int Fl_Tree_Item::y() const
 * inc/Fl_Tree_Item.h:136
 */
static int Fl_Tree_Item_y(lua_State *L) {
  try {
    Fl_Tree_Item *self = *((Fl_Tree_Item **)dub::checksdata(L, 1, "FLTK.Fl_Tree_Item"));
    lua_pushnumber(L, self->y());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "y: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "y: Unknown exception");
  }
  return dub::error(L);
}

/** int Fl_Tree_Item::w() const
 * inc/Fl_Tree_Item.h:139
 */
static int Fl_Tree_Item_w(lua_State *L) {
  try {
    Fl_Tree_Item *self = *((Fl_Tree_Item **)dub::checksdata(L, 1, "FLTK.Fl_Tree_Item"));
    lua_pushnumber(L, self->w());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "w: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "w: Unknown exception");
  }
  return dub::error(L);
}

/** int Fl_Tree_Item::h() const
 * inc/Fl_Tree_Item.h:141
 */
static int Fl_Tree_Item_h(lua_State *L) {
  try {
    Fl_Tree_Item *self = *((Fl_Tree_Item **)dub::checksdata(L, 1, "FLTK.Fl_Tree_Item"));
    lua_pushnumber(L, self->h());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "h: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "h: Unknown exception");
  }
  return dub::error(L);
}

/** int Fl_Tree_Item::label_x() const
 * inc/Fl_Tree_Item.h:144
 */
#if (FL_MAJOR_VERSION>=1 && FL_MINOR_VERSION>=3 && FL_PATCH_VERSION>=3)
static int Fl_Tree_Item_label_x(lua_State *L) {
  try {
    Fl_Tree_Item *self = *((Fl_Tree_Item **)dub::checksdata(L, 1, "FLTK.Fl_Tree_Item"));
    lua_pushnumber(L, self->label_x());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "label_x: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "label_x: Unknown exception");
  }
  return dub::error(L);
}
#endif

/** int Fl_Tree_Item::label_y() const
 * inc/Fl_Tree_Item.h:147
 */
#if (FL_MAJOR_VERSION>=1 && FL_MINOR_VERSION>=3 && FL_PATCH_VERSION>=3)
static int Fl_Tree_Item_label_y(lua_State *L) {
  try {
    Fl_Tree_Item *self = *((Fl_Tree_Item **)dub::checksdata(L, 1, "FLTK.Fl_Tree_Item"));
    lua_pushnumber(L, self->label_y());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "label_y: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "label_y: Unknown exception");
  }
  return dub::error(L);
}
#endif

/** int Fl_Tree_Item::label_w() const
 * inc/Fl_Tree_Item.h:151
 */
#if (FL_MAJOR_VERSION>=1 && FL_MINOR_VERSION>=3 && FL_PATCH_VERSION>=3)
static int Fl_Tree_Item_label_w(lua_State *L) {
  try {
    Fl_Tree_Item *self = *((Fl_Tree_Item **)dub::checksdata(L, 1, "FLTK.Fl_Tree_Item"));
    lua_pushnumber(L, self->label_w());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "label_w: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "label_w: Unknown exception");
  }
  return dub::error(L);
}
#endif

/** int Fl_Tree_Item::label_h() const
 * inc/Fl_Tree_Item.h:154
 */
#if (FL_MAJOR_VERSION>=1 && FL_MINOR_VERSION>=3 && FL_PATCH_VERSION>=3)
static int Fl_Tree_Item_label_h(lua_State *L) {
  try {
    Fl_Tree_Item *self = *((Fl_Tree_Item **)dub::checksdata(L, 1, "FLTK.Fl_Tree_Item"));
    lua_pushnumber(L, self->label_h());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "label_h: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "label_h: Unknown exception");
  }
  return dub::error(L);
}
#endif

/** void Fl_Tree_Item::draw(int X, int &Y, int W, Fl_Widget *tree, Fl_Tree_Item *itemfocus, const Fl_Tree_Prefs &prefs, int lastchild=1)
 * inc/Fl_Tree_Item.h:160
 */
static int Fl_Tree_Item_draw(lua_State *L) {
  try {
    Fl_Tree_Item *self = *((Fl_Tree_Item **)dub::checksdata(L, 1, "FLTK.Fl_Tree_Item"));
    int top__ = lua_gettop(L);
    if (top__ >= 8) {
      int X = dub::checkinteger(L, 2);
      int Y = dub::checkinteger(L, 3);
      int W = dub::checkinteger(L, 4);
      Fl_Widget *tree = *((Fl_Widget **)dub::checksdata(L, 5, "FLTK.Fl_Widget"));
      Fl_Tree_Item *itemfocus = *((Fl_Tree_Item **)dub::checksdata(L, 6, "FLTK.Fl_Tree_Item"));
      Fl_Tree_Prefs *prefs = *((Fl_Tree_Prefs **)dub::checksdata(L, 7, "FLTK.Fl_Tree_Prefs"));
      int lastchild = dub::checkinteger(L, 8);
      self->draw(X, Y, W, tree, itemfocus, *prefs, lastchild);
      return 0;
    } else {
      int X = dub::checkinteger(L, 2);
      int Y = dub::checkinteger(L, 3);
      int W = dub::checkinteger(L, 4);
      Fl_Widget *tree = *((Fl_Widget **)dub::checksdata(L, 5, "FLTK.Fl_Widget"));
      Fl_Tree_Item *itemfocus = *((Fl_Tree_Item **)dub::checksdata(L, 6, "FLTK.Fl_Tree_Item"));
      Fl_Tree_Prefs *prefs = *((Fl_Tree_Prefs **)dub::checksdata(L, 7, "FLTK.Fl_Tree_Prefs"));
      self->draw(X, Y, W, tree, itemfocus, *prefs);
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "draw: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "draw: Unknown exception");
  }
  return dub::error(L);
}

/** void Fl_Tree_Item::show_self(const char *indent="") const
 * inc/Fl_Tree_Item.h:163
 */
static int Fl_Tree_Item_show_self(lua_State *L) {
  try {
    Fl_Tree_Item *self = *((Fl_Tree_Item **)dub::checksdata(L, 1, "FLTK.Fl_Tree_Item"));
    int top__ = lua_gettop(L);
    if (top__ >= 2) {
      const char *indent = dub::checkstring(L, 2);
      self->show_self(indent);
      return 0;
    } else {
      self->show_self();
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "show_self: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "show_self: Unknown exception");
  }
  return dub::error(L);
}

/** void Fl_Tree_Item::label(const char *val)
 * inc/Fl_Tree_Item.h:164
 */
static int Fl_Tree_Item_label(lua_State *L) {
  try {
    Fl_Tree_Item *self = *((Fl_Tree_Item **)dub::checksdata(L, 1, "FLTK.Fl_Tree_Item"));
    int top__ = lua_gettop(L);
    if (top__ >= 2) {
      const char *val = dub::checkstring(L, 2);
      self->label(val);
      return 0;
    } else {
      lua_pushstring(L, self->label());
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "label: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "label: Unknown exception");
  }
  return dub::error(L);
}

/** void Fl_Tree_Item::user_data(void *data)
 * inc/Fl_Tree_Item.h:168
 */
static int Fl_Tree_Item_user_data(lua_State *L) {
  try {
    Fl_Tree_Item *self = *((Fl_Tree_Item **)dub::checksdata(L, 1, "FLTK.Fl_Tree_Item"));
    int top__ = lua_gettop(L);
    if (top__ >= 2) {
      void *data = *((void **)dub::checksdata(L, 2, "void"));
      self->user_data(data);
      return 0;
    } else {
      self->user_data();
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "user_data: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "user_data: Unknown exception");
  }
  return dub::error(L);
}

/** void Fl_Tree_Item::labelfont(int val)
 * inc/Fl_Tree_Item.h:174
 */
static int Fl_Tree_Item_labelfont(lua_State *L) {
  try {
    Fl_Tree_Item *self = *((Fl_Tree_Item **)dub::checksdata(L, 1, "FLTK.Fl_Tree_Item"));
    int top__ = lua_gettop(L);
    if (top__ >= 2) {
      int val = dub::checkinteger(L, 2);
      self->labelfont(val);
      return 0;
    } else {
      lua_pushnumber(L, self->labelfont());
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "labelfont: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "labelfont: Unknown exception");
  }
  return dub::error(L);
}

/** void Fl_Tree_Item::labelsize(int val)
 * inc/Fl_Tree_Item.h:183
 */
static int Fl_Tree_Item_labelsize(lua_State *L) {
  try {
    Fl_Tree_Item *self = *((Fl_Tree_Item **)dub::checksdata(L, 1, "FLTK.Fl_Tree_Item"));
    int top__ = lua_gettop(L);
    if (top__ >= 2) {
      int val = dub::checkinteger(L, 2);
      self->labelsize(val);
      return 0;
    } else {
      lua_pushnumber(L, self->labelsize());
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "labelsize: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "labelsize: Unknown exception");
  }
  return dub::error(L);
}

/** void Fl_Tree_Item::labelfgcolor(int val)
 * inc/Fl_Tree_Item.h:192
 */
static int Fl_Tree_Item_labelfgcolor(lua_State *L) {
  try {
    Fl_Tree_Item *self = *((Fl_Tree_Item **)dub::checksdata(L, 1, "FLTK.Fl_Tree_Item"));
    int top__ = lua_gettop(L);
    if (top__ >= 2) {
      int val = dub::checkinteger(L, 2);
      self->labelfgcolor(val);
      return 0;
    } else {
      lua_pushnumber(L, self->labelfgcolor());
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "labelfgcolor: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "labelfgcolor: Unknown exception");
  }
  return dub::error(L);
}

/** void Fl_Tree_Item::labelcolor(int val)
 * inc/Fl_Tree_Item.h:200
 */
static int Fl_Tree_Item_labelcolor(lua_State *L) {
  try {
    Fl_Tree_Item *self = *((Fl_Tree_Item **)dub::checksdata(L, 1, "FLTK.Fl_Tree_Item"));
    int top__ = lua_gettop(L);
    if (top__ >= 2) {
      int val = dub::checkinteger(L, 2);
      self->labelcolor(val);
      return 0;
    } else {
      lua_pushnumber(L, self->labelcolor());
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "labelcolor: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "labelcolor: Unknown exception");
  }
  return dub::error(L);
}

/** void Fl_Tree_Item::labelbgcolor(int val)
 * inc/Fl_Tree_Item.h:209
 */
static int Fl_Tree_Item_labelbgcolor(lua_State *L) {
  try {
    Fl_Tree_Item *self = *((Fl_Tree_Item **)dub::checksdata(L, 1, "FLTK.Fl_Tree_Item"));
    int top__ = lua_gettop(L);
    if (top__ >= 2) {
      int val = dub::checkinteger(L, 2);
      self->labelbgcolor(val);
      return 0;
    } else {
      lua_pushnumber(L, self->labelbgcolor());
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "labelbgcolor: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "labelbgcolor: Unknown exception");
  }
  return dub::error(L);
}

/** void Fl_Tree_Item::widget(Fl_Widget *val)
 * inc/Fl_Tree_Item.h:220
 */
static int Fl_Tree_Item_widget(lua_State *L) {
  try {
    Fl_Tree_Item *self = *((Fl_Tree_Item **)dub::checksdata(L, 1, "FLTK.Fl_Tree_Item"));
    int top__ = lua_gettop(L);
    if (top__ >= 2) {
      Fl_Widget *val = *((Fl_Widget **)dub::checksdata(L, 2, "FLTK.Fl_Widget"));
      self->widget(val);
      return 0;
    } else {
      Fl_Widget *retval__ = self->widget();
      if (!retval__) return 0;
      dub::pushudata(L, retval__, "FLTK.Fl_Widget", false);
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "widget: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "widget: Unknown exception");
  }
  return dub::error(L);
}

/** int Fl_Tree_Item::children() const
 * inc/Fl_Tree_Item.h:229
 */
static int Fl_Tree_Item_children(lua_State *L) {
  try {
    Fl_Tree_Item *self = *((Fl_Tree_Item **)dub::checksdata(L, 1, "FLTK.Fl_Tree_Item"));
    lua_pushnumber(L, self->children());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "children: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "children: Unknown exception");
  }
  return dub::error(L);
}

/** Fl_Tree_Item* Fl_Tree_Item::child(int index)
 * inc/Fl_Tree_Item.h:233
 */
static int Fl_Tree_Item_child(lua_State *L) {
  try {
    Fl_Tree_Item *self = *((Fl_Tree_Item **)dub::checksdata(L, 1, "FLTK.Fl_Tree_Item"));
    int index = dub::checkinteger(L, 2);
    Fl_Tree_Item *retval__ = self->child(index);
    if (!retval__) return 0;
    dub::pushudata(L, retval__, "FLTK.Fl_Tree_Item", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "child: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "child: Unknown exception");
  }
  return dub::error(L);
}

/** int Fl_Tree_Item::has_children() const
 * inc/Fl_Tree_Item.h:239
 */
static int Fl_Tree_Item_has_children(lua_State *L) {
  try {
    Fl_Tree_Item *self = *((Fl_Tree_Item **)dub::checksdata(L, 1, "FLTK.Fl_Tree_Item"));
    lua_pushnumber(L, self->has_children());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "has_children: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "has_children: Unknown exception");
  }
  return dub::error(L);
}

/** int Fl_Tree_Item::find_child(const char *name)
 * inc/Fl_Tree_Item.h:242
 */
static int Fl_Tree_Item_find_child(lua_State *L) {
  try {
    Fl_Tree_Item *self = *((Fl_Tree_Item **)dub::checksdata(L, 1, "FLTK.Fl_Tree_Item"));
    int type__ = lua_type(L, 2);
    if (type__ == LUA_TSTRING) {
      const char *name = dub::checkstring(L, 2);
      lua_pushnumber(L, self->find_child(name));
      return 1;
    } else {
      Fl_Tree_Item *item = *((Fl_Tree_Item **)dub::checksdata(L, 2, "FLTK.Fl_Tree_Item"));
      lua_pushnumber(L, self->find_child(item));
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "find_child: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "find_child: Unknown exception");
  }
  return dub::error(L);
}

/** int Fl_Tree_Item::remove_child(Fl_Tree_Item *item)
 * inc/Fl_Tree_Item.h:244
 */
static int Fl_Tree_Item_remove_child(lua_State *L) {
  try {
    Fl_Tree_Item *self = *((Fl_Tree_Item **)dub::checksdata(L, 1, "FLTK.Fl_Tree_Item"));
    int type__ = lua_type(L, 2);
    if (type__ == LUA_TSTRING) {
      const char *new_label = dub::checkstring(L, 2);
      lua_pushnumber(L, self->remove_child(new_label));
      return 1;
    } else {
      Fl_Tree_Item *item = *((Fl_Tree_Item **)dub::checksdata(L, 2, "FLTK.Fl_Tree_Item"));
      lua_pushnumber(L, self->remove_child(item));
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "remove_child: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "remove_child: Unknown exception");
  }
  return dub::error(L);
}

/** void Fl_Tree_Item::clear_children()
 * inc/Fl_Tree_Item.h:246
 */
static int Fl_Tree_Item_clear_children(lua_State *L) {
  try {
    Fl_Tree_Item *self = *((Fl_Tree_Item **)dub::checksdata(L, 1, "FLTK.Fl_Tree_Item"));
    self->clear_children();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "clear_children: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "clear_children: Unknown exception");
  }
  return dub::error(L);
}

/** void Fl_Tree_Item::swap_children(int ax, int bx)
 * inc/Fl_Tree_Item.h:247
 */
static int Fl_Tree_Item_swap_children(lua_State *L) {
  try {
    Fl_Tree_Item *self = *((Fl_Tree_Item **)dub::checksdata(L, 1, "FLTK.Fl_Tree_Item"));
    int type__ = lua_type(L, 2);
    if (type__ == LUA_TNUMBER) {
      int ax = dub::checkinteger(L, 2);
      int bx = dub::checkinteger(L, 3);
      self->swap_children(ax, bx);
      return 0;
    } else {
      Fl_Tree_Item *a = *((Fl_Tree_Item **)dub::checksdata(L, 2, "FLTK.Fl_Tree_Item"));
      Fl_Tree_Item *b = *((Fl_Tree_Item **)dub::checksdata(L, 3, "FLTK.Fl_Tree_Item"));
      lua_pushnumber(L, self->swap_children(a, b));
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "swap_children: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "swap_children: Unknown exception");
  }
  return dub::error(L);
}

/** const Fl_Tree_Item* Fl_Tree_Item::find_child_item(const char *name) const
 * inc/Fl_Tree_Item.h:249
 */
#if (FL_MAJOR_VERSION>=1 && FL_MINOR_VERSION>=3 && FL_PATCH_VERSION>=3)
static int Fl_Tree_Item_find_child_item(lua_State *L) {
  try {
    Fl_Tree_Item *self = *((Fl_Tree_Item **)dub::checksdata(L, 1, "FLTK.Fl_Tree_Item"));
    int type__ = lua_type(L, 2);
    if (type__ == LUA_TSTRING) {
      const char *name = dub::checkstring(L, 2);
      const Fl_Tree_Item *retval__ = self->find_child_item(name);
      if (!retval__) return 0;
      dub::pushudata(L, const_cast<Fl_Tree_Item*>(retval__), "FLTK.Fl_Tree_Item", false);
      return 1;
    } else {
      char* *arr = *((char* **)dub::checksdata(L, 2, "char*"));
      const Fl_Tree_Item *retval__ = self->find_child_item(arr);
      if (!retval__) return 0;
      dub::pushudata(L, const_cast<Fl_Tree_Item*>(retval__), "FLTK.Fl_Tree_Item", false);
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "find_child_item: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "find_child_item: Unknown exception");
  }
  return dub::error(L);
}
#endif

/** const Fl_Tree_Item* Fl_Tree_Item::find_item(char **arr) const
 * inc/Fl_Tree_Item.h:253
 */
static int Fl_Tree_Item_find_item(lua_State *L) {
  try {
    Fl_Tree_Item *self = *((Fl_Tree_Item **)dub::checksdata(L, 1, "FLTK.Fl_Tree_Item"));
    char* *arr = *((char* **)dub::checksdata(L, 2, "char*"));
    const Fl_Tree_Item *retval__ = self->find_item(arr);
    if (!retval__) return 0;
    dub::pushudata(L, const_cast<Fl_Tree_Item*>(retval__), "FLTK.Fl_Tree_Item", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "find_item: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "find_item: Unknown exception");
  }
  return dub::error(L);
}

/** Fl_Tree_Item* Fl_Tree_Item::add(const Fl_Tree_Prefs &prefs, const char *new_label, Fl_Tree_Item *newitem)
 * inc/Fl_Tree_Item.h:258
 */
#if (FL_MAJOR_VERSION>=1 && FL_MINOR_VERSION>=3 && FL_PATCH_VERSION>=3)
static int Fl_Tree_Item_add(lua_State *L) {
  try {
    Fl_Tree_Item *self = *((Fl_Tree_Item **)dub::checksdata(L, 1, "FLTK.Fl_Tree_Item"));
    int top__ = lua_gettop(L);
    if (top__ >= 4) {
      int type__ = lua_type(L, 3);
      if (type__ == LUA_TSTRING) {
        Fl_Tree_Prefs *prefs = *((Fl_Tree_Prefs **)dub::checksdata(L, 2, "FLTK.Fl_Tree_Prefs"));
        const char *new_label = dub::checkstring(L, 3);
        Fl_Tree_Item *newitem = *((Fl_Tree_Item **)dub::checksdata(L, 4, "FLTK.Fl_Tree_Item"));
        Fl_Tree_Item *retval__ = self->add(*prefs, new_label, newitem);
        if (!retval__) return 0;
        dub::pushudata(L, retval__, "FLTK.Fl_Tree_Item", false);
        return 1;
      } else {
        Fl_Tree_Prefs *prefs = *((Fl_Tree_Prefs **)dub::checksdata(L, 2, "FLTK.Fl_Tree_Prefs"));
        char* *arr = *((char* **)dub::checksdata(L, 3, "char*"));
        Fl_Tree_Item *newitem = *((Fl_Tree_Item **)dub::checksdata(L, 4, "FLTK.Fl_Tree_Item"));
        Fl_Tree_Item *retval__ = self->add(*prefs, arr, newitem);
        if (!retval__) return 0;
        dub::pushudata(L, retval__, "FLTK.Fl_Tree_Item", false);
        return 1;
      }
    } else {
      int type__ = lua_type(L, 3);
      if (type__ == LUA_TSTRING) {
        Fl_Tree_Prefs *prefs = *((Fl_Tree_Prefs **)dub::checksdata(L, 2, "FLTK.Fl_Tree_Prefs"));
        const char *new_label = dub::checkstring(L, 3);
        Fl_Tree_Item *retval__ = self->add(*prefs, new_label);
        if (!retval__) return 0;
        dub::pushudata(L, retval__, "FLTK.Fl_Tree_Item", false);
        return 1;
      } else {
        Fl_Tree_Prefs *prefs = *((Fl_Tree_Prefs **)dub::checksdata(L, 2, "FLTK.Fl_Tree_Prefs"));
        char* *arr = *((char* **)dub::checksdata(L, 3, "char*"));
        Fl_Tree_Item *retval__ = self->add(*prefs, arr);
        if (!retval__) return 0;
        dub::pushudata(L, retval__, "FLTK.Fl_Tree_Item", false);
        return 1;
      }
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "add: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "add: Unknown exception");
  }
  return dub::error(L);
}
#endif

/** Fl_Tree_Item* Fl_Tree_Item::insert(const Fl_Tree_Prefs &prefs, const char *new_label, int pos=0)
 * inc/Fl_Tree_Item.h:272
 */
static int Fl_Tree_Item_insert(lua_State *L) {
  try {
    Fl_Tree_Item *self = *((Fl_Tree_Item **)dub::checksdata(L, 1, "FLTK.Fl_Tree_Item"));
    int top__ = lua_gettop(L);
    if (top__ >= 4) {
      Fl_Tree_Prefs *prefs = *((Fl_Tree_Prefs **)dub::checksdata(L, 2, "FLTK.Fl_Tree_Prefs"));
      const char *new_label = dub::checkstring(L, 3);
      int pos = dub::checkinteger(L, 4);
      Fl_Tree_Item *retval__ = self->insert(*prefs, new_label, pos);
      if (!retval__) return 0;
      dub::pushudata(L, retval__, "FLTK.Fl_Tree_Item", false);
      return 1;
    } else {
      Fl_Tree_Prefs *prefs = *((Fl_Tree_Prefs **)dub::checksdata(L, 2, "FLTK.Fl_Tree_Prefs"));
      const char *new_label = dub::checkstring(L, 3);
      Fl_Tree_Item *retval__ = self->insert(*prefs, new_label);
      if (!retval__) return 0;
      dub::pushudata(L, retval__, "FLTK.Fl_Tree_Item", false);
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "insert: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "insert: Unknown exception");
  }
  return dub::error(L);
}

/** Fl_Tree_Item* Fl_Tree_Item::insert_above(const Fl_Tree_Prefs &prefs, const char *new_label)
 * inc/Fl_Tree_Item.h:273
 */
static int Fl_Tree_Item_insert_above(lua_State *L) {
  try {
    Fl_Tree_Item *self = *((Fl_Tree_Item **)dub::checksdata(L, 1, "FLTK.Fl_Tree_Item"));
    Fl_Tree_Prefs *prefs = *((Fl_Tree_Prefs **)dub::checksdata(L, 2, "FLTK.Fl_Tree_Prefs"));
    const char *new_label = dub::checkstring(L, 3);
    Fl_Tree_Item *retval__ = self->insert_above(*prefs, new_label);
    if (!retval__) return 0;
    dub::pushudata(L, retval__, "FLTK.Fl_Tree_Item", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "insert_above: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "insert_above: Unknown exception");
  }
  return dub::error(L);
}

/** Fl_Tree_Item* Fl_Tree_Item::deparent(int index)
 * inc/Fl_Tree_Item.h:274
 */
#if (FL_MAJOR_VERSION>=1 && FL_MINOR_VERSION>=3 && FL_PATCH_VERSION>=3)
static int Fl_Tree_Item_deparent(lua_State *L) {
  try {
    Fl_Tree_Item *self = *((Fl_Tree_Item **)dub::checksdata(L, 1, "FLTK.Fl_Tree_Item"));
    int index = dub::checkinteger(L, 2);
    Fl_Tree_Item *retval__ = self->deparent(index);
    if (!retval__) return 0;
    dub::pushudata(L, retval__, "FLTK.Fl_Tree_Item", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "deparent: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "deparent: Unknown exception");
  }
  return dub::error(L);
}
#endif

/** int Fl_Tree_Item::reparent(Fl_Tree_Item *newchild, int index)
 * inc/Fl_Tree_Item.h:275
 */
#if (FL_MAJOR_VERSION>=1 && FL_MINOR_VERSION>=3 && FL_PATCH_VERSION>=3)
static int Fl_Tree_Item_reparent(lua_State *L) {
  try {
    Fl_Tree_Item *self = *((Fl_Tree_Item **)dub::checksdata(L, 1, "FLTK.Fl_Tree_Item"));
    Fl_Tree_Item *newchild = *((Fl_Tree_Item **)dub::checksdata(L, 2, "FLTK.Fl_Tree_Item"));
    int index = dub::checkinteger(L, 3);
    lua_pushnumber(L, self->reparent(newchild, index));
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "reparent: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "reparent: Unknown exception");
  }
  return dub::error(L);
}
#endif

/** int Fl_Tree_Item::move(int to, int from)
 * inc/Fl_Tree_Item.h:276
 */
#if (FL_MAJOR_VERSION>=1 && FL_MINOR_VERSION>=3 && FL_PATCH_VERSION>=3)
static int Fl_Tree_Item_move(lua_State *L) {
  try {
    Fl_Tree_Item *self = *((Fl_Tree_Item **)dub::checksdata(L, 1, "FLTK.Fl_Tree_Item"));
    int top__ = lua_gettop(L);
    if (top__ >= 4) {
      Fl_Tree_Item *item = *((Fl_Tree_Item **)dub::checksdata(L, 2, "FLTK.Fl_Tree_Item"));
      int op = dub::checkinteger(L, 3);
      int pos = dub::checkinteger(L, 4);
      lua_pushnumber(L, self->move(item, op, pos));
      return 1;
    } else if (top__ >= 3) {
      int type__ = lua_type(L, 2);
      if (type__ == LUA_TNUMBER) {
        int to = dub::checkinteger(L, 2);
        int from = dub::checkinteger(L, 3);
        lua_pushnumber(L, self->move(to, from));
        return 1;
      } else {
        Fl_Tree_Item *item = *((Fl_Tree_Item **)dub::checksdata(L, 2, "FLTK.Fl_Tree_Item"));
        int op = dub::checkinteger(L, 3);
        lua_pushnumber(L, self->move(item, op));
        return 1;
      }
    } else {
      Fl_Tree_Item *item = *((Fl_Tree_Item **)dub::checksdata(L, 2, "FLTK.Fl_Tree_Item"));
      lua_pushnumber(L, self->move(item));
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "move: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "move: Unknown exception");
  }
  return dub::error(L);
}
#endif

/** int Fl_Tree_Item::move_above(Fl_Tree_Item *item)
 * inc/Fl_Tree_Item.h:278
 */
#if (FL_MAJOR_VERSION>=1 && FL_MINOR_VERSION>=3 && FL_PATCH_VERSION>=3)
static int Fl_Tree_Item_move_above(lua_State *L) {
  try {
    Fl_Tree_Item *self = *((Fl_Tree_Item **)dub::checksdata(L, 1, "FLTK.Fl_Tree_Item"));
    Fl_Tree_Item *item = *((Fl_Tree_Item **)dub::checksdata(L, 2, "FLTK.Fl_Tree_Item"));
    lua_pushnumber(L, self->move_above(item));
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "move_above: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "move_above: Unknown exception");
  }
  return dub::error(L);
}
#endif

/** int Fl_Tree_Item::move_below(Fl_Tree_Item *item)
 * inc/Fl_Tree_Item.h:279
 */
#if (FL_MAJOR_VERSION>=1 && FL_MINOR_VERSION>=3 && FL_PATCH_VERSION>=3)
static int Fl_Tree_Item_move_below(lua_State *L) {
  try {
    Fl_Tree_Item *self = *((Fl_Tree_Item **)dub::checksdata(L, 1, "FLTK.Fl_Tree_Item"));
    Fl_Tree_Item *item = *((Fl_Tree_Item **)dub::checksdata(L, 2, "FLTK.Fl_Tree_Item"));
    lua_pushnumber(L, self->move_below(item));
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "move_below: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "move_below: Unknown exception");
  }
  return dub::error(L);
}
#endif

/** int Fl_Tree_Item::move_into(Fl_Tree_Item *item, int pos=0)
 * inc/Fl_Tree_Item.h:280
 */
#if (FL_MAJOR_VERSION>=1 && FL_MINOR_VERSION>=3 && FL_PATCH_VERSION>=3)
static int Fl_Tree_Item_move_into(lua_State *L) {
  try {
    Fl_Tree_Item *self = *((Fl_Tree_Item **)dub::checksdata(L, 1, "FLTK.Fl_Tree_Item"));
    int top__ = lua_gettop(L);
    if (top__ >= 3) {
      Fl_Tree_Item *item = *((Fl_Tree_Item **)dub::checksdata(L, 2, "FLTK.Fl_Tree_Item"));
      int pos = dub::checkinteger(L, 3);
      lua_pushnumber(L, self->move_into(item, pos));
      return 1;
    } else {
      Fl_Tree_Item *item = *((Fl_Tree_Item **)dub::checksdata(L, 2, "FLTK.Fl_Tree_Item"));
      lua_pushnumber(L, self->move_into(item));
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "move_into: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "move_into: Unknown exception");
  }
  return dub::error(L);
}
#endif

/** int Fl_Tree_Item::depth() const
 * inc/Fl_Tree_Item.h:281
 */
static int Fl_Tree_Item_depth(lua_State *L) {
  try {
    Fl_Tree_Item *self = *((Fl_Tree_Item **)dub::checksdata(L, 1, "FLTK.Fl_Tree_Item"));
    lua_pushnumber(L, self->depth());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "depth: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "depth: Unknown exception");
  }
  return dub::error(L);
}

/** Fl_Tree_Item* Fl_Tree_Item::prev()
 * inc/Fl_Tree_Item.h:282
 */
static int Fl_Tree_Item_prev(lua_State *L) {
  try {
    Fl_Tree_Item *self = *((Fl_Tree_Item **)dub::checksdata(L, 1, "FLTK.Fl_Tree_Item"));
    Fl_Tree_Item *retval__ = self->prev();
    if (!retval__) return 0;
    dub::pushudata(L, retval__, "FLTK.Fl_Tree_Item", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "prev: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "prev: Unknown exception");
  }
  return dub::error(L);
}

/** Fl_Tree_Item* Fl_Tree_Item::next()
 * inc/Fl_Tree_Item.h:283
 */
static int Fl_Tree_Item_next(lua_State *L) {
  try {
    Fl_Tree_Item *self = *((Fl_Tree_Item **)dub::checksdata(L, 1, "FLTK.Fl_Tree_Item"));
    Fl_Tree_Item *retval__ = self->next();
    if (!retval__) return 0;
    dub::pushudata(L, retval__, "FLTK.Fl_Tree_Item", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "next: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "next: Unknown exception");
  }
  return dub::error(L);
}

/** Fl_Tree_Item* Fl_Tree_Item::next_sibling()
 * inc/Fl_Tree_Item.h:284
 */
static int Fl_Tree_Item_next_sibling(lua_State *L) {
  try {
    Fl_Tree_Item *self = *((Fl_Tree_Item **)dub::checksdata(L, 1, "FLTK.Fl_Tree_Item"));
    Fl_Tree_Item *retval__ = self->next_sibling();
    if (!retval__) return 0;
    dub::pushudata(L, retval__, "FLTK.Fl_Tree_Item", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "next_sibling: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "next_sibling: Unknown exception");
  }
  return dub::error(L);
}

/** Fl_Tree_Item* Fl_Tree_Item::prev_sibling()
 * inc/Fl_Tree_Item.h:285
 */
static int Fl_Tree_Item_prev_sibling(lua_State *L) {
  try {
    Fl_Tree_Item *self = *((Fl_Tree_Item **)dub::checksdata(L, 1, "FLTK.Fl_Tree_Item"));
    Fl_Tree_Item *retval__ = self->prev_sibling();
    if (!retval__) return 0;
    dub::pushudata(L, retval__, "FLTK.Fl_Tree_Item", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "prev_sibling: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "prev_sibling: Unknown exception");
  }
  return dub::error(L);
}

/** void Fl_Tree_Item::update_prev_next(int index)
 * inc/Fl_Tree_Item.h:286
 */
static int Fl_Tree_Item_update_prev_next(lua_State *L) {
  try {
    Fl_Tree_Item *self = *((Fl_Tree_Item **)dub::checksdata(L, 1, "FLTK.Fl_Tree_Item"));
    int index = dub::checkinteger(L, 2);
    self->update_prev_next(index);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "update_prev_next: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "update_prev_next: Unknown exception");
  }
  return dub::error(L);
}

/** Fl_Tree_Item* Fl_Tree_Item::next_displayed(Fl_Tree_Prefs &prefs)
 * inc/Fl_Tree_Item.h:287
 */
static int Fl_Tree_Item_next_displayed(lua_State *L) {
  try {
    Fl_Tree_Item *self = *((Fl_Tree_Item **)dub::checksdata(L, 1, "FLTK.Fl_Tree_Item"));
    Fl_Tree_Prefs *prefs = *((Fl_Tree_Prefs **)dub::checksdata(L, 2, "FLTK.Fl_Tree_Prefs"));
    Fl_Tree_Item *retval__ = self->next_displayed(*prefs);
    if (!retval__) return 0;
    dub::pushudata(L, retval__, "FLTK.Fl_Tree_Item", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "next_displayed: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "next_displayed: Unknown exception");
  }
  return dub::error(L);
}

/** Fl_Tree_Item* Fl_Tree_Item::prev_displayed(Fl_Tree_Prefs &prefs)
 * inc/Fl_Tree_Item.h:288
 */
static int Fl_Tree_Item_prev_displayed(lua_State *L) {
  try {
    Fl_Tree_Item *self = *((Fl_Tree_Item **)dub::checksdata(L, 1, "FLTK.Fl_Tree_Item"));
    Fl_Tree_Prefs *prefs = *((Fl_Tree_Prefs **)dub::checksdata(L, 2, "FLTK.Fl_Tree_Prefs"));
    Fl_Tree_Item *retval__ = self->prev_displayed(*prefs);
    if (!retval__) return 0;
    dub::pushudata(L, retval__, "FLTK.Fl_Tree_Item", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "prev_displayed: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "prev_displayed: Unknown exception");
  }
  return dub::error(L);
}

/** Fl_Tree_Item* Fl_Tree_Item::next_visible(Fl_Tree_Prefs &prefs)
 * inc/Fl_Tree_Item.h:289
 */
#if (FL_MAJOR_VERSION>=1 && FL_MINOR_VERSION>=3 && FL_PATCH_VERSION>=3)
static int Fl_Tree_Item_next_visible(lua_State *L) {
  try {
    Fl_Tree_Item *self = *((Fl_Tree_Item **)dub::checksdata(L, 1, "FLTK.Fl_Tree_Item"));
    Fl_Tree_Prefs *prefs = *((Fl_Tree_Prefs **)dub::checksdata(L, 2, "FLTK.Fl_Tree_Prefs"));
    Fl_Tree_Item *retval__ = self->next_visible(*prefs);
    if (!retval__) return 0;
    dub::pushudata(L, retval__, "FLTK.Fl_Tree_Item", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "next_visible: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "next_visible: Unknown exception");
  }
  return dub::error(L);
}
#endif

/** Fl_Tree_Item* Fl_Tree_Item::prev_visible(Fl_Tree_Prefs &prefs)
 * inc/Fl_Tree_Item.h:290
 */
#if (FL_MAJOR_VERSION>=1 && FL_MINOR_VERSION>=3 && FL_PATCH_VERSION>=3)
static int Fl_Tree_Item_prev_visible(lua_State *L) {
  try {
    Fl_Tree_Item *self = *((Fl_Tree_Item **)dub::checksdata(L, 1, "FLTK.Fl_Tree_Item"));
    Fl_Tree_Prefs *prefs = *((Fl_Tree_Prefs **)dub::checksdata(L, 2, "FLTK.Fl_Tree_Prefs"));
    Fl_Tree_Item *retval__ = self->prev_visible(*prefs);
    if (!retval__) return 0;
    dub::pushudata(L, retval__, "FLTK.Fl_Tree_Item", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "prev_visible: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "prev_visible: Unknown exception");
  }
  return dub::error(L);
}
#endif

/** Fl_Tree_Item* Fl_Tree_Item::parent()
 * inc/Fl_Tree_Item.h:293
 */
static int Fl_Tree_Item_parent(lua_State *L) {
  try {
    Fl_Tree_Item *self = *((Fl_Tree_Item **)dub::checksdata(L, 1, "FLTK.Fl_Tree_Item"));
    int top__ = lua_gettop(L);
    if (top__ >= 2) {
      Fl_Tree_Item *val = *((Fl_Tree_Item **)dub::checksdata(L, 2, "FLTK.Fl_Tree_Item"));
      self->parent(val);
      return 0;
    } else {
      Fl_Tree_Item *retval__ = self->parent();
      if (!retval__) return 0;
      dub::pushudata(L, retval__, "FLTK.Fl_Tree_Item", false);
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "parent: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "parent: Unknown exception");
  }
  return dub::error(L);
}

/** void Fl_Tree_Item::open()
 * inc/Fl_Tree_Item.h:316
 */
static int Fl_Tree_Item_open(lua_State *L) {
  try {
    Fl_Tree_Item *self = *((Fl_Tree_Item **)dub::checksdata(L, 1, "FLTK.Fl_Tree_Item"));
    self->open();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "open: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "open: Unknown exception");
  }
  return dub::error(L);
}

/** void Fl_Tree_Item::close()
 * inc/Fl_Tree_Item.h:317
 */
static int Fl_Tree_Item_close(lua_State *L) {
  try {
    Fl_Tree_Item *self = *((Fl_Tree_Item **)dub::checksdata(L, 1, "FLTK.Fl_Tree_Item"));
    self->close();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "close: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "close: Unknown exception");
  }
  return dub::error(L);
}

/** int Fl_Tree_Item::is_open() const
 * inc/Fl_Tree_Item.h:319
 */
static int Fl_Tree_Item_is_open(lua_State *L) {
  try {
    Fl_Tree_Item *self = *((Fl_Tree_Item **)dub::checksdata(L, 1, "FLTK.Fl_Tree_Item"));
    lua_pushnumber(L, self->is_open());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "is_open: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "is_open: Unknown exception");
  }
  return dub::error(L);
}

/** int Fl_Tree_Item::is_close() const
 * inc/Fl_Tree_Item.h:323
 */
static int Fl_Tree_Item_is_close(lua_State *L) {
  try {
    Fl_Tree_Item *self = *((Fl_Tree_Item **)dub::checksdata(L, 1, "FLTK.Fl_Tree_Item"));
    lua_pushnumber(L, self->is_close());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "is_close: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "is_close: Unknown exception");
  }
  return dub::error(L);
}

/** void Fl_Tree_Item::open_toggle()
 * inc/Fl_Tree_Item.h:327
 */
static int Fl_Tree_Item_open_toggle(lua_State *L) {
  try {
    Fl_Tree_Item *self = *((Fl_Tree_Item **)dub::checksdata(L, 1, "FLTK.Fl_Tree_Item"));
    self->open_toggle();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "open_toggle: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "open_toggle: Unknown exception");
  }
  return dub::error(L);
}

/** void Fl_Tree_Item::select(int val=1)
 * inc/Fl_Tree_Item.h:333
 */
static int Fl_Tree_Item_select(lua_State *L) {
  try {
    Fl_Tree_Item *self = *((Fl_Tree_Item **)dub::checksdata(L, 1, "FLTK.Fl_Tree_Item"));
    int top__ = lua_gettop(L);
    if (top__ >= 2) {
      int val = dub::checkinteger(L, 2);
      self->select(val);
      return 0;
    } else {
      self->select();
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "select: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "select: Unknown exception");
  }
  return dub::error(L);
}

/** void Fl_Tree_Item::select_toggle()
 * inc/Fl_Tree_Item.h:337
 */
static int Fl_Tree_Item_select_toggle(lua_State *L) {
  try {
    Fl_Tree_Item *self = *((Fl_Tree_Item **)dub::checksdata(L, 1, "FLTK.Fl_Tree_Item"));
    self->select_toggle();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "select_toggle: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "select_toggle: Unknown exception");
  }
  return dub::error(L);
}

/** int Fl_Tree_Item::select_all()
 * inc/Fl_Tree_Item.h:348
 */
static int Fl_Tree_Item_select_all(lua_State *L) {
  try {
    Fl_Tree_Item *self = *((Fl_Tree_Item **)dub::checksdata(L, 1, "FLTK.Fl_Tree_Item"));
    lua_pushnumber(L, self->select_all());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "select_all: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "select_all: Unknown exception");
  }
  return dub::error(L);
}

/** void Fl_Tree_Item::deselect()
 * inc/Fl_Tree_Item.h:360
 */
static int Fl_Tree_Item_deselect(lua_State *L) {
  try {
    Fl_Tree_Item *self = *((Fl_Tree_Item **)dub::checksdata(L, 1, "FLTK.Fl_Tree_Item"));
    self->deselect();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "deselect: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "deselect: Unknown exception");
  }
  return dub::error(L);
}

/** int Fl_Tree_Item::deselect_all()
 * inc/Fl_Tree_Item.h:367
 */
static int Fl_Tree_Item_deselect_all(lua_State *L) {
  try {
    Fl_Tree_Item *self = *((Fl_Tree_Item **)dub::checksdata(L, 1, "FLTK.Fl_Tree_Item"));
    lua_pushnumber(L, self->deselect_all());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "deselect_all: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "deselect_all: Unknown exception");
  }
  return dub::error(L);
}

/** char Fl_Tree_Item::is_selected() const
 * inc/Fl_Tree_Item.h:379
 */
static int Fl_Tree_Item_is_selected(lua_State *L) {
  try {
    Fl_Tree_Item *self = *((Fl_Tree_Item **)dub::checksdata(L, 1, "FLTK.Fl_Tree_Item"));
    lua_pushnumber(L, self->is_selected());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "is_selected: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "is_selected: Unknown exception");
  }
  return dub::error(L);
}

/** void Fl_Tree_Item::activate(int val=1)
 * inc/Fl_Tree_Item.h:390
 */
static int Fl_Tree_Item_activate(lua_State *L) {
  try {
    Fl_Tree_Item *self = *((Fl_Tree_Item **)dub::checksdata(L, 1, "FLTK.Fl_Tree_Item"));
    int top__ = lua_gettop(L);
    if (top__ >= 2) {
      int val = dub::checkinteger(L, 2);
      self->activate(val);
      return 0;
    } else {
      self->activate();
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "activate: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "activate: Unknown exception");
  }
  return dub::error(L);
}

/** void Fl_Tree_Item::deactivate()
 * inc/Fl_Tree_Item.h:404
 */
static int Fl_Tree_Item_deactivate(lua_State *L) {
  try {
    Fl_Tree_Item *self = *((Fl_Tree_Item **)dub::checksdata(L, 1, "FLTK.Fl_Tree_Item"));
    self->deactivate();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "deactivate: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "deactivate: Unknown exception");
  }
  return dub::error(L);
}

/** char Fl_Tree_Item::is_activated() const
 * inc/Fl_Tree_Item.h:408
 */
static int Fl_Tree_Item_is_activated(lua_State *L) {
  try {
    Fl_Tree_Item *self = *((Fl_Tree_Item **)dub::checksdata(L, 1, "FLTK.Fl_Tree_Item"));
    lua_pushnumber(L, self->is_activated());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "is_activated: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "is_activated: Unknown exception");
  }
  return dub::error(L);
}

/** char Fl_Tree_Item::is_active() const
 * inc/Fl_Tree_Item.h:412
 */
static int Fl_Tree_Item_is_active(lua_State *L) {
  try {
    Fl_Tree_Item *self = *((Fl_Tree_Item **)dub::checksdata(L, 1, "FLTK.Fl_Tree_Item"));
    lua_pushnumber(L, self->is_active());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "is_active: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "is_active: Unknown exception");
  }
  return dub::error(L);
}

/** int Fl_Tree_Item::visible() const
 * inc/Fl_Tree_Item.h:416
 */
static int Fl_Tree_Item_visible(lua_State *L) {
  try {
    Fl_Tree_Item *self = *((Fl_Tree_Item **)dub::checksdata(L, 1, "FLTK.Fl_Tree_Item"));
    lua_pushnumber(L, self->visible());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "visible: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "visible: Unknown exception");
  }
  return dub::error(L);
}

/** int Fl_Tree_Item::is_visible() const
 * inc/Fl_Tree_Item.h:420
 */
static int Fl_Tree_Item_is_visible(lua_State *L) {
  try {
    Fl_Tree_Item *self = *((Fl_Tree_Item **)dub::checksdata(L, 1, "FLTK.Fl_Tree_Item"));
    lua_pushnumber(L, self->is_visible());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "is_visible: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "is_visible: Unknown exception");
  }
  return dub::error(L);
}

/** int Fl_Tree_Item::visible_r() const
 * inc/Fl_Tree_Item.h:423
 */
static int Fl_Tree_Item_visible_r(lua_State *L) {
  try {
    Fl_Tree_Item *self = *((Fl_Tree_Item **)dub::checksdata(L, 1, "FLTK.Fl_Tree_Item"));
    lua_pushnumber(L, self->visible_r());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "visible_r: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "visible_r: Unknown exception");
  }
  return dub::error(L);
}

/** void Fl_Tree_Item::usericon(Fl_Image *val)
 * inc/Fl_Tree_Item.h:426
 */
static int Fl_Tree_Item_usericon(lua_State *L) {
  try {
    Fl_Tree_Item *self = *((Fl_Tree_Item **)dub::checksdata(L, 1, "FLTK.Fl_Tree_Item"));
    int top__ = lua_gettop(L);
    if (top__ >= 2) {
      Fl_Image *val = *((Fl_Image **)dub::checksdata(L, 2, "FLTK.Fl_Image"));
      self->usericon(val);
      return 0;
    } else {
      Fl_Image *retval__ = self->usericon();
      if (!retval__) return 0;
      dub::pushudata(L, retval__, "FLTK.Fl_Image", false);
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "usericon: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "usericon: Unknown exception");
  }
  return dub::error(L);
}

/** const Fl_Tree_Item* Fl_Tree_Item::find_clicked(const Fl_Tree_Prefs &prefs) const
 * inc/Fl_Tree_Item.h:441
 */
static int Fl_Tree_Item_find_clicked(lua_State *L) {
  try {
    Fl_Tree_Item *self = *((Fl_Tree_Item **)dub::checksdata(L, 1, "FLTK.Fl_Tree_Item"));
    Fl_Tree_Prefs *prefs = *((Fl_Tree_Prefs **)dub::checksdata(L, 2, "FLTK.Fl_Tree_Prefs"));
    const Fl_Tree_Item *retval__ = self->find_clicked(*prefs);
    if (!retval__) return 0;
    dub::pushudata(L, const_cast<Fl_Tree_Item*>(retval__), "FLTK.Fl_Tree_Item", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "find_clicked: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "find_clicked: Unknown exception");
  }
  return dub::error(L);
}

/** int Fl_Tree_Item::event_on_collapse_icon(const Fl_Tree_Prefs &prefs) const
 * inc/Fl_Tree_Item.h:444
 */
static int Fl_Tree_Item_event_on_collapse_icon(lua_State *L) {
  try {
    Fl_Tree_Item *self = *((Fl_Tree_Item **)dub::checksdata(L, 1, "FLTK.Fl_Tree_Item"));
    Fl_Tree_Prefs *prefs = *((Fl_Tree_Prefs **)dub::checksdata(L, 2, "FLTK.Fl_Tree_Prefs"));
    lua_pushnumber(L, self->event_on_collapse_icon(*prefs));
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "event_on_collapse_icon: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "event_on_collapse_icon: Unknown exception");
  }
  return dub::error(L);
}

/** int Fl_Tree_Item::event_on_label(const Fl_Tree_Prefs &prefs) const
 * inc/Fl_Tree_Item.h:445
 */
static int Fl_Tree_Item_event_on_label(lua_State *L) {
  try {
    Fl_Tree_Item *self = *((Fl_Tree_Item **)dub::checksdata(L, 1, "FLTK.Fl_Tree_Item"));
    Fl_Tree_Prefs *prefs = *((Fl_Tree_Prefs **)dub::checksdata(L, 2, "FLTK.Fl_Tree_Prefs"));
    lua_pushnumber(L, self->event_on_label(*prefs));
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "event_on_label: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "event_on_label: Unknown exception");
  }
  return dub::error(L);
}

/** int Fl_Tree_Item::is_root() const
 * inc/Fl_Tree_Item.h:447
 */
static int Fl_Tree_Item_is_root(lua_State *L) {
  try {
    Fl_Tree_Item *self = *((Fl_Tree_Item **)dub::checksdata(L, 1, "FLTK.Fl_Tree_Item"));
    lua_pushnumber(L, self->is_root());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "is_root: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "is_root: Unknown exception");
  }
  return dub::error(L);
}



// --=============================================== __tostring
static int Fl_Tree_Item___tostring(lua_State *L) {
  Fl_Tree_Item *self = *((Fl_Tree_Item **)dub::checksdata_n(L, 1, "FLTK.Fl_Tree_Item"));
  lua_pushfstring(L, "FLTK.Fl_Tree_Item: %p", self);
  
  return 1;
}

// --=============================================== METHODS

static const struct luaL_Reg Fl_Tree_Item_member_methods[] = {
  { "new"          , Fl_Tree_Item_Fl_Tree_Item },
  { "__gc"         , Fl_Tree_Item__Fl_Tree_Item },
  { "x"            , Fl_Tree_Item_x       },
  { "y"            , Fl_Tree_Item_y       },
  { "w"            , Fl_Tree_Item_w       },
  { "h"            , Fl_Tree_Item_h       },
#if (FL_MAJOR_VERSION>=1 && FL_MINOR_VERSION>=3 && FL_PATCH_VERSION>=3)
  { "label_x"      , Fl_Tree_Item_label_x },
#endif
#if (FL_MAJOR_VERSION>=1 && FL_MINOR_VERSION>=3 && FL_PATCH_VERSION>=3)
  { "label_y"      , Fl_Tree_Item_label_y },
#endif
#if (FL_MAJOR_VERSION>=1 && FL_MINOR_VERSION>=3 && FL_PATCH_VERSION>=3)
  { "label_w"      , Fl_Tree_Item_label_w },
#endif
#if (FL_MAJOR_VERSION>=1 && FL_MINOR_VERSION>=3 && FL_PATCH_VERSION>=3)
  { "label_h"      , Fl_Tree_Item_label_h },
#endif
  { "draw"         , Fl_Tree_Item_draw    },
  { "show_self"    , Fl_Tree_Item_show_self },
  { "label"        , Fl_Tree_Item_label   },
  { "user_data"    , Fl_Tree_Item_user_data },
  { "labelfont"    , Fl_Tree_Item_labelfont },
  { "labelsize"    , Fl_Tree_Item_labelsize },
  { "labelfgcolor" , Fl_Tree_Item_labelfgcolor },
  { "labelcolor"   , Fl_Tree_Item_labelcolor },
  { "labelbgcolor" , Fl_Tree_Item_labelbgcolor },
  { "widget"       , Fl_Tree_Item_widget  },
  { "children"     , Fl_Tree_Item_children },
  { "child"        , Fl_Tree_Item_child   },
  { "has_children" , Fl_Tree_Item_has_children },
  { "find_child"   , Fl_Tree_Item_find_child },
  { "remove_child" , Fl_Tree_Item_remove_child },
  { "clear_children", Fl_Tree_Item_clear_children },
  { "swap_children", Fl_Tree_Item_swap_children },
#if (FL_MAJOR_VERSION>=1 && FL_MINOR_VERSION>=3 && FL_PATCH_VERSION>=3)
  { "find_child_item", Fl_Tree_Item_find_child_item },
  { "find_item"    , Fl_Tree_Item_find_item },
  { "add"          , Fl_Tree_Item_add     },
#endif
  { "insert"       , Fl_Tree_Item_insert  },
  { "insert_above" , Fl_Tree_Item_insert_above },
#if (FL_MAJOR_VERSION>=1 && FL_MINOR_VERSION>=3 && FL_PATCH_VERSION>=3)
  { "deparent"     , Fl_Tree_Item_deparent },
#endif
#if (FL_MAJOR_VERSION>=1 && FL_MINOR_VERSION>=3 && FL_PATCH_VERSION>=3)
  { "reparent"     , Fl_Tree_Item_reparent },
#endif
#if (FL_MAJOR_VERSION>=1 && FL_MINOR_VERSION>=3 && FL_PATCH_VERSION>=3)
  { "move"         , Fl_Tree_Item_move    },
#endif
#if (FL_MAJOR_VERSION>=1 && FL_MINOR_VERSION>=3 && FL_PATCH_VERSION>=3)
  { "move_above"   , Fl_Tree_Item_move_above },
#endif
#if (FL_MAJOR_VERSION>=1 && FL_MINOR_VERSION>=3 && FL_PATCH_VERSION>=3)
  { "move_below"   , Fl_Tree_Item_move_below },
#endif
#if (FL_MAJOR_VERSION>=1 && FL_MINOR_VERSION>=3 && FL_PATCH_VERSION>=3)
  { "move_into"    , Fl_Tree_Item_move_into },
#endif
  { "depth"        , Fl_Tree_Item_depth   },
  { "prev"         , Fl_Tree_Item_prev    },
  { "next"         , Fl_Tree_Item_next    },
  { "next_sibling" , Fl_Tree_Item_next_sibling },
  { "prev_sibling" , Fl_Tree_Item_prev_sibling },
  { "update_prev_next", Fl_Tree_Item_update_prev_next },
  { "next_displayed", Fl_Tree_Item_next_displayed },
  { "prev_displayed", Fl_Tree_Item_prev_displayed },
#if (FL_MAJOR_VERSION>=1 && FL_MINOR_VERSION>=3 && FL_PATCH_VERSION>=3)
  { "next_visible" , Fl_Tree_Item_next_visible },
#endif
#if (FL_MAJOR_VERSION>=1 && FL_MINOR_VERSION>=3 && FL_PATCH_VERSION>=3)
  { "prev_visible" , Fl_Tree_Item_prev_visible },
#endif
  { "parent"       , Fl_Tree_Item_parent  },
  { "open"         , Fl_Tree_Item_open    },
  { "close"        , Fl_Tree_Item_close   },
  { "is_open"      , Fl_Tree_Item_is_open },
  { "is_close"     , Fl_Tree_Item_is_close },
  { "open_toggle"  , Fl_Tree_Item_open_toggle },
  { "select"       , Fl_Tree_Item_select  },
  { "select_toggle", Fl_Tree_Item_select_toggle },
  { "select_all"   , Fl_Tree_Item_select_all },
  { "deselect"     , Fl_Tree_Item_deselect },
  { "deselect_all" , Fl_Tree_Item_deselect_all },
  { "is_selected"  , Fl_Tree_Item_is_selected },
  { "activate"     , Fl_Tree_Item_activate },
  { "deactivate"   , Fl_Tree_Item_deactivate },
  { "is_activated" , Fl_Tree_Item_is_activated },
  { "is_active"    , Fl_Tree_Item_is_active },
  { "visible"      , Fl_Tree_Item_visible },
  { "is_visible"   , Fl_Tree_Item_is_visible },
  { "visible_r"    , Fl_Tree_Item_visible_r },
  { "usericon"     , Fl_Tree_Item_usericon },
  { "find_clicked" , Fl_Tree_Item_find_clicked },
  { "event_on_collapse_icon", Fl_Tree_Item_event_on_collapse_icon },
  { "event_on_label", Fl_Tree_Item_event_on_label },
  { "is_root"      , Fl_Tree_Item_is_root },
  { "__tostring"   , Fl_Tree_Item___tostring },
  { "deleted"      , dub::isDeleted       },
  { NULL, NULL},
};


 int luaopen_FLTK_Fl_Tree_Item(lua_State *L)
{
  // Create the metatable which will contain all the member methods
  luaL_newmetatable(L, "FLTK.Fl_Tree_Item");
  // <mt>

  // register member methods
  dub::fregister(L, Fl_Tree_Item_member_methods);
  // setup meta-table
  dub::setup(L, "FLTK.Fl_Tree_Item");
  // <mt>
  return 1;
}
