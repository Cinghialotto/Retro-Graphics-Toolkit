/**
 *
 * MACHINE GENERATED FILE. DO NOT EDIT.
 *
 * Bindings for class levobjDat
 *
 * This file has been generated by dub 2.2.4.
 */
#include "dub/dub.h"
#include "classlevel.h"


/** Set attributes (key, value)
 *
 */
static int levobjDat__set_(lua_State *L) {

	levobjDat *self = *((levobjDat **)dub::checksdata_n(L, 1, "level.levobjDat"));
	const char *key = luaL_checkstring(L, 2);
	int key_h = dub::hash(key, 17);

	switch (key_h) {
		case 1: {
			if (DUB_ASSERT_KEY(key, "x")) break;

			self->x = luaL_checkinteger(L, 3);
			return 0;
		}

		case 2: {
			if (DUB_ASSERT_KEY(key, "y")) break;

			self->y = luaL_checkinteger(L, 3);
			return 0;
		}

		case 3: {
			if (DUB_ASSERT_KEY(key, "prjid")) break;

			self->prjid = luaL_checkinteger(L, 3);
			return 0;
		}

		case 14: {
			if (DUB_ASSERT_KEY(key, "metaid")) break;

			self->metaid = luaL_checkinteger(L, 3);
			return 0;
		}

		case 12: {
			if (DUB_ASSERT_KEY(key, "groupid")) break;

			self->groupid = luaL_checkinteger(L, 3);
			return 0;
		}

		case 4: {
			if (DUB_ASSERT_KEY(key, "dat")) break;

			self->dat = luaL_checkinteger(L, 3);
			return 0;
		}

		case 13: {
			if (DUB_ASSERT_KEY(key, "xormask")) break;

			self->xormask = luaL_checkinteger(L, 3);
			return 0;
		}

		case 0: {
			if (DUB_ASSERT_KEY(key, "extra")) break;

			self->extra = luaL_checkinteger(L, 3);
			return 0;
		}
	}

	if (lua_istable(L, 1))
		lua_rawset(L, 1);

	else
		luaL_error(L, KEY_EXCEPTION_MSG, key);

	return 0;
}

/** Get attributes (key)
 *
 */
static int levobjDat__get_(lua_State *L) {

	levobjDat *self = *((levobjDat **)dub::checksdata_n(L, 1, "level.levobjDat", true));
	const char *key = luaL_checkstring(L, 2);
	// <self> "key" <mt>
	// rawget(mt, key)
	lua_pushvalue(L, 2);
	// <self> "key" <mt> "key"
	lua_rawget(L, -2);

	if (!lua_isnil(L, -1)) {
		// Found method.
		return 1;
	} else {
		// Not in mt = attribute access.
		lua_pop(L, 2);
	}

	int key_h = dub::hash(key, 17);

	switch (key_h) {
		case 1: {
			if (DUB_ASSERT_KEY(key, "x")) break;

			lua_pushinteger(L, self->x);
			return 1;
		}

		case 2: {
			if (DUB_ASSERT_KEY(key, "y")) break;

			lua_pushinteger(L, self->y);
			return 1;
		}

		case 3: {
			if (DUB_ASSERT_KEY(key, "prjid")) break;

			lua_pushinteger(L, self->prjid);
			return 1;
		}

		case 14: {
			if (DUB_ASSERT_KEY(key, "metaid")) break;

			lua_pushinteger(L, self->metaid);
			return 1;
		}

		case 12: {
			if (DUB_ASSERT_KEY(key, "groupid")) break;

			lua_pushinteger(L, self->groupid);
			return 1;
		}

		case 4: {
			if (DUB_ASSERT_KEY(key, "dat")) break;

			lua_pushinteger(L, self->dat);
			return 1;
		}

		case 13: {
			if (DUB_ASSERT_KEY(key, "xormask")) break;

			lua_pushinteger(L, self->xormask);
			return 1;
		}

		case 0: {
			if (DUB_ASSERT_KEY(key, "extra")) break;

			lua_pushinteger(L, self->extra);
			return 1;
		}
	}

	return 0;
}

/** levobjDat()
 *
 */
static int levobjDat_levobjDat(lua_State *L, struct levobjDat*d) {
	dub::pushudata(L, d, "level.levobjDat", false);
	return 1;
}



// --=============================================== __tostring
static int levobjDat___tostring(lua_State *L) {
	levobjDat *self = *((levobjDat **)dub::checksdata_n(L, 1, "level.levobjDat"));
	lua_pushfstring(L, "level.levobjDat: %p", self);

	return 1;
}

// --=============================================== METHODS

static const struct luaL_Reg levobjDat_member_methods[] = {
	{ "__newindex", levobjDat__set_      },
	{ "__index", levobjDat__get_      },
	{ "__tostring", levobjDat___tostring },
	{ NULL, NULL},
};


int luaopen_level_levobjDat(lua_State *L, struct levobjDat*d)
{
	// Create the metatable which will contain all the member methods
	luaL_newmetatable(L, "level.levobjDat");
	// <mt>

	// register member methods
	dub::fregister(L, levobjDat_member_methods);
	// setup meta-table
	dub::setup(L, "level.levobjDat");
	// <mt>
	return levobjDat_levobjDat(L, d);
}
