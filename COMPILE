===============================================================================
				  Dependencies
===============================================================================

FLTK (1.3.x or later if compatible)
Boost
Lua 5.3 or greater.

===============================================================================
				  Instructions
===============================================================================

If you are a Windows user and want to compile Retro Graphics Toolkit you will
need Mingw or Mingw-w64.


===============================================================================
			       WINDOWS ONLY BEGIN
===============================================================================

This step is only for Windows users. On other operating system, the
distribution should already have provided FLTK.

You will now need to build FLTK to do this download fltk-1.3.4-2 (or later if
compatible) and extract it into the Retro Graphics Toolkit project folder and
build it using either ./configure if you are on Windows or if you are cross
compiling you need to do something like this:

RANLIB=~/mingw/bin/i686-w64-mingw32-gcc-ranlib NM=~/mingw/bin/i686-w64-mingw32-gcc-nm AR=~/mingw/bin/i686-w64-mingw32-gcc-ar CFLAGS="-Os -s -flto=16 -fuse-linker-plugin -m32" CXXFLAGS=$CFLAGS LDFLAGS=$CFLAGS ./configure --host=i686-w64-mingw32 --build=x86_64-unknown-linux-gnu ; make -j16

Regardless of how ./configure is ran you will just need to run make and you are
done building FLTK.

You will also need to put Boost in directory you cloned this repository in.
After extracting the archive rename boost_version_number to boost. Boost is
needed for mdcomp.

Optional step to reduce binary size: Run these two commands in the lib
directory where GCC was compiled. Do likewise in the folder called
x86_64-w64-mingw32 (may be different depending on how you compiled your mingw
toolchain)

find \( -name '*.o' -o -name '*.a' \) -exec i686-w64-mingw32-objcopy -R '.rdata$zzz' {} \;

The purpose of that command is to remove all the GCC version strings. If you
don't run this command you will have hundreds of duplicate GCC version strings
in the final binary.

In the Retro Graphics Toolkit directory create a folder called luawin. This
folder shall contain the latest version of Lua. The folder shall not contain a
folder called something to the effect of luawin/lua-version-number.

Extract the latest version of Lua in the newly created folder.

Now edit the makefile in src. Edit the line that starts with CC=gcc and remove
anything that follows it.

On the line that starts with CFLAGS= remove -DLUA_COMPAT_5_2

If you are using a cross compiler make sure to take into account it's prefix
also you will need to modify the AR and RANLIB variables if such is the case.
For example on windows ar, randlib and gcc will need to be prefixed with
x86_64-w64-mingw32-gcc. You may also need to add extra CFLAGS such as -m32 if
you are doing a 32-bit build with a 32/64 bit multilib compiler.

Also if you are building on Windows you must replace this line in the Makefile
	"AR=$(CC) -shared -o" "RANLIB=strip --strip-unneeded" \
with
	"AR=$(CC) -shared -static-libgcc -o" "RANLIB=strip --strip-all" \

Now run make mingw

DO NOT RUN MAKE INSTALL.

===============================================================================
			  END OF WINDOWS ONLY SECTION
===============================================================================

Now on Linux run make or on Windows run make -f make.win note that you may need
to modify the CXX and CC variables in make.win.

You should now have a compiled version of Retro Graphics Toolkit.

