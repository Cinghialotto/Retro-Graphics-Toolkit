/**
 *
 * MACHINE GENERATED FILE. DO NOT EDIT.
 *
 * Bindings for class Fl_Lua_Light_Button
 *
 * This file has been generated by dub 2.2.4.
 */
#include <stdlib.h>
#include "dub/dub.h"
#include <FL/Fl_Light_Button.H>
#include "cbHelper.h"
class Fl_Lua_Light_Button: public Fl_Light_Button {
	using Fl_Light_Button::Fl_Light_Button;
public:
	struct cbInfo ci;
};


/** ~Fl_Lua_Light_Button()
 *
 */
static int Fl_Lua_Light_Button__Fl_Lua_Light_Button(lua_State *L) {
	try {
		DubUserdata *userdata = ((DubUserdata*)dub::checksdata_d(L, 1, "FLTK.Fl_Lua_Light_Button"));

		if (userdata->gc) {
			Fl_Lua_Light_Button *self = (Fl_Lua_Light_Button *)userdata->ptr;

			if (self->ci.cb) free(self->ci.cb);

			delete self;
		}

		userdata->gc = false;
		return 0;
	} catch (std::exception &e) {
		lua_pushfstring(L, "__gc: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "__gc: Unknown exception");
	}

	return dub::error(L);
}

/** Cast (class_name)
 *
 */
static int Fl_Lua_Light_Button__cast_(lua_State *L) {

	Fl_Lua_Light_Button *self = *((Fl_Lua_Light_Button **)dub::checksdata_n(L, 1, "FLTK.Fl_Lua_Light_Button"));
	const char *key = luaL_checkstring(L, 2);
	void **retval__ = (void**)lua_newuserdata(L, sizeof(void*));
	int key_h = dub::hash(key, 4);

	switch (key_h) {
		case 2: {
			if (DUB_ASSERT_KEY(key, "FLTK.Fl_Button")) break;

			*retval__ = static_cast<Fl_Button *>(self);
			return 1;
		}

		case 0: {
			if (DUB_ASSERT_KEY(key, "FLTK.Fl_Widget")) break;

			*retval__ = static_cast<Fl_Widget *>(self);
			return 1;
		}
	}

	return 0;
}

/** virtual int Fl_Lua_Light_Button::handle(int)
 * inc/Fl_Lua_Light_Button.h:42
 */
static int Fl_Lua_Light_Button_handle(lua_State *L) {
	try {
		Fl_Lua_Light_Button *self = *((Fl_Lua_Light_Button **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Light_Button"));
		int event = dub::checkinteger(L, 2);
		lua_pushnumber(L, self->handle(event));
		return 1;
	} catch (std::exception &e) {
		lua_pushfstring(L, "handle: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "handle: Unknown exception");
	}

	return dub::error(L);
}

/** Fl_Lua_Light_Button::Fl_Lua_Light_Button(int x, int y, int w, int h, const char *l=0)
 * inc/Fl_Lua_Light_Button.h:43
 */
static int Fl_Lua_Light_Button_Fl_Lua_Light_Button(lua_State *L) {
	try {
		int top__ = lua_gettop(L);

		if (top__ >= 5) {
			int x = dub::checkinteger(L, 1);
			int y = dub::checkinteger(L, 2);
			int w = dub::checkinteger(L, 3);
			int h = dub::checkinteger(L, 4);
			const char *l = dub::checkstring(L, 5);
			Fl_Lua_Light_Button *retval__ = new Fl_Lua_Light_Button(x, y, w, h, l);
			retval__->ci.L = L;
			retval__->ci.cb = 0;
			dub::pushudata(L, retval__, "FLTK.Fl_Lua_Light_Button", true);
			return 1;
		} else {
			int x = dub::checkinteger(L, 1);
			int y = dub::checkinteger(L, 2);
			int w = dub::checkinteger(L, 3);
			int h = dub::checkinteger(L, 4);
			Fl_Lua_Light_Button *retval__ = new Fl_Lua_Light_Button(x, y, w, h);
			retval__->ci.L = L;
			retval__->ci.cb = 0;
			dub::pushudata(L, retval__, "FLTK.Fl_Lua_Light_Button", true);
			return 1;
		}
	} catch (std::exception &e) {
		lua_pushfstring(L, "new: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "new: Unknown exception");
	}

	return dub::error(L);
}

/** int Fl_Button::value(int v)
 * inc/Fl_Button.h:100
 */
static int Fl_Lua_Light_Button_value(lua_State *L) {
	try {
		Fl_Lua_Light_Button *self = *((Fl_Lua_Light_Button **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Light_Button"));
		int top__ = lua_gettop(L);

		if (top__ >= 2) {
			int v = dub::checkinteger(L, 2);
			lua_pushnumber(L, self->value(v));
			return 1;
		} else {
			lua_pushnumber(L, self->value());
			return 1;
		}
	} catch (std::exception &e) {
		lua_pushfstring(L, "value: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "value: Unknown exception");
	}

	return dub::error(L);
}

/** int Fl_Button::set()
 * inc/Fl_Button.h:111
 */
static int Fl_Lua_Light_Button_set(lua_State *L) {
	try {
		Fl_Lua_Light_Button *self = *((Fl_Lua_Light_Button **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Light_Button"));
		lua_pushnumber(L, self->set());
		return 1;
	} catch (std::exception &e) {
		lua_pushfstring(L, "set: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "set: Unknown exception");
	}

	return dub::error(L);
}

/** int Fl_Button::clear()
 * inc/Fl_Button.h:117
 */
static int Fl_Lua_Light_Button_clear(lua_State *L) {
	try {
		Fl_Lua_Light_Button *self = *((Fl_Lua_Light_Button **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Light_Button"));
		lua_pushnumber(L, self->clear());
		return 1;
	} catch (std::exception &e) {
		lua_pushfstring(L, "clear: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "clear: Unknown exception");
	}

	return dub::error(L);
}

/** void Fl_Button::setonly()
 * inc/Fl_Button.h:119
 */
static int Fl_Lua_Light_Button_setonly(lua_State *L) {
	try {
		Fl_Lua_Light_Button *self = *((Fl_Lua_Light_Button **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Light_Button"));
		self->setonly();
		return 0;
	} catch (std::exception &e) {
		lua_pushfstring(L, "setonly: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "setonly: Unknown exception");
	}

	return dub::error(L);
}

/** int Fl_Button::shortcut() const
 * inc/Fl_Button.h:125
 */
static int Fl_Lua_Light_Button_shortcut(lua_State *L) {
	try {
		Fl_Lua_Light_Button *self = *((Fl_Lua_Light_Button **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Light_Button"));
		int top__ = lua_gettop(L);

		if (top__ >= 2) {
			int type__ = lua_type(L, 2);

			if (type__ == LUA_TSTRING) {
				const char *s = dub::checkstring(L, 2);
				self->shortcut(s);
				return 0;
			} else {
				int s = dub::checkinteger(L, 2);
				self->shortcut(s);
				return 0;
			}
		} else {
			lua_pushnumber(L, self->shortcut());
			return 1;
		}
	} catch (std::exception &e) {
		lua_pushfstring(L, "shortcut: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "shortcut: Unknown exception");
	}

	return dub::error(L);
}

/** int Fl_Button::down_box() const
 * inc/Fl_Button.h:152
 */
static int Fl_Lua_Light_Button_down_box(lua_State *L) {
	try {
		Fl_Lua_Light_Button *self = *((Fl_Lua_Light_Button **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Light_Button"));
		int top__ = lua_gettop(L);

		if (top__ >= 2) {
			int b = dub::checkinteger(L, 2);
			self->down_box((Fl_Boxtype)b);
			return 0;
		} else {
			lua_pushnumber(L, self->down_box());
			return 1;
		}
	} catch (std::exception &e) {
		lua_pushfstring(L, "down_box: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "down_box: Unknown exception");
	}

	return dub::error(L);
}

/** int Fl_Button::down_color() const
 * inc/Fl_Button.h:169
 */
static int Fl_Lua_Light_Button_down_color(lua_State *L) {
	try {
		Fl_Lua_Light_Button *self = *((Fl_Lua_Light_Button **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Light_Button"));
		int top__ = lua_gettop(L);

		if (top__ >= 2) {
			unsigned c = dub::checkinteger(L, 2);
			self->down_color(c);
			return 0;
		} else {
			lua_pushnumber(L, self->down_color());
			return 1;
		}
	} catch (std::exception &e) {
		lua_pushfstring(L, "down_color: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "down_color: Unknown exception");
	}

	return dub::error(L);
}

/** Fl_Group* Fl_Widget::parent() const
 * inc/Fl_Widget.h:243
 */
static int Fl_Lua_Light_Button_parent(lua_State *L) {
	try {
		Fl_Lua_Light_Button *self = *((Fl_Lua_Light_Button **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Light_Button"));
		int top__ = lua_gettop(L);

		if (top__ >= 2) {
			Fl_Group *p = *((Fl_Group **)dub::checksdata(L, 2, "FLTK.Fl_Group"));
			self->parent(p);
			return 0;
		} else {
			Fl_Group *retval__ = self->parent();

			if (!retval__) return 0;

			dub::pushudata(L, retval__, "FLTK.Fl_Group", false);
			return 1;
		}
	} catch (std::exception &e) {
		lua_pushfstring(L, "parent: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "parent: Unknown exception");
	}

	return dub::error(L);
}

/** unsigned char Fl_Widget::type() const
 * inc/Fl_Widget.h:263
 */
static int Fl_Lua_Light_Button_type(lua_State *L) {
	try {
		Fl_Lua_Light_Button *self = *((Fl_Lua_Light_Button **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Light_Button"));
		int top__ = lua_gettop(L);

		if (top__ >= 2) {
			unsigned char t = dub::checkinteger(L, 2);
			self->type(t);
			return 0;
		} else {
			lua_pushnumber(L, self->type());
			return 1;
		}
	} catch (std::exception &e) {
		lua_pushfstring(L, "type: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "type: Unknown exception");
	}

	return dub::error(L);
}

/** int Fl_Widget::x() const
 * inc/Fl_Widget.h:273
 */
static int Fl_Lua_Light_Button_x(lua_State *L) {
	try {
		Fl_Lua_Light_Button *self = *((Fl_Lua_Light_Button **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Light_Button"));
		lua_pushnumber(L, self->x());
		return 1;
	} catch (std::exception &e) {
		lua_pushfstring(L, "x: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "x: Unknown exception");
	}

	return dub::error(L);
}

/** int Fl_Widget::y() const
 * inc/Fl_Widget.h:278
 */
static int Fl_Lua_Light_Button_y(lua_State *L) {
	try {
		Fl_Lua_Light_Button *self = *((Fl_Lua_Light_Button **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Light_Button"));
		lua_pushnumber(L, self->y());
		return 1;
	} catch (std::exception &e) {
		lua_pushfstring(L, "y: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "y: Unknown exception");
	}

	return dub::error(L);
}

/** int Fl_Widget::w() const
 * inc/Fl_Widget.h:283
 */
static int Fl_Lua_Light_Button_w(lua_State *L) {
	try {
		Fl_Lua_Light_Button *self = *((Fl_Lua_Light_Button **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Light_Button"));
		lua_pushnumber(L, self->w());
		return 1;
	} catch (std::exception &e) {
		lua_pushfstring(L, "w: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "w: Unknown exception");
	}

	return dub::error(L);
}

/** int Fl_Widget::h() const
 * inc/Fl_Widget.h:288
 */
static int Fl_Lua_Light_Button_h(lua_State *L) {
	try {
		Fl_Lua_Light_Button *self = *((Fl_Lua_Light_Button **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Light_Button"));
		lua_pushnumber(L, self->h());
		return 1;
	} catch (std::exception &e) {
		lua_pushfstring(L, "h: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "h: Unknown exception");
	}

	return dub::error(L);
}

/** virtual void Fl_Widget::resize(int x, int y, int w, int h)
 * inc/Fl_Widget.h:309
 */
static int Fl_Lua_Light_Button_resize(lua_State *L) {
	try {
		Fl_Lua_Light_Button *self = *((Fl_Lua_Light_Button **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Light_Button"));
		int x = dub::checkinteger(L, 2);
		int y = dub::checkinteger(L, 3);
		int w = dub::checkinteger(L, 4);
		int h = dub::checkinteger(L, 5);
		self->resize(x, y, w, h);
		return 0;
	} catch (std::exception &e) {
		lua_pushfstring(L, "resize: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "resize: Unknown exception");
	}

	return dub::error(L);
}

/** int Fl_Widget::damage_resize(int, int, int, int)
 * inc/Fl_Widget.h:312
 */
static int Fl_Lua_Light_Button_damage_resize(lua_State *L) {
	try {
		Fl_Lua_Light_Button *self = *((Fl_Lua_Light_Button **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Light_Button"));
		int p1 = dub::checkinteger(L, 2);
		int p2 = dub::checkinteger(L, 3);
		int p3 = dub::checkinteger(L, 4);
		int p4 = dub::checkinteger(L, 5);
		lua_pushnumber(L, self->damage_resize(p1, p2, p3, p4));
		return 1;
	} catch (std::exception &e) {
		lua_pushfstring(L, "damage_resize: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "damage_resize: Unknown exception");
	}

	return dub::error(L);
}

/** void Fl_Widget::position(int X, int Y)
 * inc/Fl_Widget.h:321
 */
static int Fl_Lua_Light_Button_position(lua_State *L) {
	try {
		Fl_Lua_Light_Button *self = *((Fl_Lua_Light_Button **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Light_Button"));
		int X = dub::checkinteger(L, 2);
		int Y = dub::checkinteger(L, 3);
		self->position(X, Y);
		return 0;
	} catch (std::exception &e) {
		lua_pushfstring(L, "position: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "position: Unknown exception");
	}

	return dub::error(L);
}

/** void Fl_Widget::size(int W, int H)
 * inc/Fl_Widget.h:330
 */
static int Fl_Lua_Light_Button_size(lua_State *L) {
	try {
		Fl_Lua_Light_Button *self = *((Fl_Lua_Light_Button **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Light_Button"));
		int W = dub::checkinteger(L, 2);
		int H = dub::checkinteger(L, 3);
		self->size(W, H);
		return 0;
	} catch (std::exception &e) {
		lua_pushfstring(L, "size: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "size: Unknown exception");
	}

	return dub::error(L);
}

/** int Fl_Widget::align() const
 * inc/Fl_Widget.h:337
 */
static int Fl_Lua_Light_Button_align(lua_State *L) {
	try {
		Fl_Lua_Light_Button *self = *((Fl_Lua_Light_Button **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Light_Button"));
		int top__ = lua_gettop(L);

		if (top__ >= 2) {
			int alignment = dub::checkinteger(L, 2);
			self->align(alignment);
			return 0;
		} else {
			lua_pushnumber(L, self->align());
			return 1;
		}
	} catch (std::exception &e) {
		lua_pushfstring(L, "align: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "align: Unknown exception");
	}

	return dub::error(L);
}

/** int Fl_Widget::box() const
 * inc/Fl_Widget.h:352
 */
static int Fl_Lua_Light_Button_box(lua_State *L) {
	try {
		Fl_Lua_Light_Button *self = *((Fl_Lua_Light_Button **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Light_Button"));
		int top__ = lua_gettop(L);

		if (top__ >= 2) {
			int new_box = dub::checkinteger(L, 2);
			self->box((Fl_Boxtype)new_box);
			return 0;
		} else {
			lua_pushnumber(L, self->box());
			return 1;
		}
	} catch (std::exception &e) {
		lua_pushfstring(L, "box: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "box: Unknown exception");
	}

	return dub::error(L);
}

/** int Fl_Widget::color() const
 * inc/Fl_Widget.h:367
 */
static int Fl_Lua_Light_Button_color(lua_State *L) {
	try {
		Fl_Lua_Light_Button *self = *((Fl_Lua_Light_Button **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Light_Button"));
		int top__ = lua_gettop(L);

		if (top__ >= 3) {
			int bg = dub::checkinteger(L, 2);
			int sel = dub::checkinteger(L, 3);
			self->color(bg, sel);
			return 0;
		} else if (top__ >= 2) {
			int bg = dub::checkinteger(L, 2);
			self->color(bg);
			return 0;
		} else {
			lua_pushnumber(L, self->color());
			return 1;
		}
	} catch (std::exception &e) {
		lua_pushfstring(L, "color: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "color: Unknown exception");
	}

	return dub::error(L);
}

/** int Fl_Widget::selection_color() const
 * inc/Fl_Widget.h:385
 */
static int Fl_Lua_Light_Button_selection_color(lua_State *L) {
	try {
		Fl_Lua_Light_Button *self = *((Fl_Lua_Light_Button **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Light_Button"));
		int top__ = lua_gettop(L);

		if (top__ >= 2) {
			int a = dub::checkinteger(L, 2);
			self->selection_color(a);
			return 0;
		} else {
			lua_pushnumber(L, self->selection_color());
			return 1;
		}
	} catch (std::exception &e) {
		lua_pushfstring(L, "selection_color: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "selection_color: Unknown exception");
	}

	return dub::error(L);
}

/** const char* Fl_Widget::label() const
 * inc/Fl_Widget.h:410
 */
static int Fl_Lua_Light_Button_label(lua_State *L) {
	try {
		Fl_Lua_Light_Button *self = *((Fl_Lua_Light_Button **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Light_Button"));
		int top__ = lua_gettop(L);

		if (top__ >= 3) {
			Fl_Labeltype a = (Fl_Labeltype)dub::checkinteger(L, 2);
			const char *b = dub::checkstring(L, 3);
			self->label(a, b);
			return 0;
		} else if (top__ >= 2) {
			const char *text = dub::checkstring(L, 2);
			self->label(text);
			return 0;
		} else {
			lua_pushstring(L, self->label());
			return 1;
		}
	} catch (std::exception &e) {
		lua_pushfstring(L, "label: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "label: Unknown exception");
	}

	return dub::error(L);
}

/** void Fl_Widget::copy_label(const char *new_label)
 * inc/Fl_Widget.h:434
 */
static int Fl_Lua_Light_Button_copy_label(lua_State *L) {
	try {
		Fl_Lua_Light_Button *self = *((Fl_Lua_Light_Button **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Light_Button"));
		const char *new_label = dub::checkstring(L, 2);
		self->copy_label(new_label);
		return 0;
	} catch (std::exception &e) {
		lua_pushfstring(L, "copy_label: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "copy_label: Unknown exception");
	}

	return dub::error(L);
}

/** Fl_Labeltype Fl_Widget::labeltype() const
 * inc/Fl_Widget.h:445
 */
static int Fl_Lua_Light_Button_labeltype(lua_State *L) {
	try {
		Fl_Lua_Light_Button *self = *((Fl_Lua_Light_Button **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Light_Button"));
		int top__ = lua_gettop(L);

		if (top__ >= 2) {
			Fl_Labeltype a = (Fl_Labeltype)dub::checkinteger(L, 2);
			self->labeltype(a);
			return 0;
		} else {
			lua_pushnumber(L, self->labeltype());
			return 1;
		}
	} catch (std::exception &e) {
		lua_pushfstring(L, "labeltype: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "labeltype: Unknown exception");
	}

	return dub::error(L);
}

/** int Fl_Widget::labelcolor() const
 * inc/Fl_Widget.h:461
 */
static int Fl_Lua_Light_Button_labelcolor(lua_State *L) {
	try {
		Fl_Lua_Light_Button *self = *((Fl_Lua_Light_Button **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Light_Button"));
		int top__ = lua_gettop(L);

		if (top__ >= 2) {
			int c = dub::checkinteger(L, 2);
			self->labelcolor(c);
			return 0;
		} else {
			lua_pushnumber(L, self->labelcolor());
			return 1;
		}
	} catch (std::exception &e) {
		lua_pushfstring(L, "labelcolor: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "labelcolor: Unknown exception");
	}

	return dub::error(L);
}

/** int Fl_Widget::labelfont() const
 * inc/Fl_Widget.h:476
 */
static int Fl_Lua_Light_Button_labelfont(lua_State *L) {
	try {
		Fl_Lua_Light_Button *self = *((Fl_Lua_Light_Button **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Light_Button"));
		int top__ = lua_gettop(L);

		if (top__ >= 2) {
			int f = dub::checkinteger(L, 2);
			self->labelfont(f);
			return 0;
		} else {
			lua_pushnumber(L, self->labelfont());
			return 1;
		}
	} catch (std::exception &e) {
		lua_pushfstring(L, "labelfont: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "labelfont: Unknown exception");
	}

	return dub::error(L);
}

/** int Fl_Widget::labelsize() const
 * inc/Fl_Widget.h:491
 */
static int Fl_Lua_Light_Button_labelsize(lua_State *L) {
	try {
		Fl_Lua_Light_Button *self = *((Fl_Lua_Light_Button **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Light_Button"));
		int top__ = lua_gettop(L);

		if (top__ >= 2) {
			int pix = dub::checkinteger(L, 2);
			self->labelsize(pix);
			return 0;
		} else {
			lua_pushnumber(L, self->labelsize());
			return 1;
		}
	} catch (std::exception &e) {
		lua_pushfstring(L, "labelsize: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "labelsize: Unknown exception");
	}

	return dub::error(L);
}

/** Fl_Image* Fl_Widget::image()
 * inc/Fl_Widget.h:503
 */
static int Fl_Lua_Light_Button_image(lua_State *L) {
	try {
		Fl_Lua_Light_Button *self = *((Fl_Lua_Light_Button **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Light_Button"));
		int top__ = lua_gettop(L);

		if (top__ >= 2) {
			Fl_Image *img = *((Fl_Image **)dub::checksdata(L, 2, "FLTK.Fl_Image"));
			self->image(img);
			return 0;
		} else {
			Fl_Image *retval__ = self->image();

			if (!retval__) return 0;

			dub::pushudata(L, retval__, "FLTK.Fl_Image", false);
			return 1;
		}
	} catch (std::exception &e) {
		lua_pushfstring(L, "image: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "image: Unknown exception");
	}

	return dub::error(L);
}

/** Fl_Image* Fl_Widget::deimage()
 * inc/Fl_Widget.h:522
 */
static int Fl_Lua_Light_Button_deimage(lua_State *L) {
	try {
		Fl_Lua_Light_Button *self = *((Fl_Lua_Light_Button **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Light_Button"));
		int top__ = lua_gettop(L);

		if (top__ >= 2) {
			Fl_Image *img = *((Fl_Image **)dub::checksdata(L, 2, "FLTK.Fl_Image"));
			self->deimage(img);
			return 0;
		} else {
			Fl_Image *retval__ = self->deimage();

			if (!retval__) return 0;

			dub::pushudata(L, retval__, "FLTK.Fl_Image", false);
			return 1;
		}
	} catch (std::exception &e) {
		lua_pushfstring(L, "deimage: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "deimage: Unknown exception");
	}

	return dub::error(L);
}

/** const char* Fl_Widget::tooltip() const
 * inc/Fl_Widget.h:541
 */
static int Fl_Lua_Light_Button_tooltip(lua_State *L) {
	try {
		Fl_Lua_Light_Button *self = *((Fl_Lua_Light_Button **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Light_Button"));
		int top__ = lua_gettop(L);

		if (top__ >= 2) {
			const char *text = dub::checkstring(L, 2);
			self->tooltip(text);
			return 0;
		} else {
			lua_pushstring(L, self->tooltip());
			return 1;
		}
	} catch (std::exception &e) {
		lua_pushfstring(L, "tooltip: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "tooltip: Unknown exception");
	}

	return dub::error(L);
}

/** void Fl_Widget::copy_tooltip(const char *text)
 * inc/Fl_Widget.h:544
 */
static int Fl_Lua_Light_Button_copy_tooltip(lua_State *L) {
	try {
		Fl_Lua_Light_Button *self = *((Fl_Lua_Light_Button **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Light_Button"));
		const char *text = dub::checkstring(L, 2);
		self->copy_tooltip(text);
		return 0;
	} catch (std::exception &e) {
		lua_pushfstring(L, "copy_tooltip: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "copy_tooltip: Unknown exception");
	}

	return dub::error(L);
}

/** Fl_Callback_p Fl_Widget::callback() const
 * inc/Fl_Widget.h:550
 */
static int Fl_Lua_Light_Button_callback(lua_State *L) {
	try {
		Fl_Lua_Light_Button *self = *((Fl_Lua_Light_Button **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Light_Button"));
		int top__ = lua_gettop(L);

		if (top__ >= 3) {
			self->ci.cb = strdup(luaL_checkstring(L, 2));
			self->ci.udat = luaL_checkinteger(L, 3);
			self->callback(luaWidgetCallbackHelper, &self->ci);
			return 0;
		} else if (top__ >= 2) {
			self->ci.cb = strdup(luaL_checkstring(L, 2));
			self->ci.udat = 0;
			self->callback(luaWidgetCallbackHelper, &self->ci);
			return 0;
		} else {
			lua_pushstring(L, self->ci.cb);
			return 1;
		}
	} catch (std::exception &e) {
		lua_pushfstring(L, "callback: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "callback: Unknown exception");
	}

	return dub::error(L);
}

/** void* Fl_Widget::user_data() const
 * inc/Fl_Widget.h:582
 */
static int Fl_Lua_Light_Button_user_data(lua_State *L) {
	try {
		Fl_Lua_Light_Button *self = *((Fl_Lua_Light_Button **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Light_Button"));
		int top__ = lua_gettop(L);

		if (top__ >= 2) {
			void *v = *((void **)dub::checksdata(L, 2, "void"));
			self->user_data(v);
			return 0;
		} else {
			self->user_data();
			return 0;
		}
	} catch (std::exception &e) {
		lua_pushfstring(L, "user_data: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "user_data: Unknown exception");
	}

	return dub::error(L);
}

/** long Fl_Widget::argument() const
 * inc/Fl_Widget.h:592
 */
static int Fl_Lua_Light_Button_argument(lua_State *L) {
	try {
		Fl_Lua_Light_Button *self = *((Fl_Lua_Light_Button **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Light_Button"));
		int top__ = lua_gettop(L);

		if (top__ >= 2) {
			long *v = *((long **)dub::checksdata(L, 2, "long"));
			self->argument(*v);
			return 0;
		} else {
			dub::pushudata(L, new long(self->argument()), "long", true);
			return 1;
		}
	} catch (std::exception &e) {
		lua_pushfstring(L, "argument: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "argument: Unknown exception");
	}

	return dub::error(L);
}

/** Fl_When Fl_Widget::when() const
 * inc/Fl_Widget.h:608
 */
static int Fl_Lua_Light_Button_when(lua_State *L) {
	try {
		Fl_Lua_Light_Button *self = *((Fl_Lua_Light_Button **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Light_Button"));
		int top__ = lua_gettop(L);

		if (top__ >= 2) {
			unsigned char i = dub::checkinteger(L, 2);
			self->when(i);
			return 0;
		} else {
			dub::pushudata(L, new Fl_When(self->when()), "Fl_When", true);
			return 1;
		}
	} catch (std::exception &e) {
		lua_pushfstring(L, "when: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "when: Unknown exception");
	}

	return dub::error(L);
}

/** unsigned int Fl_Widget::visible() const
 * inc/Fl_Widget.h:647
 */
static int Fl_Lua_Light_Button_visible(lua_State *L) {
	try {
		Fl_Lua_Light_Button *self = *((Fl_Lua_Light_Button **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Light_Button"));
		lua_pushnumber(L, self->visible());
		return 1;
	} catch (std::exception &e) {
		lua_pushfstring(L, "visible: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "visible: Unknown exception");
	}

	return dub::error(L);
}

/** int Fl_Widget::visible_r() const
 * inc/Fl_Widget.h:653
 */
static int Fl_Lua_Light_Button_visible_r(lua_State *L) {
	try {
		Fl_Lua_Light_Button *self = *((Fl_Lua_Light_Button **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Light_Button"));
		lua_pushnumber(L, self->visible_r());
		return 1;
	} catch (std::exception &e) {
		lua_pushfstring(L, "visible_r: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "visible_r: Unknown exception");
	}

	return dub::error(L);
}

/** virtual void Fl_Widget::show()
 * inc/Fl_Widget.h:672
 */
static int Fl_Lua_Light_Button_show(lua_State *L) {
	try {
		Fl_Lua_Light_Button *self = *((Fl_Lua_Light_Button **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Light_Button"));
		self->show();
		return 0;
	} catch (std::exception &e) {
		lua_pushfstring(L, "show: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "show: Unknown exception");
	}

	return dub::error(L);
}

/** virtual void Fl_Widget::hide()
 * inc/Fl_Widget.h:677
 */
static int Fl_Lua_Light_Button_hide(lua_State *L) {
	try {
		Fl_Lua_Light_Button *self = *((Fl_Lua_Light_Button **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Light_Button"));
		self->hide();
		return 0;
	} catch (std::exception &e) {
		lua_pushfstring(L, "hide: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "hide: Unknown exception");
	}

	return dub::error(L);
}

/** void Fl_Widget::set_visible()
 * inc/Fl_Widget.h:683
 */
static int Fl_Lua_Light_Button_set_visible(lua_State *L) {
	try {
		Fl_Lua_Light_Button *self = *((Fl_Lua_Light_Button **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Light_Button"));
		self->set_visible();
		return 0;
	} catch (std::exception &e) {
		lua_pushfstring(L, "set_visible: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "set_visible: Unknown exception");
	}

	return dub::error(L);
}

/** void Fl_Widget::clear_visible()
 * inc/Fl_Widget.h:689
 */
static int Fl_Lua_Light_Button_clear_visible(lua_State *L) {
	try {
		Fl_Lua_Light_Button *self = *((Fl_Lua_Light_Button **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Light_Button"));
		self->clear_visible();
		return 0;
	} catch (std::exception &e) {
		lua_pushfstring(L, "clear_visible: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "clear_visible: Unknown exception");
	}

	return dub::error(L);
}

/** unsigned int Fl_Widget::active() const
 * inc/Fl_Widget.h:695
 */
static int Fl_Lua_Light_Button_active(lua_State *L) {
	try {
		Fl_Lua_Light_Button *self = *((Fl_Lua_Light_Button **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Light_Button"));
		lua_pushnumber(L, self->active());
		return 1;
	} catch (std::exception &e) {
		lua_pushfstring(L, "active: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "active: Unknown exception");
	}

	return dub::error(L);
}

/** int Fl_Widget::active_r() const
 * inc/Fl_Widget.h:701
 */
static int Fl_Lua_Light_Button_active_r(lua_State *L) {
	try {
		Fl_Lua_Light_Button *self = *((Fl_Lua_Light_Button **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Light_Button"));
		lua_pushnumber(L, self->active_r());
		return 1;
	} catch (std::exception &e) {
		lua_pushfstring(L, "active_r: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "active_r: Unknown exception");
	}

	return dub::error(L);
}

/** void Fl_Widget::activate()
 * inc/Fl_Widget.h:708
 */
static int Fl_Lua_Light_Button_activate(lua_State *L) {
	try {
		Fl_Lua_Light_Button *self = *((Fl_Lua_Light_Button **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Light_Button"));
		self->activate();
		return 0;
	} catch (std::exception &e) {
		lua_pushfstring(L, "activate: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "activate: Unknown exception");
	}

	return dub::error(L);
}

/** void Fl_Widget::deactivate()
 * inc/Fl_Widget.h:724
 */
static int Fl_Lua_Light_Button_deactivate(lua_State *L) {
	try {
		Fl_Lua_Light_Button *self = *((Fl_Lua_Light_Button **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Light_Button"));
		self->deactivate();
		return 0;
	} catch (std::exception &e) {
		lua_pushfstring(L, "deactivate: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "deactivate: Unknown exception");
	}

	return dub::error(L);
}

/** unsigned int Fl_Widget::output() const
 * inc/Fl_Widget.h:734
 */
static int Fl_Lua_Light_Button_output(lua_State *L) {
	try {
		Fl_Lua_Light_Button *self = *((Fl_Lua_Light_Button **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Light_Button"));
		lua_pushnumber(L, self->output());
		return 1;
	} catch (std::exception &e) {
		lua_pushfstring(L, "output: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "output: Unknown exception");
	}

	return dub::error(L);
}

/** void Fl_Widget::set_output()
 * inc/Fl_Widget.h:739
 */
static int Fl_Lua_Light_Button_set_output(lua_State *L) {
	try {
		Fl_Lua_Light_Button *self = *((Fl_Lua_Light_Button **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Light_Button"));
		self->set_output();
		return 0;
	} catch (std::exception &e) {
		lua_pushfstring(L, "set_output: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "set_output: Unknown exception");
	}

	return dub::error(L);
}

/** void Fl_Widget::clear_output()
 * inc/Fl_Widget.h:744
 */
static int Fl_Lua_Light_Button_clear_output(lua_State *L) {
	try {
		Fl_Lua_Light_Button *self = *((Fl_Lua_Light_Button **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Light_Button"));
		self->clear_output();
		return 0;
	} catch (std::exception &e) {
		lua_pushfstring(L, "clear_output: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "clear_output: Unknown exception");
	}

	return dub::error(L);
}

/** unsigned int Fl_Widget::takesevents() const
 * inc/Fl_Widget.h:751
 */
static int Fl_Lua_Light_Button_takesevents(lua_State *L) {
	try {
		Fl_Lua_Light_Button *self = *((Fl_Lua_Light_Button **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Light_Button"));
		lua_pushnumber(L, self->takesevents());
		return 1;
	} catch (std::exception &e) {
		lua_pushfstring(L, "takesevents: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "takesevents: Unknown exception");
	}

	return dub::error(L);
}

/** unsigned int Fl_Widget::changed() const
 * inc/Fl_Widget.h:768
 */
static int Fl_Lua_Light_Button_changed(lua_State *L) {
	try {
		Fl_Lua_Light_Button *self = *((Fl_Lua_Light_Button **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Light_Button"));
		lua_pushnumber(L, self->changed());
		return 1;
	} catch (std::exception &e) {
		lua_pushfstring(L, "changed: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "changed: Unknown exception");
	}

	return dub::error(L);
}

/** void Fl_Widget::set_changed()
 * inc/Fl_Widget.h:773
 */
static int Fl_Lua_Light_Button_set_changed(lua_State *L) {
	try {
		Fl_Lua_Light_Button *self = *((Fl_Lua_Light_Button **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Light_Button"));
		self->set_changed();
		return 0;
	} catch (std::exception &e) {
		lua_pushfstring(L, "set_changed: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "set_changed: Unknown exception");
	}

	return dub::error(L);
}

/** void Fl_Widget::clear_changed()
 * inc/Fl_Widget.h:778
 */
static int Fl_Lua_Light_Button_clear_changed(lua_State *L) {
	try {
		Fl_Lua_Light_Button *self = *((Fl_Lua_Light_Button **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Light_Button"));
		self->clear_changed();
		return 0;
	} catch (std::exception &e) {
		lua_pushfstring(L, "clear_changed: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "clear_changed: Unknown exception");
	}

	return dub::error(L);
}

/** void Fl_Widget::clear_active()
 * inc/Fl_Widget.h:784
 */
#if (FL_MAJOR_VERSION>=1 && FL_MINOR_VERSION>=3 && FL_PATCH_VERSION>=3)
static int Fl_Lua_Light_Button_clear_active(lua_State *L) {
	try {
		Fl_Lua_Light_Button *self = *((Fl_Lua_Light_Button **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Light_Button"));
		self->clear_active();
		return 0;
	} catch (std::exception &e) {
		lua_pushfstring(L, "clear_active: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "clear_active: Unknown exception");
	}

	return dub::error(L);
}
#endif

/** void Fl_Widget::set_active()
 * inc/Fl_Widget.h:790
 */
#if (FL_MAJOR_VERSION>=1 && FL_MINOR_VERSION>=3 && FL_PATCH_VERSION>=3)
static int Fl_Lua_Light_Button_set_active(lua_State *L) {
	try {
		Fl_Lua_Light_Button *self = *((Fl_Lua_Light_Button **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Light_Button"));
		self->set_active();
		return 0;
	} catch (std::exception &e) {
		lua_pushfstring(L, "set_active: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "set_active: Unknown exception");
	}

	return dub::error(L);
}
#endif

/** int Fl_Widget::take_focus()
 * inc/Fl_Widget.h:799
 */
static int Fl_Lua_Light_Button_take_focus(lua_State *L) {
	try {
		Fl_Lua_Light_Button *self = *((Fl_Lua_Light_Button **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Light_Button"));
		lua_pushnumber(L, self->take_focus());
		return 1;
	} catch (std::exception &e) {
		lua_pushfstring(L, "take_focus: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "take_focus: Unknown exception");
	}

	return dub::error(L);
}

/** void Fl_Widget::set_visible_focus()
 * inc/Fl_Widget.h:807
 */
static int Fl_Lua_Light_Button_set_visible_focus(lua_State *L) {
	try {
		Fl_Lua_Light_Button *self = *((Fl_Lua_Light_Button **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Light_Button"));
		self->set_visible_focus();
		return 0;
	} catch (std::exception &e) {
		lua_pushfstring(L, "set_visible_focus: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "set_visible_focus: Unknown exception");
	}

	return dub::error(L);
}

/** void Fl_Widget::clear_visible_focus()
 * inc/Fl_Widget.h:813
 */
static int Fl_Lua_Light_Button_clear_visible_focus(lua_State *L) {
	try {
		Fl_Lua_Light_Button *self = *((Fl_Lua_Light_Button **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Light_Button"));
		self->clear_visible_focus();
		return 0;
	} catch (std::exception &e) {
		lua_pushfstring(L, "clear_visible_focus: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "clear_visible_focus: Unknown exception");
	}

	return dub::error(L);
}

/** void Fl_Widget::visible_focus(int v)
 * inc/Fl_Widget.h:819
 */
static int Fl_Lua_Light_Button_visible_focus(lua_State *L) {
	try {
		Fl_Lua_Light_Button *self = *((Fl_Lua_Light_Button **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Light_Button"));
		int top__ = lua_gettop(L);

		if (top__ >= 2) {
			int v = dub::checkinteger(L, 2);
			self->visible_focus(v);
			return 0;
		} else {
			lua_pushnumber(L, self->visible_focus());
			return 1;
		}
	} catch (std::exception &e) {
		lua_pushfstring(L, "visible_focus: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "visible_focus: Unknown exception");
	}

	return dub::error(L);
}

/** void Fl_Widget::do_callback()
 * inc/Fl_Widget.h:840
 */
static int Fl_Lua_Light_Button_do_callback(lua_State *L) {
	try {
		Fl_Lua_Light_Button *self = *((Fl_Lua_Light_Button **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Light_Button"));
		int top__ = lua_gettop(L);

		if (top__ >= 3) {
			int type__ = lua_type(L, 3);
			void **ptr3__;

			if ( (ptr3__ = dub::issdata(L, 3, "long", type__)) ) {
				Fl_Widget *o = *((Fl_Widget **)dub::checksdata(L, 2, "FLTK.Fl_Widget"));
				long *arg = *((long **)ptr3__);
				self->do_callback(o, *arg);
				return 0;
			} else {
				Fl_Widget *o = *((Fl_Widget **)dub::checksdata(L, 2, "FLTK.Fl_Widget"));
				void *arg = *((void **)dub::checksdata(L, 3, "void"));
				self->do_callback(o, arg);
				return 0;
			}
		} else if (top__ >= 2) {
			Fl_Widget *o = *((Fl_Widget **)dub::checksdata(L, 2, "FLTK.Fl_Widget"));
			self->do_callback(o);
			return 0;
		} else {
			self->do_callback();
			return 0;
		}
	} catch (std::exception &e) {
		lua_pushfstring(L, "do_callback: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "do_callback: Unknown exception");
	}

	return dub::error(L);
}

/** int Fl_Widget::test_shortcut()
 * inc/Fl_Widget.h:855
 */
static int Fl_Lua_Light_Button_test_shortcut(lua_State *L) {
	try {
		Fl_Lua_Light_Button *self = *((Fl_Lua_Light_Button **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Light_Button"));
		int top__ = lua_gettop(L);

		if (top__ >= 3) {
			const char *p1 = dub::checkstring(L, 2);
			const bool require_alt = dub::checkboolean(L, 3);
			lua_pushnumber(L, Fl_Lua_Light_Button::test_shortcut(p1, require_alt));
			return 1;
		} else if (top__ >= 2) {
			const char *p1 = dub::checkstring(L, 2);
			lua_pushnumber(L, Fl_Lua_Light_Button::test_shortcut(p1));
			return 1;
		} else {
			lua_pushnumber(L, self->test_shortcut());
			return 1;
		}
	} catch (std::exception &e) {
		lua_pushfstring(L, "test_shortcut: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "test_shortcut: Unknown exception");
	}

	return dub::error(L);
}

/** void Fl_Widget::_set_fullscreen()
 * inc/Fl_Widget.h:861
 */
static int Fl_Lua_Light_Button__set_fullscreen(lua_State *L) {
	try {
		Fl_Lua_Light_Button *self = *((Fl_Lua_Light_Button **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Light_Button"));
		self->_set_fullscreen();
		return 0;
	} catch (std::exception &e) {
		lua_pushfstring(L, "_set_fullscreen: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "_set_fullscreen: Unknown exception");
	}

	return dub::error(L);
}

/** void Fl_Widget::_clear_fullscreen()
 * inc/Fl_Widget.h:862
 */
static int Fl_Lua_Light_Button__clear_fullscreen(lua_State *L) {
	try {
		Fl_Lua_Light_Button *self = *((Fl_Lua_Light_Button **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Light_Button"));
		self->_clear_fullscreen();
		return 0;
	} catch (std::exception &e) {
		lua_pushfstring(L, "_clear_fullscreen: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "_clear_fullscreen: Unknown exception");
	}

	return dub::error(L);
}

/** int Fl_Widget::contains(const Fl_Widget *w) const
 * inc/Fl_Widget.h:869
 */
static int Fl_Lua_Light_Button_contains(lua_State *L) {
	try {
		Fl_Lua_Light_Button *self = *((Fl_Lua_Light_Button **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Light_Button"));
		Fl_Widget *w = *((Fl_Widget **)dub::checksdata(L, 2, "FLTK.Fl_Widget"));
		lua_pushnumber(L, self->contains(w));
		return 1;
	} catch (std::exception &e) {
		lua_pushfstring(L, "contains: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "contains: Unknown exception");
	}

	return dub::error(L);
}

/** int Fl_Widget::inside(const Fl_Widget *wgt) const
 * inc/Fl_Widget.h:877
 */
static int Fl_Lua_Light_Button_inside(lua_State *L) {
	try {
		Fl_Lua_Light_Button *self = *((Fl_Lua_Light_Button **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Light_Button"));
		Fl_Widget *wgt = *((Fl_Widget **)dub::checksdata(L, 2, "FLTK.Fl_Widget"));
		lua_pushnumber(L, self->inside(wgt));
		return 1;
	} catch (std::exception &e) {
		lua_pushfstring(L, "inside: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "inside: Unknown exception");
	}

	return dub::error(L);
}

/** void Fl_Widget::redraw()
 * inc/Fl_Widget.h:882
 */
static int Fl_Lua_Light_Button_redraw(lua_State *L) {
	try {
		Fl_Lua_Light_Button *self = *((Fl_Lua_Light_Button **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Light_Button"));
		self->redraw();
		return 0;
	} catch (std::exception &e) {
		lua_pushfstring(L, "redraw: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "redraw: Unknown exception");
	}

	return dub::error(L);
}

/** void Fl_Widget::redraw_label()
 * inc/Fl_Widget.h:888
 */
static int Fl_Lua_Light_Button_redraw_label(lua_State *L) {
	try {
		Fl_Lua_Light_Button *self = *((Fl_Lua_Light_Button **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Light_Button"));
		self->redraw_label();
		return 0;
	} catch (std::exception &e) {
		lua_pushfstring(L, "redraw_label: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "redraw_label: Unknown exception");
	}

	return dub::error(L);
}

/** unsigned char Fl_Widget::damage() const
 * inc/Fl_Widget.h:896
 */
static int Fl_Lua_Light_Button_damage(lua_State *L) {
	try {
		Fl_Lua_Light_Button *self = *((Fl_Lua_Light_Button **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Light_Button"));
		int top__ = lua_gettop(L);

		if (top__ >= 6) {
			unsigned char c = dub::checkinteger(L, 2);
			int x = dub::checkinteger(L, 3);
			int y = dub::checkinteger(L, 4);
			int w = dub::checkinteger(L, 5);
			int h = dub::checkinteger(L, 6);
			self->damage(c, x, y, w, h);
			return 0;
		} else if (top__ >= 2) {
			unsigned char c = dub::checkinteger(L, 2);
			self->damage(c);
			return 0;
		} else {
			lua_pushnumber(L, self->damage());
			return 1;
		}
	} catch (std::exception &e) {
		lua_pushfstring(L, "damage: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "damage: Unknown exception");
	}

	return dub::error(L);
}

/** void Fl_Widget::clear_damage(unsigned char c=0)
 * inc/Fl_Widget.h:910
 */
static int Fl_Lua_Light_Button_clear_damage(lua_State *L) {
	try {
		Fl_Lua_Light_Button *self = *((Fl_Lua_Light_Button **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Light_Button"));
		int top__ = lua_gettop(L);

		if (top__ >= 2) {
			unsigned char c = dub::checkinteger(L, 2);
			self->clear_damage(c);
			return 0;
		} else {
			self->clear_damage();
			return 0;
		}
	} catch (std::exception &e) {
		lua_pushfstring(L, "clear_damage: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "clear_damage: Unknown exception");
	}

	return dub::error(L);
}

/** void Fl_Widget::draw_label(int, int, int, int, int) const
 * inc/Fl_Widget.h:927
 */
static int Fl_Lua_Light_Button_draw_label(lua_State *L) {
	try {
		Fl_Lua_Light_Button *self = *((Fl_Lua_Light_Button **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Light_Button"));
		int p1 = dub::checkinteger(L, 2);
		int p2 = dub::checkinteger(L, 3);
		int p3 = dub::checkinteger(L, 4);
		int p4 = dub::checkinteger(L, 5);
		int p5 = dub::checkinteger(L, 6);
		self->draw_label(p1, p2, p3, p4, p5);
		return 0;
	} catch (std::exception &e) {
		lua_pushfstring(L, "draw_label: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "draw_label: Unknown exception");
	}

	return dub::error(L);
}

/** void Fl_Widget::measure_label(int &ww, int &hh) const
 * inc/Fl_Widget.h:936
 */
static int Fl_Lua_Light_Button_measure_label(lua_State *L) {
	try {
		Fl_Lua_Light_Button *self = *((Fl_Lua_Light_Button **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Light_Button"));
		int ww = dub::checkinteger(L, 2);
		int hh = dub::checkinteger(L, 3);
		self->measure_label(ww, hh);
		return 0;
	} catch (std::exception &e) {
		lua_pushfstring(L, "measure_label: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "measure_label: Unknown exception");
	}

	return dub::error(L);
}

/** Fl_Window* Fl_Widget::window() const
 * inc/Fl_Widget.h:938
 */
static int Fl_Lua_Light_Button_window(lua_State *L) {
	try {
		Fl_Lua_Light_Button *self = *((Fl_Lua_Light_Button **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Light_Button"));
		Fl_Window *retval__ = self->window();

		if (!retval__) return 0;

		dub::pushudata(L, retval__, "FLTK.Fl_Window", false);
		return 1;
	} catch (std::exception &e) {
		lua_pushfstring(L, "window: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "window: Unknown exception");
	}

	return dub::error(L);
}

/** Fl_Window* Fl_Widget::top_window() const
 * inc/Fl_Widget.h:939
 */
#if (FL_MAJOR_VERSION>=1 && FL_MINOR_VERSION>=3 && FL_PATCH_VERSION>=3)
static int Fl_Lua_Light_Button_top_window(lua_State *L) {
	try {
		Fl_Lua_Light_Button *self = *((Fl_Lua_Light_Button **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Light_Button"));
		Fl_Window *retval__ = self->top_window();

		if (!retval__) return 0;

		dub::pushudata(L, retval__, "FLTK.Fl_Window", false);
		return 1;
	} catch (std::exception &e) {
		lua_pushfstring(L, "top_window: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "top_window: Unknown exception");
	}

	return dub::error(L);
}
#endif

/** Fl_Window* Fl_Widget::top_window_offset(int &xoff, int &yoff) const
 * inc/Fl_Widget.h:940
 */
#if (FL_MAJOR_VERSION>=1 && FL_MINOR_VERSION>=3 && FL_PATCH_VERSION>=3)
static int Fl_Lua_Light_Button_top_window_offset(lua_State *L) {
	try {
		Fl_Lua_Light_Button *self = *((Fl_Lua_Light_Button **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Light_Button"));
		int xoff = dub::checkinteger(L, 2);
		int yoff = dub::checkinteger(L, 3);
		Fl_Window *retval__ = self->top_window_offset(xoff, yoff);

		if (!retval__) return 0;

		dub::pushudata(L, retval__, "FLTK.Fl_Window", false);
		return 1;
	} catch (std::exception &e) {
		lua_pushfstring(L, "top_window_offset: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "top_window_offset: Unknown exception");
	}

	return dub::error(L);
}
#endif

/** virtual Fl_Group* Fl_Widget::as_group()
 * inc/Fl_Widget.h:965
 */
static int Fl_Lua_Light_Button_as_group(lua_State *L) {
	try {
		Fl_Lua_Light_Button *self = *((Fl_Lua_Light_Button **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Light_Button"));
		Fl_Group *retval__ = self->as_group();

		if (!retval__) return 0;

		dub::pushudata(L, retval__, "FLTK.Fl_Group", false);
		return 1;
	} catch (std::exception &e) {
		lua_pushfstring(L, "as_group: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "as_group: Unknown exception");
	}

	return dub::error(L);
}

/** virtual Fl_Window* Fl_Widget::as_window()
 * inc/Fl_Widget.h:979
 */
static int Fl_Lua_Light_Button_as_window(lua_State *L) {
	try {
		Fl_Lua_Light_Button *self = *((Fl_Lua_Light_Button **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Light_Button"));
		Fl_Window *retval__ = self->as_window();

		if (!retval__) return 0;

		dub::pushudata(L, retval__, "FLTK.Fl_Window", false);
		return 1;
	} catch (std::exception &e) {
		lua_pushfstring(L, "as_window: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "as_window: Unknown exception");
	}

	return dub::error(L);
}

/** virtual class Fl_Gl_Window* Fl_Widget::as_gl_window()
 * inc/Fl_Widget.h:991
 */
static int Fl_Lua_Light_Button_as_gl_window(lua_State *L) {
	try {
		Fl_Lua_Light_Button *self = *((Fl_Lua_Light_Button **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Light_Button"));
		class Fl_Gl_Window *retval__ = self->as_gl_window();

		if (!retval__) return 0;

		dub::pushudata(L, retval__, "class Fl_Gl_Window", false);
		return 1;
	} catch (std::exception &e) {
		lua_pushfstring(L, "as_gl_window: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "as_gl_window: Unknown exception");
	}

	return dub::error(L);
}

/** int Fl_Widget::use_accents_menu()
 * inc/Fl_Widget.h:995
 */
#if (FL_MAJOR_VERSION>=1 && FL_MINOR_VERSION>=3 && FL_PATCH_VERSION>=3)
static int Fl_Lua_Light_Button_use_accents_menu(lua_State *L) {
	try {
		Fl_Lua_Light_Button *self = *((Fl_Lua_Light_Button **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Light_Button"));
		lua_pushnumber(L, self->use_accents_menu());
		return 1;
	} catch (std::exception &e) {
		lua_pushfstring(L, "use_accents_menu: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "use_accents_menu: Unknown exception");
	}

	return dub::error(L);
}
#endif

/** int Fl_Widget::color2() const
 * inc/Fl_Widget.h:1000
 */
static int Fl_Lua_Light_Button_color2(lua_State *L) {
	try {
		Fl_Lua_Light_Button *self = *((Fl_Lua_Light_Button **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Light_Button"));
		int top__ = lua_gettop(L);

		if (top__ >= 2) {
			unsigned a = dub::checkinteger(L, 2);
			self->color2(a);
			return 0;
		} else {
			lua_pushnumber(L, self->color2());
			return 1;
		}
	} catch (std::exception &e) {
		lua_pushfstring(L, "color2: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "color2: Unknown exception");
	}

	return dub::error(L);
}



// --=============================================== __tostring
static int Fl_Lua_Light_Button___tostring(lua_State *L) {
	Fl_Lua_Light_Button *self = *((Fl_Lua_Light_Button **)dub::checksdata_n(L, 1, "FLTK.Fl_Lua_Light_Button"));
	lua_pushfstring(L, "FLTK.Fl_Lua_Light_Button: %p", self);

	return 1;
}

// --=============================================== METHODS

static const struct luaL_Reg Fl_Lua_Light_Button_member_methods[] = {
	{ "__gc", Fl_Lua_Light_Button__Fl_Lua_Light_Button },
	{ "_cast_", Fl_Lua_Light_Button__cast_ },
	{ "handle", Fl_Lua_Light_Button_handle },
	{ "new", Fl_Lua_Light_Button_Fl_Lua_Light_Button },
	{ "value", Fl_Lua_Light_Button_value },
	{ "set", Fl_Lua_Light_Button_set  },
	{ "clear", Fl_Lua_Light_Button_clear },
	{ "setonly", Fl_Lua_Light_Button_setonly },
	{ "shortcut", Fl_Lua_Light_Button_shortcut },
	{ "down_box", Fl_Lua_Light_Button_down_box },
	{ "down_color", Fl_Lua_Light_Button_down_color },
	{ "parent", Fl_Lua_Light_Button_parent },
	{ "Type", Fl_Lua_Light_Button_type },
	{ "x", Fl_Lua_Light_Button_x    },
	{ "y", Fl_Lua_Light_Button_y    },
	{ "w", Fl_Lua_Light_Button_w    },
	{ "h", Fl_Lua_Light_Button_h    },
	{ "resize", Fl_Lua_Light_Button_resize },
	{ "damage_resize", Fl_Lua_Light_Button_damage_resize },
	{ "position", Fl_Lua_Light_Button_position },
	{ "size", Fl_Lua_Light_Button_size },
	{ "align", Fl_Lua_Light_Button_align },
	{ "box", Fl_Lua_Light_Button_box  },
	{ "color", Fl_Lua_Light_Button_color },
	{ "selection_color", Fl_Lua_Light_Button_selection_color },
	{ "label", Fl_Lua_Light_Button_label },
	{ "copy_label", Fl_Lua_Light_Button_copy_label },
	{ "labeltype", Fl_Lua_Light_Button_labeltype },
	{ "labelcolor", Fl_Lua_Light_Button_labelcolor },
	{ "labelfont", Fl_Lua_Light_Button_labelfont },
	{ "labelsize", Fl_Lua_Light_Button_labelsize },
	{ "image", Fl_Lua_Light_Button_image },
	{ "deimage", Fl_Lua_Light_Button_deimage },
	{ "tooltip", Fl_Lua_Light_Button_tooltip },
	{ "copy_tooltip", Fl_Lua_Light_Button_copy_tooltip },
	{ "callback", Fl_Lua_Light_Button_callback },
	{ "user_data", Fl_Lua_Light_Button_user_data },
	{ "argument", Fl_Lua_Light_Button_argument },
	{ "when", Fl_Lua_Light_Button_when },
	{ "visible", Fl_Lua_Light_Button_visible },
	{ "visible_r", Fl_Lua_Light_Button_visible_r },
	{ "show", Fl_Lua_Light_Button_show },
	{ "hide", Fl_Lua_Light_Button_hide },
	{ "set_visible", Fl_Lua_Light_Button_set_visible },
	{ "clear_visible", Fl_Lua_Light_Button_clear_visible },
	{ "active", Fl_Lua_Light_Button_active },
	{ "active_r", Fl_Lua_Light_Button_active_r },
	{ "activate", Fl_Lua_Light_Button_activate },
	{ "deactivate", Fl_Lua_Light_Button_deactivate },
	{ "output", Fl_Lua_Light_Button_output },
	{ "set_output", Fl_Lua_Light_Button_set_output },
	{ "clear_output", Fl_Lua_Light_Button_clear_output },
	{ "takesevents", Fl_Lua_Light_Button_takesevents },
	{ "changed", Fl_Lua_Light_Button_changed },
	{ "set_changed", Fl_Lua_Light_Button_set_changed },
	{ "clear_changed", Fl_Lua_Light_Button_clear_changed },
#if (FL_MAJOR_VERSION>=1 && FL_MINOR_VERSION>=3 && FL_PATCH_VERSION>=3)
	{ "clear_active", Fl_Lua_Light_Button_clear_active },
#endif
#if (FL_MAJOR_VERSION>=1 && FL_MINOR_VERSION>=3 && FL_PATCH_VERSION>=3)
	{ "set_active", Fl_Lua_Light_Button_set_active },
#endif
	{ "take_focus", Fl_Lua_Light_Button_take_focus },
	{ "set_visible_focus", Fl_Lua_Light_Button_set_visible_focus },
	{ "clear_visible_focus", Fl_Lua_Light_Button_clear_visible_focus },
	{ "visible_focus", Fl_Lua_Light_Button_visible_focus },
	{ "do_callback", Fl_Lua_Light_Button_do_callback },
	{ "test_shortcut", Fl_Lua_Light_Button_test_shortcut },
	{ "_set_fullscreen", Fl_Lua_Light_Button__set_fullscreen },
	{ "_clear_fullscreen", Fl_Lua_Light_Button__clear_fullscreen },
	{ "contains", Fl_Lua_Light_Button_contains },
	{ "inside", Fl_Lua_Light_Button_inside },
	{ "redraw", Fl_Lua_Light_Button_redraw },
	{ "redraw_label", Fl_Lua_Light_Button_redraw_label },
	{ "damage", Fl_Lua_Light_Button_damage },
	{ "clear_damage", Fl_Lua_Light_Button_clear_damage },
	{ "draw_label", Fl_Lua_Light_Button_draw_label },
	{ "measure_label", Fl_Lua_Light_Button_measure_label },
	{ "window", Fl_Lua_Light_Button_window },
#if (FL_MAJOR_VERSION>=1 && FL_MINOR_VERSION>=3 && FL_PATCH_VERSION>=3)
	{ "top_window", Fl_Lua_Light_Button_top_window },
#endif
#if (FL_MAJOR_VERSION>=1 && FL_MINOR_VERSION>=3 && FL_PATCH_VERSION>=3)
	{ "top_window_offset", Fl_Lua_Light_Button_top_window_offset },
#endif
	{ "as_group", Fl_Lua_Light_Button_as_group },
	{ "as_window", Fl_Lua_Light_Button_as_window },
	{ "as_gl_window", Fl_Lua_Light_Button_as_gl_window },
#if (FL_MAJOR_VERSION>=1 && FL_MINOR_VERSION>=3 && FL_PATCH_VERSION>=3)
	{ "use_accents_menu", Fl_Lua_Light_Button_use_accents_menu },
#endif
	{ "color2", Fl_Lua_Light_Button_color2 },
	{ "__tostring", Fl_Lua_Light_Button___tostring },
	{ "deleted", dub::isDeleted       },
	{ NULL, NULL},
};


int luaopen_FLTK_Fl_Light_Button(lua_State *L)
{
	// Create the metatable which will contain all the member methods
	luaL_newmetatable(L, "FLTK.Fl_Lua_Light_Button");
	// <mt>

	// register member methods
	dub::fregister(L, Fl_Lua_Light_Button_member_methods);
	// setup meta-table
	dub::setup(L, "FLTK.Fl_Lua_Light_Button");
	// <mt>
	return 1;
}
