/**
 *
 * MACHINE GENERATED FILE. DO NOT EDIT.
 *
 * Bindings for class Fl_Lua_Double_Window
 *
 * This file has been generated by dub 2.2.4.
 */
#include <stdlib.h>
#include "dub/dub.h"
#include <FL/Fl_Double_Window.H>
#include "cbHelper.h"
#include "runlua.h"
class Fl_Lua_Double_Window: public Fl_Double_Window {
	using Fl_Double_Window::Fl_Double_Window;
public:
	struct cbInfo ci;
	char*drawFunc = 0;
	char*handleFunc = 0;
	int baseHandle(int e) {
		return Fl_Window::handle(e);
	}
	int handle(int e) {
		if (handleFunc) {
			lua_getglobal(ci.L, handleFunc);
			lua_pushnumber(ci.L, e);
			runLuaFunc(ci.L, 1, 1);
			int ret = luaL_checkinteger(ci.L, -1);
			lua_pop(ci.L, 1);
			return ret;
		} else
			return baseHandle(e);
	}
	void baseDraw() {
		Fl_Window::draw();
	}
	void draw() {
		if (drawFunc) {
			lua_getglobal(ci.L, drawFunc);
			runLuaFunc(ci.L, 0, 0);
		} else
			baseDraw();
	}
};


static void cpyAndSet(lua_State*L, char**what) {
	if (*what)
		free(*what);

	const char*str = luaL_optstring(L, 2, 0);

	if (str && str[0])
		*what = strdup(str);

	else
		*what = 0;
}
static int lua_Fl_Window_setDrawFunction(lua_State*L) {
	Fl_Lua_Double_Window *win = *((Fl_Lua_Double_Window **)dub::checksdata_n(L, 1, "FLTK.Fl_Lua_Double_Window"));

	if (win)
		cpyAndSet(L, &win->drawFunc);

	return 0;
}
static int lua_Fl_Window_setHandleFunction(lua_State*L) {
	Fl_Lua_Double_Window *win = *((Fl_Lua_Double_Window **)dub::checksdata_n(L, 1, "FLTK.Fl_Lua_Double_Window"));

	if (win)
		cpyAndSet(L, &win->handleFunc);

	return 0;
}
static int lua_Fl_Window_baseHandle(lua_State*L) {
	Fl_Lua_Double_Window *win = *((Fl_Lua_Double_Window **)dub::checksdata_n(L, 1, "FLTK.Fl_Lua_Double_Window"));
	lua_pushinteger(L, win->baseHandle(luaL_checkinteger(L, 2)));
	return 1;
}
static int lua_Fl_Window_baseDraw(lua_State*L) {
	Fl_Lua_Double_Window *win = *((Fl_Lua_Double_Window **)dub::checksdata_n(L, 1, "FLTK.Fl_Lua_Double_Window"));
	win->baseDraw();
	return 0;
}


/** Cast (class_name)
 *
 */
static int Fl_Lua_Double_Window__cast_(lua_State *L) {

	Fl_Lua_Double_Window *self = *((Fl_Lua_Double_Window **)dub::checksdata_n(L, 1, "FLTK.Fl_Lua_Double_Window"));
	const char *key = luaL_checkstring(L, 2);
	void **retval__ = (void**)lua_newuserdata(L, sizeof(void*));
	int key_h = dub::hash(key, 5);

	switch (key_h) {
		case 3: {
			if (DUB_ASSERT_KEY(key, "FLTK.Fl_Window")) break;

			*retval__ = static_cast<Fl_Window *>(self);
			return 1;
		}

		case 4: {
			if (DUB_ASSERT_KEY(key, "FLTK.Fl_Group")) break;

			*retval__ = static_cast<Fl_Group *>(self);
			return 1;
		}

		case 1: {
			if (DUB_ASSERT_KEY(key, "FLTK.Fl_Widget")) break;

			*retval__ = static_cast<Fl_Widget *>(self);
			return 1;
		}
	}

	return 0;
}

/** void Fl_Lua_Double_Window::show()
 * inc/Fl_Lua_Double_Window.h:49
 */
static int Fl_Lua_Double_Window_show(lua_State *L) {
	try {
		Fl_Lua_Double_Window *self = *((Fl_Lua_Double_Window **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Double_Window"));
		int top__ = lua_gettop(L);

		if (top__ >= 3) {
			int a = dub::checkinteger(L, 2);
			char * *b = *((char* **)dub::checksdata(L, 3, "char*"));
			self->show(a, b);
			return 0;
		} else {
			self->show();
			return 0;
		}
	} catch (std::exception &e) {
		lua_pushfstring(L, "show: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "show: Unknown exception");
	}

	return dub::error(L);
}

/** void Fl_Lua_Double_Window::flush()
 * inc/Fl_Lua_Double_Window.h:51
 */
static int Fl_Lua_Double_Window_flush(lua_State *L) {
	try {
		Fl_Lua_Double_Window *self = *((Fl_Lua_Double_Window **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Double_Window"));
		self->flush();
		return 0;
	} catch (std::exception &e) {
		lua_pushfstring(L, "flush: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "flush: Unknown exception");
	}

	return dub::error(L);
}

/** void Fl_Lua_Double_Window::resize(int, int, int, int)
 * inc/Fl_Lua_Double_Window.h:52
 */
static int Fl_Lua_Double_Window_resize(lua_State *L) {
	try {
		Fl_Lua_Double_Window *self = *((Fl_Lua_Double_Window **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Double_Window"));
		int X = dub::checkinteger(L, 2);
		int Y = dub::checkinteger(L, 3);
		int W = dub::checkinteger(L, 4);
		int H = dub::checkinteger(L, 5);
		self->resize(X, Y, W, H);
		return 0;
	} catch (std::exception &e) {
		lua_pushfstring(L, "resize: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "resize: Unknown exception");
	}

	return dub::error(L);
}

/** void Fl_Lua_Double_Window::hide()
 * inc/Fl_Lua_Double_Window.h:53
 */
static int Fl_Lua_Double_Window_hide(lua_State *L) {
	try {
		Fl_Lua_Double_Window *self = *((Fl_Lua_Double_Window **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Double_Window"));
		self->hide();
		return 0;
	} catch (std::exception &e) {
		lua_pushfstring(L, "hide: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "hide: Unknown exception");
	}

	return dub::error(L);
}

/** Fl_Lua_Double_Window::~Fl_Lua_Double_Window()
 * inc/Fl_Lua_Double_Window.h:54
 */
static int Fl_Lua_Double_Window__Fl_Lua_Double_Window(lua_State *L) {
	try {
		DubUserdata *userdata = ((DubUserdata*)dub::checksdata_d(L, 1, "FLTK.Fl_Lua_Double_Window"));

		if (userdata->gc) {
			Fl_Lua_Double_Window *self = (Fl_Lua_Double_Window *)userdata->ptr;

			if (self->ci.cb) {
				free(self->ci.cb);
				free(self->drawFunc);
				free(self->handleFunc);
			}

			delete self;
		}

		userdata->gc = false;
		return 0;
	} catch (std::exception &e) {
		lua_pushfstring(L, "__gc: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "__gc: Unknown exception");
	}

	return dub::error(L);
}

/** Fl_Lua_Double_Window::Fl_Lua_Double_Window(int W, int H, const char *l=0)
 * inc/Fl_Lua_Double_Window.h:60
 */
static int Fl_Lua_Double_Window_Fl_Lua_Double_Window(lua_State *L) {
	try {
		int top__ = lua_gettop(L);

		if (top__ >= 5) {
			int X = dub::checkinteger(L, 1);
			int Y = dub::checkinteger(L, 2);
			int W = dub::checkinteger(L, 3);
			int H = dub::checkinteger(L, 4);
			const char *l = dub::checkstring(L, 5);
			Fl_Lua_Double_Window *retval__ = new Fl_Lua_Double_Window(X, Y, W, H, l);
			retval__->ci.L = L;
			retval__->ci.cb = 0;
			dub::pushudata(L, retval__, "FLTK.Fl_Lua_Double_Window", true);
			return 1;
		} else if (top__ >= 4) {
			int X = dub::checkinteger(L, 1);
			int Y = dub::checkinteger(L, 2);
			int W = dub::checkinteger(L, 3);
			int H = dub::checkinteger(L, 4);
			Fl_Lua_Double_Window *retval__ = new Fl_Lua_Double_Window(X, Y, W, H);
			retval__->ci.L = L;
			retval__->ci.cb = 0;
			dub::pushudata(L, retval__, "FLTK.Fl_Lua_Double_Window", true);
			return 1;
		} else if (top__ >= 3) {
			int W = dub::checkinteger(L, 1);
			int H = dub::checkinteger(L, 2);
			const char *l = dub::checkstring(L, 3);
			Fl_Lua_Double_Window *retval__ = new Fl_Lua_Double_Window(W, H, l);
			retval__->ci.L = L;
			retval__->ci.cb = 0;
			dub::pushudata(L, retval__, "FLTK.Fl_Lua_Double_Window", true);
			return 1;
		} else {
			int W = dub::checkinteger(L, 1);
			int H = dub::checkinteger(L, 2);
			Fl_Lua_Double_Window *retval__ = new Fl_Lua_Double_Window(W, H);
			retval__->ci.L = L;
			retval__->ci.cb = 0;
			dub::pushudata(L, retval__, "FLTK.Fl_Lua_Double_Window", true);
			return 1;
		}
	} catch (std::exception &e) {
		lua_pushfstring(L, "new: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "new: Unknown exception");
	}

	return dub::error(L);
}

/** void Fl_Window::shape(const Fl_Image *img)
 * inc/Fl_Window.h:145
 */
#if (FL_MAJOR_VERSION>=1 && FL_MINOR_VERSION>=3 && FL_PATCH_VERSION>=3)
static int Fl_Lua_Double_Window_shape(lua_State *L) {
	try {
		Fl_Lua_Double_Window *self = *((Fl_Lua_Double_Window **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Double_Window"));
		Fl_Image *img = *((Fl_Image **)dub::checksdata(L, 2, "FLTK.Fl_Image"));
		self->shape(img);
		return 0;
	} catch (std::exception &e) {
		lua_pushfstring(L, "shape: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "shape: Unknown exception");
	}

	return dub::error(L);
}
#endif

/** virtual int Fl_Window::handle(int)
 * inc/Fl_Window.h:243
 */
static int Fl_Lua_Double_Window_handle(lua_State *L) {
	try {
		Fl_Lua_Double_Window *self = *((Fl_Lua_Double_Window **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Double_Window"));
		int event = dub::checkinteger(L, 2);
		lua_pushnumber(L, self->handle(event));
		return 1;
	} catch (std::exception &e) {
		lua_pushfstring(L, "handle: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "handle: Unknown exception");
	}

	return dub::error(L);
}

/** void Fl_Window::border(int b)
 * inc/Fl_Window.h:269
 */
static int Fl_Lua_Double_Window_border(lua_State *L) {
	try {
		Fl_Lua_Double_Window *self = *((Fl_Lua_Double_Window **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Double_Window"));
		int top__ = lua_gettop(L);

		if (top__ >= 2) {
			int b = dub::checkinteger(L, 2);
			self->border(b);
			return 0;
		} else {
			lua_pushnumber(L, self->border());
			return 1;
		}
	} catch (std::exception &e) {
		lua_pushfstring(L, "border: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "border: Unknown exception");
	}

	return dub::error(L);
}

/** void Fl_Window::clear_border()
 * inc/Fl_Window.h:274
 */
static int Fl_Lua_Double_Window_clear_border(lua_State *L) {
	try {
		Fl_Lua_Double_Window *self = *((Fl_Lua_Double_Window **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Double_Window"));
		self->clear_border();
		return 0;
	} catch (std::exception &e) {
		lua_pushfstring(L, "clear_border: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "clear_border: Unknown exception");
	}

	return dub::error(L);
}

/** void Fl_Window::set_override()
 * inc/Fl_Window.h:278
 */
static int Fl_Lua_Double_Window_set_override(lua_State *L) {
	try {
		Fl_Lua_Double_Window *self = *((Fl_Lua_Double_Window **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Double_Window"));
		self->set_override();
		return 0;
	} catch (std::exception &e) {
		lua_pushfstring(L, "set_override: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "set_override: Unknown exception");
	}

	return dub::error(L);
}

/** unsigned int Fl_Window::override() const
 * inc/Fl_Window.h:280
 */
static int Fl_Lua_Double_Window_override(lua_State *L) {
	try {
		Fl_Lua_Double_Window *self = *((Fl_Lua_Double_Window **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Double_Window"));
		lua_pushnumber(L, self->override());
		return 1;
	} catch (std::exception &e) {
		lua_pushfstring(L, "override: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "override: Unknown exception");
	}

	return dub::error(L);
}

/** void Fl_Window::set_modal()
 * inc/Fl_Window.h:289
 */
static int Fl_Lua_Double_Window_set_modal(lua_State *L) {
	try {
		Fl_Lua_Double_Window *self = *((Fl_Lua_Double_Window **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Double_Window"));
		self->set_modal();
		return 0;
	} catch (std::exception &e) {
		lua_pushfstring(L, "set_modal: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "set_modal: Unknown exception");
	}

	return dub::error(L);
}

/** unsigned int Fl_Window::modal() const
 * inc/Fl_Window.h:291
 */
static int Fl_Lua_Double_Window_modal(lua_State *L) {
	try {
		Fl_Lua_Double_Window *self = *((Fl_Lua_Double_Window **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Double_Window"));
		lua_pushnumber(L, self->modal());
		return 1;
	} catch (std::exception &e) {
		lua_pushfstring(L, "modal: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "modal: Unknown exception");
	}

	return dub::error(L);
}

/** void Fl_Window::set_non_modal()
 * inc/Fl_Window.h:298
 */
static int Fl_Lua_Double_Window_set_non_modal(lua_State *L) {
	try {
		Fl_Lua_Double_Window *self = *((Fl_Lua_Double_Window **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Double_Window"));
		self->set_non_modal();
		return 0;
	} catch (std::exception &e) {
		lua_pushfstring(L, "set_non_modal: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "set_non_modal: Unknown exception");
	}

	return dub::error(L);
}

/** unsigned int Fl_Window::non_modal() const
 * inc/Fl_Window.h:300
 */
static int Fl_Lua_Double_Window_non_modal(lua_State *L) {
	try {
		Fl_Lua_Double_Window *self = *((Fl_Lua_Double_Window **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Double_Window"));
		lua_pushnumber(L, self->non_modal());
		return 1;
	} catch (std::exception &e) {
		lua_pushfstring(L, "non_modal: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "non_modal: Unknown exception");
	}

	return dub::error(L);
}

/** void Fl_Window::clear_modal_states()
 * inc/Fl_Window.h:339
 */
#if (FL_MAJOR_VERSION>=1 && FL_MINOR_VERSION>=3 && FL_PATCH_VERSION>=3)
static int Fl_Lua_Double_Window_clear_modal_states(lua_State *L) {
	try {
		Fl_Lua_Double_Window *self = *((Fl_Lua_Double_Window **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Double_Window"));
		self->clear_modal_states();
		return 0;
	} catch (std::exception &e) {
		lua_pushfstring(L, "clear_modal_states: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "clear_modal_states: Unknown exception");
	}

	return dub::error(L);
}
#endif

/** void Fl_Window::set_menu_window()
 * inc/Fl_Window.h:354
 */
static int Fl_Lua_Double_Window_set_menu_window(lua_State *L) {
	try {
		Fl_Lua_Double_Window *self = *((Fl_Lua_Double_Window **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Double_Window"));
		self->set_menu_window();
		return 0;
	} catch (std::exception &e) {
		lua_pushfstring(L, "set_menu_window: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "set_menu_window: Unknown exception");
	}

	return dub::error(L);
}

/** unsigned int Fl_Window::menu_window() const
 * inc/Fl_Window.h:357
 */
static int Fl_Lua_Double_Window_menu_window(lua_State *L) {
	try {
		Fl_Lua_Double_Window *self = *((Fl_Lua_Double_Window **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Double_Window"));
		lua_pushnumber(L, self->menu_window());
		return 1;
	} catch (std::exception &e) {
		lua_pushfstring(L, "menu_window: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "menu_window: Unknown exception");
	}

	return dub::error(L);
}

/** void Fl_Window::set_tooltip_window()
 * inc/Fl_Window.h:375
 */
static int Fl_Lua_Double_Window_set_tooltip_window(lua_State *L) {
	try {
		Fl_Lua_Double_Window *self = *((Fl_Lua_Double_Window **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Double_Window"));
		self->set_tooltip_window();
		return 0;
	} catch (std::exception &e) {
		lua_pushfstring(L, "set_tooltip_window: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "set_tooltip_window: Unknown exception");
	}

	return dub::error(L);
}

/** unsigned int Fl_Window::tooltip_window() const
 * inc/Fl_Window.h:378
 */
static int Fl_Lua_Double_Window_tooltip_window(lua_State *L) {
	try {
		Fl_Lua_Double_Window *self = *((Fl_Lua_Double_Window **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Double_Window"));
		lua_pushnumber(L, self->tooltip_window());
		return 1;
	} catch (std::exception &e) {
		lua_pushfstring(L, "tooltip_window: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "tooltip_window: Unknown exception");
	}

	return dub::error(L);
}

/** void Fl_Window::hotspot(int x, int y, int offscreen=0)
 * inc/Fl_Window.h:387
 */
static int Fl_Lua_Double_Window_hotspot(lua_State *L) {
	try {
		Fl_Lua_Double_Window *self = *((Fl_Lua_Double_Window **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Double_Window"));
		int top__ = lua_gettop(L);

		if (top__ >= 4) {
			int x = dub::checkinteger(L, 2);
			int y = dub::checkinteger(L, 3);
			int offscreen = dub::checkinteger(L, 4);
			self->hotspot(x, y, offscreen);
			return 0;
		} else if (top__ >= 3) {
			int type__ = lua_type(L, 2);

			if (type__ == LUA_TNUMBER) {
				int x = dub::checkinteger(L, 2);
				int y = dub::checkinteger(L, 3);
				self->hotspot(x, y);
				return 0;
			} else {
				Fl_Widget *p1 = *((Fl_Widget **)dub::checksdata(L, 2, "FLTK.Fl_Widget"));
				int offscreen = dub::checkinteger(L, 3);
				self->hotspot(p1, offscreen);
				return 0;
			}
		} else {
			Fl_Widget *p1 = *((Fl_Widget **)dub::checksdata(L, 2, "FLTK.Fl_Widget"));
			self->hotspot(p1);
			return 0;
		}
	} catch (std::exception &e) {
		lua_pushfstring(L, "hotspot: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "hotspot: Unknown exception");
	}

	return dub::error(L);
}

/** void Fl_Window::free_position()
 * inc/Fl_Window.h:401
 */
static int Fl_Lua_Double_Window_free_position(lua_State *L) {
	try {
		Fl_Lua_Double_Window *self = *((Fl_Lua_Double_Window **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Double_Window"));
		self->free_position();
		return 0;
	} catch (std::exception &e) {
		lua_pushfstring(L, "free_position: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "free_position: Unknown exception");
	}

	return dub::error(L);
}

/** void Fl_Window::size_range(int minw, int minh, int maxw=0, int maxh=0, int dw=0, int dh=0, int aspect=0)
 * inc/Fl_Window.h:438
 */
static int Fl_Lua_Double_Window_size_range(lua_State *L) {
	try {
		Fl_Lua_Double_Window *self = *((Fl_Lua_Double_Window **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Double_Window"));
		int top__ = lua_gettop(L);

		if (top__ >= 8) {
			int minw = dub::checkinteger(L, 2);
			int minh = dub::checkinteger(L, 3);
			int maxw = dub::checkinteger(L, 4);
			int maxh = dub::checkinteger(L, 5);
			int dw = dub::checkinteger(L, 6);
			int dh = dub::checkinteger(L, 7);
			int aspect = dub::checkinteger(L, 8);
			self->size_range(minw, minh, maxw, maxh, dw, dh, aspect);
			return 0;
		} else if (top__ >= 7) {
			int minw = dub::checkinteger(L, 2);
			int minh = dub::checkinteger(L, 3);
			int maxw = dub::checkinteger(L, 4);
			int maxh = dub::checkinteger(L, 5);
			int dw = dub::checkinteger(L, 6);
			int dh = dub::checkinteger(L, 7);
			self->size_range(minw, minh, maxw, maxh, dw, dh);
			return 0;
		} else if (top__ >= 6) {
			int minw = dub::checkinteger(L, 2);
			int minh = dub::checkinteger(L, 3);
			int maxw = dub::checkinteger(L, 4);
			int maxh = dub::checkinteger(L, 5);
			int dw = dub::checkinteger(L, 6);
			self->size_range(minw, minh, maxw, maxh, dw);
			return 0;
		} else if (top__ >= 5) {
			int minw = dub::checkinteger(L, 2);
			int minh = dub::checkinteger(L, 3);
			int maxw = dub::checkinteger(L, 4);
			int maxh = dub::checkinteger(L, 5);
			self->size_range(minw, minh, maxw, maxh);
			return 0;
		} else if (top__ >= 4) {
			int minw = dub::checkinteger(L, 2);
			int minh = dub::checkinteger(L, 3);
			int maxw = dub::checkinteger(L, 4);
			self->size_range(minw, minh, maxw);
			return 0;
		} else {
			int minw = dub::checkinteger(L, 2);
			int minh = dub::checkinteger(L, 3);
			self->size_range(minw, minh);
			return 0;
		}
	} catch (std::exception &e) {
		lua_pushfstring(L, "size_range: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "size_range: Unknown exception");
	}

	return dub::error(L);
}

/** const char* Fl_Window::label() const
 * inc/Fl_Window.h:450
 */
static int Fl_Lua_Double_Window_label(lua_State *L) {
	try {
		Fl_Lua_Double_Window *self = *((Fl_Lua_Double_Window **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Double_Window"));
		int top__ = lua_gettop(L);

		if (top__ >= 3) {
			const char *label = dub::checkstring(L, 2);
			const char *iconlabel = dub::checkstring(L, 3);
			self->label(label, iconlabel);
			return 0;
		} else if (top__ >= 2) {
			const char *p1 = dub::checkstring(L, 2);
			self->label(p1);
			return 0;
		} else {
			lua_pushstring(L, self->label());
			return 1;
		}
	} catch (std::exception &e) {
		lua_pushfstring(L, "label: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "label: Unknown exception");
	}

	return dub::error(L);
}

/** const char* Fl_Window::iconlabel() const
 * inc/Fl_Window.h:452
 */
static int Fl_Lua_Double_Window_iconlabel(lua_State *L) {
	try {
		Fl_Lua_Double_Window *self = *((Fl_Lua_Double_Window **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Double_Window"));
		int top__ = lua_gettop(L);

		if (top__ >= 2) {
			const char *p1 = dub::checkstring(L, 2);
			self->iconlabel(p1);
			return 0;
		} else {
			lua_pushstring(L, self->iconlabel());
			return 1;
		}
	} catch (std::exception &e) {
		lua_pushfstring(L, "iconlabel: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "iconlabel: Unknown exception");
	}

	return dub::error(L);
}

/** void Fl_Window::copy_label(const char *a)
 * inc/Fl_Window.h:459
 */
static int Fl_Lua_Double_Window_copy_label(lua_State *L) {
	try {
		Fl_Lua_Double_Window *self = *((Fl_Lua_Double_Window **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Double_Window"));
		const char *a = dub::checkstring(L, 2);
		self->copy_label(a);
		return 0;
	} catch (std::exception &e) {
		lua_pushfstring(L, "copy_label: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "copy_label: Unknown exception");
	}

	return dub::error(L);
}

/** const char* Fl_Window::xclass() const
 * inc/Fl_Window.h:463
 */
static int Fl_Lua_Double_Window_xclass(lua_State *L) {
	try {
		Fl_Lua_Double_Window *self = *((Fl_Lua_Double_Window **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Double_Window"));
		int top__ = lua_gettop(L);

		if (top__ >= 2) {
			const char *c = dub::checkstring(L, 2);
			self->xclass(c);
			return 0;
		} else {
			lua_pushstring(L, self->xclass());
			return 1;
		}
	} catch (std::exception &e) {
		lua_pushfstring(L, "xclass: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "xclass: Unknown exception");
	}

	return dub::error(L);
}

/** void Fl_Window::icon(const Fl_RGB_Image *)
 * inc/Fl_Window.h:468
 */
#if (FL_MAJOR_VERSION>=1 && FL_MINOR_VERSION>=3 && FL_PATCH_VERSION>=3)
static int Fl_Lua_Double_Window_icon(lua_State *L) {
	try {
		Fl_Lua_Double_Window *self = *((Fl_Lua_Double_Window **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Double_Window"));
		int top__ = lua_gettop(L);

		if (top__ >= 2) {
			int type__ = lua_type(L, 2);
			void **ptr2__;

			if ( (ptr2__ = dub::issdata(L, 2, "void", type__)) ) {
				void *ic = *((void **)ptr2__);
				self->icon(ic);
				return 0;
			} else {
				Fl_RGB_Image *p1 = *((Fl_RGB_Image **)dub::checksdata(L, 2, "FLTK.Fl_RGB_Image"));
				self->icon(p1);
				return 0;
			}
		} else {
			self->icon();
			return 0;
		}
	} catch (std::exception &e) {
		lua_pushfstring(L, "icon: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "icon: Unknown exception");
	}

	return dub::error(L);
}
#endif

/** int Fl_Window::shown()
 * inc/Fl_Window.h:485
 */
static int Fl_Lua_Double_Window_shown(lua_State *L) {
	try {
		Fl_Lua_Double_Window *self = *((Fl_Lua_Double_Window **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Double_Window"));
		lua_pushnumber(L, self->shown());
		return 1;
	} catch (std::exception &e) {
		lua_pushfstring(L, "shown: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "shown: Unknown exception");
	}

	return dub::error(L);
}

/** void Fl_Window::wait_for_expose()
 * inc/Fl_Window.h:530
 */
#if (FL_MAJOR_VERSION>=1 && FL_MINOR_VERSION>=3 && FL_PATCH_VERSION>=3)
static int Fl_Lua_Double_Window_wait_for_expose(lua_State *L) {
	try {
		Fl_Lua_Double_Window *self = *((Fl_Lua_Double_Window **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Double_Window"));
		self->wait_for_expose();
		return 0;
	} catch (std::exception &e) {
		lua_pushfstring(L, "wait_for_expose: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "wait_for_expose: Unknown exception");
	}

	return dub::error(L);
}
#endif

/** void Fl_Window::fullscreen()
 * inc/Fl_Window.h:543
 */
static int Fl_Lua_Double_Window_fullscreen(lua_State *L) {
	try {
		Fl_Lua_Double_Window *self = *((Fl_Lua_Double_Window **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Double_Window"));
		self->fullscreen();
		return 0;
	} catch (std::exception &e) {
		lua_pushfstring(L, "fullscreen: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "fullscreen: Unknown exception");
	}

	return dub::error(L);
}

/** void Fl_Window::fullscreen_off()
 * inc/Fl_Window.h:547
 */
static int Fl_Lua_Double_Window_fullscreen_off(lua_State *L) {
	try {
		Fl_Lua_Double_Window *self = *((Fl_Lua_Double_Window **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Double_Window"));
		int top__ = lua_gettop(L);

		if (top__ >= 5) {
			int X = dub::checkinteger(L, 2);
			int Y = dub::checkinteger(L, 3);
			int W = dub::checkinteger(L, 4);
			int H = dub::checkinteger(L, 5);
			self->fullscreen_off(X, Y, W, H);
			return 0;
		} else {
			self->fullscreen_off();
			return 0;
		}
	} catch (std::exception &e) {
		lua_pushfstring(L, "fullscreen_off: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "fullscreen_off: Unknown exception");
	}

	return dub::error(L);
}

/** unsigned int Fl_Window::fullscreen_active() const
 * inc/Fl_Window.h:556
 */
static int Fl_Lua_Double_Window_fullscreen_active(lua_State *L) {
	try {
		Fl_Lua_Double_Window *self = *((Fl_Lua_Double_Window **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Double_Window"));
		lua_pushnumber(L, self->fullscreen_active());
		return 1;
	} catch (std::exception &e) {
		lua_pushfstring(L, "fullscreen_active: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "fullscreen_active: Unknown exception");
	}

	return dub::error(L);
}

/** void Fl_Window::fullscreen_screens(int top, int bottom, int left, int right)
 * inc/Fl_Window.h:567
 */
#if (FL_MAJOR_VERSION>=1 && FL_MINOR_VERSION>=3 && FL_PATCH_VERSION>=3)
static int Fl_Lua_Double_Window_fullscreen_screens(lua_State *L) {
	try {
		Fl_Lua_Double_Window *self = *((Fl_Lua_Double_Window **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Double_Window"));
		int top = dub::checkinteger(L, 2);
		int bottom = dub::checkinteger(L, 3);
		int left = dub::checkinteger(L, 4);
		int right = dub::checkinteger(L, 5);
		self->fullscreen_screens(top, bottom, left, right);
		return 0;
	} catch (std::exception &e) {
		lua_pushfstring(L, "fullscreen_screens: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "fullscreen_screens: Unknown exception");
	}

	return dub::error(L);
}
#endif

/** void Fl_Window::iconize()
 * inc/Fl_Window.h:583
 */
static int Fl_Lua_Double_Window_iconize(lua_State *L) {
	try {
		Fl_Lua_Double_Window *self = *((Fl_Lua_Double_Window **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Double_Window"));
		self->iconize();
		return 0;
	} catch (std::exception &e) {
		lua_pushfstring(L, "iconize: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "iconize: Unknown exception");
	}

	return dub::error(L);
}

/** int Fl_Window::x_root() const
 * inc/Fl_Window.h:585
 */
static int Fl_Lua_Double_Window_x_root(lua_State *L) {
	try {
		Fl_Lua_Double_Window *self = *((Fl_Lua_Double_Window **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Double_Window"));
		lua_pushnumber(L, self->x_root());
		return 1;
	} catch (std::exception &e) {
		lua_pushfstring(L, "x_root: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "x_root: Unknown exception");
	}

	return dub::error(L);
}

/** int Fl_Window::y_root() const
 * inc/Fl_Window.h:586
 */
static int Fl_Lua_Double_Window_y_root(lua_State *L) {
	try {
		Fl_Lua_Double_Window *self = *((Fl_Lua_Double_Window **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Double_Window"));
		lua_pushnumber(L, self->y_root());
		return 1;
	} catch (std::exception &e) {
		lua_pushfstring(L, "y_root: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "y_root: Unknown exception");
	}

	return dub::error(L);
}

/** void Fl_Window::make_current()
 * inc/Fl_Window.h:598
 */
static int Fl_Lua_Double_Window_make_current(lua_State *L) {
	try {
		Fl_Lua_Double_Window *self = *((Fl_Lua_Double_Window **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Double_Window"));
		self->make_current();
		return 0;
	} catch (std::exception &e) {
		lua_pushfstring(L, "make_current: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "make_current: Unknown exception");
	}

	return dub::error(L);
}

/** virtual Fl_Window* Fl_Window::as_window()
 * inc/Fl_Window.h:601
 */
static int Fl_Lua_Double_Window_as_window(lua_State *L) {
	try {
		Fl_Lua_Double_Window *self = *((Fl_Lua_Double_Window **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Double_Window"));
		Fl_Window *retval__ = self->as_window();

		if (!retval__) return 0;

		dub::pushudata(L, retval__, "FLTK.Fl_Window", false);
		return 1;
	} catch (std::exception &e) {
		lua_pushfstring(L, "as_window: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "as_window: Unknown exception");
	}

	return dub::error(L);
}

/** void Fl_Window::default_cursor(Fl_Cursor)
 * inc/Fl_Window.h:615
 */
static int Fl_Lua_Double_Window_default_cursor(lua_State *L) {
	try {
		Fl_Lua_Double_Window *self = *((Fl_Lua_Double_Window **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Double_Window"));
		int top__ = lua_gettop(L);

		if (top__ >= 4) {
			Fl_Cursor *c = *((Fl_Cursor **)dub::checksdata(L, 2, "Fl_Cursor"));
			int p2 = dub::checkinteger(L, 3);
			int p3 = dub::checkinteger(L, 4);
			self->default_cursor(*c, p2, p3);
			return 0;
		} else if (top__ >= 3) {
			Fl_Cursor *c = *((Fl_Cursor **)dub::checksdata(L, 2, "Fl_Cursor"));
			int p2 = dub::checkinteger(L, 3);
			self->default_cursor(*c, p2);
			return 0;
		} else {
			Fl_Cursor *p1 = *((Fl_Cursor **)dub::checksdata(L, 2, "Fl_Cursor"));
			self->default_cursor(*p1);
			return 0;
		}
	} catch (std::exception &e) {
		lua_pushfstring(L, "default_cursor: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "default_cursor: Unknown exception");
	}

	return dub::error(L);
}

/** int Fl_Window::decorated_w()
 * inc/Fl_Window.h:627
 */
static int Fl_Lua_Double_Window_decorated_w(lua_State *L) {
	try {
		Fl_Lua_Double_Window *self = *((Fl_Lua_Double_Window **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Double_Window"));
		lua_pushnumber(L, self->decorated_w());
		return 1;
	} catch (std::exception &e) {
		lua_pushfstring(L, "decorated_w: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "decorated_w: Unknown exception");
	}

	return dub::error(L);
}

/** int Fl_Window::decorated_h()
 * inc/Fl_Window.h:633
 */
static int Fl_Lua_Double_Window_decorated_h(lua_State *L) {
	try {
		Fl_Lua_Double_Window *self = *((Fl_Lua_Double_Window **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Double_Window"));
		lua_pushnumber(L, self->decorated_h());
		return 1;
	} catch (std::exception &e) {
		lua_pushfstring(L, "decorated_h: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "decorated_h: Unknown exception");
	}

	return dub::error(L);
}

/** void Fl_Group::begin()
 * inc/Fl_Group.h:67
 */
static int Fl_Lua_Double_Window_begin(lua_State *L) {
	try {
		Fl_Lua_Double_Window *self = *((Fl_Lua_Double_Window **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Double_Window"));
		self->begin();
		return 0;
	} catch (std::exception &e) {
		lua_pushfstring(L, "begin: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "begin: Unknown exception");
	}

	return dub::error(L);
}

/** void Fl_Group::end()
 * inc/Fl_Group.h:68
 */
static int Fl_Lua_Double_Window_end(lua_State *L) {
	try {
		Fl_Lua_Double_Window *self = *((Fl_Lua_Double_Window **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Double_Window"));
		self->end();
		return 0;
	} catch (std::exception &e) {
		lua_pushfstring(L, "end: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "end: Unknown exception");
	}

	return dub::error(L);
}

/** int Fl_Group::children() const
 * inc/Fl_Group.h:75
 */
static int Fl_Lua_Double_Window_children(lua_State *L) {
	try {
		Fl_Lua_Double_Window *self = *((Fl_Lua_Double_Window **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Double_Window"));
		lua_pushnumber(L, self->children());
		return 1;
	} catch (std::exception &e) {
		lua_pushfstring(L, "children: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "children: Unknown exception");
	}

	return dub::error(L);
}

/** Fl_Widget* Fl_Group::child(int n) const
 * inc/Fl_Group.h:79
 */
static int Fl_Lua_Double_Window_child(lua_State *L) {
	try {
		Fl_Lua_Double_Window *self = *((Fl_Lua_Double_Window **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Double_Window"));
		int n = dub::checkinteger(L, 2);
		Fl_Widget *retval__ = self->child(n);

		if (!retval__) return 0;

		dub::pushudata(L, retval__, "FLTK.Fl_Widget", false);
		return 1;
	} catch (std::exception &e) {
		lua_pushfstring(L, "child: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "child: Unknown exception");
	}

	return dub::error(L);
}

/** int Fl_Group::find(const Fl_Widget *) const
 * inc/Fl_Group.h:80
 */
static int Fl_Lua_Double_Window_find(lua_State *L) {
	try {
		Fl_Lua_Double_Window *self = *((Fl_Lua_Double_Window **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Double_Window"));
		Fl_Widget *p1 = *((Fl_Widget **)dub::checksdata(L, 2, "FLTK.Fl_Widget"));
		lua_pushnumber(L, self->find(p1));
		return 1;
	} catch (std::exception &e) {
		lua_pushfstring(L, "find: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "find: Unknown exception");
	}

	return dub::error(L);
}

/** void Fl_Group::add(Fl_Widget &)
 * inc/Fl_Group.h:94
 */
static int Fl_Lua_Double_Window_add(lua_State *L) {
	try {
		Fl_Lua_Double_Window *self = *((Fl_Lua_Double_Window **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Double_Window"));
		Fl_Widget *p1 = *((Fl_Widget **)dub::checksdata(L, 2, "FLTK.Fl_Widget"));
		self->add(*p1);
		return 0;
	} catch (std::exception &e) {
		lua_pushfstring(L, "add: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "add: Unknown exception");
	}

	return dub::error(L);
}

/** void Fl_Group::insert(Fl_Widget &, int i)
 * inc/Fl_Group.h:99
 */
static int Fl_Lua_Double_Window_insert(lua_State *L) {
	try {
		Fl_Lua_Double_Window *self = *((Fl_Lua_Double_Window **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Double_Window"));
		int type__ = lua_type(L, 3);

		if (type__ == LUA_TNUMBER) {
			Fl_Widget *p1 = *((Fl_Widget **)dub::checksdata(L, 2, "FLTK.Fl_Widget"));
			int i = dub::checkinteger(L, 3);
			self->insert(*p1, i);
			return 0;
		} else {
			Fl_Widget *o = *((Fl_Widget **)dub::checksdata(L, 2, "FLTK.Fl_Widget"));
			Fl_Widget *before = *((Fl_Widget **)dub::checksdata(L, 3, "FLTK.Fl_Widget"));
			self->insert(*o, before);
			return 0;
		}
	} catch (std::exception &e) {
		lua_pushfstring(L, "insert: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "insert: Unknown exception");
	}

	return dub::error(L);
}

/** void Fl_Group::remove(int index)
 * inc/Fl_Group.h:105
 */
static int Fl_Lua_Double_Window_remove(lua_State *L) {
	try {
		Fl_Lua_Double_Window *self = *((Fl_Lua_Double_Window **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Double_Window"));
		int type__ = lua_type(L, 2);

		if (type__ == LUA_TNUMBER) {
			int index = dub::checkinteger(L, 2);
			self->remove(index);
			return 0;
		} else {
			Fl_Widget *p1 = *((Fl_Widget **)dub::checksdata(L, 2, "FLTK.Fl_Widget"));
			self->remove(*p1);
			return 0;
		}
	} catch (std::exception &e) {
		lua_pushfstring(L, "remove: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "remove: Unknown exception");
	}

	return dub::error(L);
}

/** void Fl_Group::clear()
 * inc/Fl_Group.h:112
 */
static int Fl_Lua_Double_Window_clear(lua_State *L) {
	try {
		Fl_Lua_Double_Window *self = *((Fl_Lua_Double_Window **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Double_Window"));
		self->clear();
		return 0;
	} catch (std::exception &e) {
		lua_pushfstring(L, "clear: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "clear: Unknown exception");
	}

	return dub::error(L);
}

/** void Fl_Group::resizable(Fl_Widget &o)
 * inc/Fl_Group.h:117
 */
static int Fl_Lua_Double_Window_resizable(lua_State *L) {
	try {
		Fl_Lua_Double_Window *self = *((Fl_Lua_Double_Window **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Double_Window"));
		int top__ = lua_gettop(L);

		if (top__ >= 2) {
			Fl_Widget *o = *((Fl_Widget **)dub::checksdata(L, 2, "FLTK.Fl_Widget"));
			self->resizable(*o);
			return 0;
		} else {
			Fl_Widget *retval__ = self->resizable();

			if (!retval__) return 0;

			dub::pushudata(L, retval__, "FLTK.Fl_Widget", false);
			return 1;
		}
	} catch (std::exception &e) {
		lua_pushfstring(L, "resizable: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "resizable: Unknown exception");
	}

	return dub::error(L);
}

/** void Fl_Group::add_resizable(Fl_Widget &o)
 * inc/Fl_Group.h:154
 */
static int Fl_Lua_Double_Window_add_resizable(lua_State *L) {
	try {
		Fl_Lua_Double_Window *self = *((Fl_Lua_Double_Window **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Double_Window"));
		Fl_Widget *o = *((Fl_Widget **)dub::checksdata(L, 2, "FLTK.Fl_Widget"));
		self->add_resizable(*o);
		return 0;
	} catch (std::exception &e) {
		lua_pushfstring(L, "add_resizable: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "add_resizable: Unknown exception");
	}

	return dub::error(L);
}

/** void Fl_Group::init_sizes()
 * inc/Fl_Group.h:155
 */
static int Fl_Lua_Double_Window_init_sizes(lua_State *L) {
	try {
		Fl_Lua_Double_Window *self = *((Fl_Lua_Double_Window **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Double_Window"));
		self->init_sizes();
		return 0;
	} catch (std::exception &e) {
		lua_pushfstring(L, "init_sizes: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "init_sizes: Unknown exception");
	}

	return dub::error(L);
}

/** void Fl_Group::clip_children(int c)
 * inc/Fl_Group.h:166
 */
static int Fl_Lua_Double_Window_clip_children(lua_State *L) {
	try {
		Fl_Lua_Double_Window *self = *((Fl_Lua_Double_Window **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Double_Window"));
		int top__ = lua_gettop(L);

		if (top__ >= 2) {
			int c = dub::checkinteger(L, 2);
			self->clip_children(c);
			return 0;
		} else {
			lua_pushnumber(L, self->clip_children());
			return 1;
		}
	} catch (std::exception &e) {
		lua_pushfstring(L, "clip_children: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "clip_children: Unknown exception");
	}

	return dub::error(L);
}

/** virtual Fl_Group* Fl_Group::as_group()
 * inc/Fl_Group.h:177
 */
static int Fl_Lua_Double_Window_as_group(lua_State *L) {
	try {
		Fl_Lua_Double_Window *self = *((Fl_Lua_Double_Window **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Double_Window"));
		Fl_Group *retval__ = self->as_group();

		if (!retval__) return 0;

		dub::pushudata(L, retval__, "FLTK.Fl_Group", false);
		return 1;
	} catch (std::exception &e) {
		lua_pushfstring(L, "as_group: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "as_group: Unknown exception");
	}

	return dub::error(L);
}

/** void Fl_Group::focus(Fl_Widget *W)
 * inc/Fl_Group.h:186
 */
static int Fl_Lua_Double_Window_focus(lua_State *L) {
	try {
		Fl_Lua_Double_Window *self = *((Fl_Lua_Double_Window **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Double_Window"));
		Fl_Widget *W = *((Fl_Widget **)dub::checksdata(L, 2, "FLTK.Fl_Widget"));
		self->focus(W);
		return 0;
	} catch (std::exception &e) {
		lua_pushfstring(L, "focus: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "focus: Unknown exception");
	}

	return dub::error(L);
}

/** Fl_Group* Fl_Widget::parent() const
 * inc/Fl_Widget.h:243
 */
static int Fl_Lua_Double_Window_parent(lua_State *L) {
	try {
		Fl_Lua_Double_Window *self = *((Fl_Lua_Double_Window **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Double_Window"));
		int top__ = lua_gettop(L);

		if (top__ >= 2) {
			Fl_Group *p = *((Fl_Group **)dub::checksdata(L, 2, "FLTK.Fl_Group"));
			self->parent(p);
			return 0;
		} else {
			Fl_Group *retval__ = self->parent();

			if (!retval__) return 0;

			dub::pushudata(L, retval__, "FLTK.Fl_Group", false);
			return 1;
		}
	} catch (std::exception &e) {
		lua_pushfstring(L, "parent: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "parent: Unknown exception");
	}

	return dub::error(L);
}

/** unsigned char Fl_Widget::type() const
 * inc/Fl_Widget.h:263
 */
static int Fl_Lua_Double_Window_type(lua_State *L) {
	try {
		Fl_Lua_Double_Window *self = *((Fl_Lua_Double_Window **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Double_Window"));
		int top__ = lua_gettop(L);

		if (top__ >= 2) {
			unsigned char t = dub::checkinteger(L, 2);
			self->type(t);
			return 0;
		} else {
			lua_pushnumber(L, self->type());
			return 1;
		}
	} catch (std::exception &e) {
		lua_pushfstring(L, "type: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "type: Unknown exception");
	}

	return dub::error(L);
}

/** int Fl_Widget::x() const
 * inc/Fl_Widget.h:273
 */
static int Fl_Lua_Double_Window_x(lua_State *L) {
	try {
		Fl_Lua_Double_Window *self = *((Fl_Lua_Double_Window **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Double_Window"));
		lua_pushnumber(L, self->x());
		return 1;
	} catch (std::exception &e) {
		lua_pushfstring(L, "x: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "x: Unknown exception");
	}

	return dub::error(L);
}

/** int Fl_Widget::y() const
 * inc/Fl_Widget.h:278
 */
static int Fl_Lua_Double_Window_y(lua_State *L) {
	try {
		Fl_Lua_Double_Window *self = *((Fl_Lua_Double_Window **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Double_Window"));
		lua_pushnumber(L, self->y());
		return 1;
	} catch (std::exception &e) {
		lua_pushfstring(L, "y: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "y: Unknown exception");
	}

	return dub::error(L);
}

/** int Fl_Widget::w() const
 * inc/Fl_Widget.h:283
 */
static int Fl_Lua_Double_Window_w(lua_State *L) {
	try {
		Fl_Lua_Double_Window *self = *((Fl_Lua_Double_Window **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Double_Window"));
		lua_pushnumber(L, self->w());
		return 1;
	} catch (std::exception &e) {
		lua_pushfstring(L, "w: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "w: Unknown exception");
	}

	return dub::error(L);
}

/** int Fl_Widget::h() const
 * inc/Fl_Widget.h:288
 */
static int Fl_Lua_Double_Window_h(lua_State *L) {
	try {
		Fl_Lua_Double_Window *self = *((Fl_Lua_Double_Window **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Double_Window"));
		lua_pushnumber(L, self->h());
		return 1;
	} catch (std::exception &e) {
		lua_pushfstring(L, "h: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "h: Unknown exception");
	}

	return dub::error(L);
}

/** int Fl_Widget::damage_resize(int, int, int, int)
 * inc/Fl_Widget.h:312
 */
static int Fl_Lua_Double_Window_damage_resize(lua_State *L) {
	try {
		Fl_Lua_Double_Window *self = *((Fl_Lua_Double_Window **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Double_Window"));
		int p1 = dub::checkinteger(L, 2);
		int p2 = dub::checkinteger(L, 3);
		int p3 = dub::checkinteger(L, 4);
		int p4 = dub::checkinteger(L, 5);
		lua_pushnumber(L, self->damage_resize(p1, p2, p3, p4));
		return 1;
	} catch (std::exception &e) {
		lua_pushfstring(L, "damage_resize: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "damage_resize: Unknown exception");
	}

	return dub::error(L);
}

/** void Fl_Widget::position(int X, int Y)
 * inc/Fl_Widget.h:321
 */
static int Fl_Lua_Double_Window_position(lua_State *L) {
	try {
		Fl_Lua_Double_Window *self = *((Fl_Lua_Double_Window **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Double_Window"));
		int X = dub::checkinteger(L, 2);
		int Y = dub::checkinteger(L, 3);
		self->position(X, Y);
		return 0;
	} catch (std::exception &e) {
		lua_pushfstring(L, "position: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "position: Unknown exception");
	}

	return dub::error(L);
}

/** void Fl_Widget::size(int W, int H)
 * inc/Fl_Widget.h:330
 */
static int Fl_Lua_Double_Window_size(lua_State *L) {
	try {
		Fl_Lua_Double_Window *self = *((Fl_Lua_Double_Window **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Double_Window"));
		int W = dub::checkinteger(L, 2);
		int H = dub::checkinteger(L, 3);
		self->size(W, H);
		return 0;
	} catch (std::exception &e) {
		lua_pushfstring(L, "size: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "size: Unknown exception");
	}

	return dub::error(L);
}

/** int Fl_Widget::align() const
 * inc/Fl_Widget.h:337
 */
static int Fl_Lua_Double_Window_align(lua_State *L) {
	try {
		Fl_Lua_Double_Window *self = *((Fl_Lua_Double_Window **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Double_Window"));
		int top__ = lua_gettop(L);

		if (top__ >= 2) {
			int alignment = dub::checkinteger(L, 2);
			self->align(alignment);
			return 0;
		} else {
			lua_pushnumber(L, self->align());
			return 1;
		}
	} catch (std::exception &e) {
		lua_pushfstring(L, "align: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "align: Unknown exception");
	}

	return dub::error(L);
}

/** int Fl_Widget::box() const
 * inc/Fl_Widget.h:352
 */
static int Fl_Lua_Double_Window_box(lua_State *L) {
	try {
		Fl_Lua_Double_Window *self = *((Fl_Lua_Double_Window **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Double_Window"));
		int top__ = lua_gettop(L);

		if (top__ >= 2) {
			int new_box = dub::checkinteger(L, 2);
			self->box((Fl_Boxtype)new_box);
			return 0;
		} else {
			lua_pushnumber(L, self->box());
			return 1;
		}
	} catch (std::exception &e) {
		lua_pushfstring(L, "box: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "box: Unknown exception");
	}

	return dub::error(L);
}

/** int Fl_Widget::color() const
 * inc/Fl_Widget.h:367
 */
static int Fl_Lua_Double_Window_color(lua_State *L) {
	try {
		Fl_Lua_Double_Window *self = *((Fl_Lua_Double_Window **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Double_Window"));
		int top__ = lua_gettop(L);

		if (top__ >= 3) {
			int bg = dub::checkinteger(L, 2);
			int sel = dub::checkinteger(L, 3);
			self->color(bg, sel);
			return 0;
		} else if (top__ >= 2) {
			int bg = dub::checkinteger(L, 2);
			self->color(bg);
			return 0;
		} else {
			lua_pushnumber(L, self->color());
			return 1;
		}
	} catch (std::exception &e) {
		lua_pushfstring(L, "color: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "color: Unknown exception");
	}

	return dub::error(L);
}

/** int Fl_Widget::selection_color() const
 * inc/Fl_Widget.h:385
 */
static int Fl_Lua_Double_Window_selection_color(lua_State *L) {
	try {
		Fl_Lua_Double_Window *self = *((Fl_Lua_Double_Window **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Double_Window"));
		int top__ = lua_gettop(L);

		if (top__ >= 2) {
			int a = dub::checkinteger(L, 2);
			self->selection_color(a);
			return 0;
		} else {
			lua_pushnumber(L, self->selection_color());
			return 1;
		}
	} catch (std::exception &e) {
		lua_pushfstring(L, "selection_color: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "selection_color: Unknown exception");
	}

	return dub::error(L);
}

/** Fl_Labeltype Fl_Widget::labeltype() const
 * inc/Fl_Widget.h:445
 */
static int Fl_Lua_Double_Window_labeltype(lua_State *L) {
	try {
		Fl_Lua_Double_Window *self = *((Fl_Lua_Double_Window **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Double_Window"));
		int top__ = lua_gettop(L);

		if (top__ >= 2) {
			Fl_Labeltype a = (Fl_Labeltype)dub::checkinteger(L, 2);
			self->labeltype(a);
			return 0;
		} else {
			lua_pushnumber(L, self->labeltype());
			return 1;
		}
	} catch (std::exception &e) {
		lua_pushfstring(L, "labeltype: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "labeltype: Unknown exception");
	}

	return dub::error(L);
}

/** int Fl_Widget::labelcolor() const
 * inc/Fl_Widget.h:461
 */
static int Fl_Lua_Double_Window_labelcolor(lua_State *L) {
	try {
		Fl_Lua_Double_Window *self = *((Fl_Lua_Double_Window **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Double_Window"));
		int top__ = lua_gettop(L);

		if (top__ >= 2) {
			int c = dub::checkinteger(L, 2);
			self->labelcolor(c);
			return 0;
		} else {
			lua_pushnumber(L, self->labelcolor());
			return 1;
		}
	} catch (std::exception &e) {
		lua_pushfstring(L, "labelcolor: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "labelcolor: Unknown exception");
	}

	return dub::error(L);
}

/** int Fl_Widget::labelfont() const
 * inc/Fl_Widget.h:476
 */
static int Fl_Lua_Double_Window_labelfont(lua_State *L) {
	try {
		Fl_Lua_Double_Window *self = *((Fl_Lua_Double_Window **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Double_Window"));
		int top__ = lua_gettop(L);

		if (top__ >= 2) {
			int f = dub::checkinteger(L, 2);
			self->labelfont(f);
			return 0;
		} else {
			lua_pushnumber(L, self->labelfont());
			return 1;
		}
	} catch (std::exception &e) {
		lua_pushfstring(L, "labelfont: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "labelfont: Unknown exception");
	}

	return dub::error(L);
}

/** int Fl_Widget::labelsize() const
 * inc/Fl_Widget.h:491
 */
static int Fl_Lua_Double_Window_labelsize(lua_State *L) {
	try {
		Fl_Lua_Double_Window *self = *((Fl_Lua_Double_Window **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Double_Window"));
		int top__ = lua_gettop(L);

		if (top__ >= 2) {
			int pix = dub::checkinteger(L, 2);
			self->labelsize(pix);
			return 0;
		} else {
			lua_pushnumber(L, self->labelsize());
			return 1;
		}
	} catch (std::exception &e) {
		lua_pushfstring(L, "labelsize: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "labelsize: Unknown exception");
	}

	return dub::error(L);
}

/** Fl_Image* Fl_Widget::image()
 * inc/Fl_Widget.h:503
 */
static int Fl_Lua_Double_Window_image(lua_State *L) {
	try {
		Fl_Lua_Double_Window *self = *((Fl_Lua_Double_Window **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Double_Window"));
		int top__ = lua_gettop(L);

		if (top__ >= 2) {
			Fl_Image *img = *((Fl_Image **)dub::checksdata(L, 2, "FLTK.Fl_Image"));
			self->image(img);
			return 0;
		} else {
			Fl_Image *retval__ = self->image();

			if (!retval__) return 0;

			dub::pushudata(L, retval__, "FLTK.Fl_Image", false);
			return 1;
		}
	} catch (std::exception &e) {
		lua_pushfstring(L, "image: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "image: Unknown exception");
	}

	return dub::error(L);
}

/** Fl_Image* Fl_Widget::deimage()
 * inc/Fl_Widget.h:522
 */
static int Fl_Lua_Double_Window_deimage(lua_State *L) {
	try {
		Fl_Lua_Double_Window *self = *((Fl_Lua_Double_Window **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Double_Window"));
		int top__ = lua_gettop(L);

		if (top__ >= 2) {
			Fl_Image *img = *((Fl_Image **)dub::checksdata(L, 2, "FLTK.Fl_Image"));
			self->deimage(img);
			return 0;
		} else {
			Fl_Image *retval__ = self->deimage();

			if (!retval__) return 0;

			dub::pushudata(L, retval__, "FLTK.Fl_Image", false);
			return 1;
		}
	} catch (std::exception &e) {
		lua_pushfstring(L, "deimage: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "deimage: Unknown exception");
	}

	return dub::error(L);
}

/** const char* Fl_Widget::tooltip() const
 * inc/Fl_Widget.h:541
 */
static int Fl_Lua_Double_Window_tooltip(lua_State *L) {
	try {
		Fl_Lua_Double_Window *self = *((Fl_Lua_Double_Window **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Double_Window"));
		int top__ = lua_gettop(L);

		if (top__ >= 2) {
			const char *text = dub::checkstring(L, 2);
			self->tooltip(text);
			return 0;
		} else {
			lua_pushstring(L, self->tooltip());
			return 1;
		}
	} catch (std::exception &e) {
		lua_pushfstring(L, "tooltip: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "tooltip: Unknown exception");
	}

	return dub::error(L);
}

/** void Fl_Widget::copy_tooltip(const char *text)
 * inc/Fl_Widget.h:544
 */
static int Fl_Lua_Double_Window_copy_tooltip(lua_State *L) {
	try {
		Fl_Lua_Double_Window *self = *((Fl_Lua_Double_Window **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Double_Window"));
		const char *text = dub::checkstring(L, 2);
		self->copy_tooltip(text);
		return 0;
	} catch (std::exception &e) {
		lua_pushfstring(L, "copy_tooltip: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "copy_tooltip: Unknown exception");
	}

	return dub::error(L);
}

/** Fl_Callback_p Fl_Widget::callback() const
 * inc/Fl_Widget.h:550
 */
static int Fl_Lua_Double_Window_callback(lua_State *L) {
	try {
		Fl_Lua_Double_Window *self = *((Fl_Lua_Double_Window **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Double_Window"));
		int top__ = lua_gettop(L);

		if (top__ >= 3) {
			self->ci.cb = strdup(luaL_checkstring(L, 2));
			self->ci.udat = luaL_checkinteger(L, 3);
			self->callback(luaWidgetCallbackHelper, &self->ci);
			return 0;
		} else if (top__ >= 2) {
			self->ci.cb = strdup(luaL_checkstring(L, 2));
			self->ci.udat = 0;
			self->callback(luaWidgetCallbackHelper, &self->ci);
			return 0;
		} else {
			lua_pushstring(L, self->ci.cb);
			return 1;
		}
	} catch (std::exception &e) {
		lua_pushfstring(L, "callback: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "callback: Unknown exception");
	}

	return dub::error(L);
}

/** void* Fl_Widget::user_data() const
 * inc/Fl_Widget.h:582
 */
static int Fl_Lua_Double_Window_user_data(lua_State *L) {
	try {
		Fl_Lua_Double_Window *self = *((Fl_Lua_Double_Window **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Double_Window"));
		int top__ = lua_gettop(L);

		if (top__ >= 2) {
			void *v = *((void **)dub::checksdata(L, 2, "void"));
			self->user_data(v);
			return 0;
		} else {
			self->user_data();
			return 0;
		}
	} catch (std::exception &e) {
		lua_pushfstring(L, "user_data: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "user_data: Unknown exception");
	}

	return dub::error(L);
}

/** long Fl_Widget::argument() const
 * inc/Fl_Widget.h:592
 */
static int Fl_Lua_Double_Window_argument(lua_State *L) {
	try {
		Fl_Lua_Double_Window *self = *((Fl_Lua_Double_Window **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Double_Window"));
		int top__ = lua_gettop(L);

		if (top__ >= 2) {
			long *v = *((long **)dub::checksdata(L, 2, "long"));
			self->argument(*v);
			return 0;
		} else {
			dub::pushudata(L, new long(self->argument()), "long", true);
			return 1;
		}
	} catch (std::exception &e) {
		lua_pushfstring(L, "argument: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "argument: Unknown exception");
	}

	return dub::error(L);
}

/** Fl_When Fl_Widget::when() const
 * inc/Fl_Widget.h:608
 */
static int Fl_Lua_Double_Window_when(lua_State *L) {
	try {
		Fl_Lua_Double_Window *self = *((Fl_Lua_Double_Window **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Double_Window"));
		int top__ = lua_gettop(L);

		if (top__ >= 2) {
			unsigned char i = dub::checkinteger(L, 2);
			self->when(i);
			return 0;
		} else {
			dub::pushudata(L, new Fl_When(self->when()), "Fl_When", true);
			return 1;
		}
	} catch (std::exception &e) {
		lua_pushfstring(L, "when: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "when: Unknown exception");
	}

	return dub::error(L);
}

/** unsigned int Fl_Widget::visible() const
 * inc/Fl_Widget.h:647
 */
static int Fl_Lua_Double_Window_visible(lua_State *L) {
	try {
		Fl_Lua_Double_Window *self = *((Fl_Lua_Double_Window **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Double_Window"));
		lua_pushnumber(L, self->visible());
		return 1;
	} catch (std::exception &e) {
		lua_pushfstring(L, "visible: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "visible: Unknown exception");
	}

	return dub::error(L);
}

/** int Fl_Widget::visible_r() const
 * inc/Fl_Widget.h:653
 */
static int Fl_Lua_Double_Window_visible_r(lua_State *L) {
	try {
		Fl_Lua_Double_Window *self = *((Fl_Lua_Double_Window **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Double_Window"));
		lua_pushnumber(L, self->visible_r());
		return 1;
	} catch (std::exception &e) {
		lua_pushfstring(L, "visible_r: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "visible_r: Unknown exception");
	}

	return dub::error(L);
}

/** void Fl_Widget::set_visible()
 * inc/Fl_Widget.h:683
 */
static int Fl_Lua_Double_Window_set_visible(lua_State *L) {
	try {
		Fl_Lua_Double_Window *self = *((Fl_Lua_Double_Window **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Double_Window"));
		self->set_visible();
		return 0;
	} catch (std::exception &e) {
		lua_pushfstring(L, "set_visible: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "set_visible: Unknown exception");
	}

	return dub::error(L);
}

/** void Fl_Widget::clear_visible()
 * inc/Fl_Widget.h:689
 */
static int Fl_Lua_Double_Window_clear_visible(lua_State *L) {
	try {
		Fl_Lua_Double_Window *self = *((Fl_Lua_Double_Window **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Double_Window"));
		self->clear_visible();
		return 0;
	} catch (std::exception &e) {
		lua_pushfstring(L, "clear_visible: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "clear_visible: Unknown exception");
	}

	return dub::error(L);
}

/** unsigned int Fl_Widget::active() const
 * inc/Fl_Widget.h:695
 */
static int Fl_Lua_Double_Window_active(lua_State *L) {
	try {
		Fl_Lua_Double_Window *self = *((Fl_Lua_Double_Window **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Double_Window"));
		lua_pushnumber(L, self->active());
		return 1;
	} catch (std::exception &e) {
		lua_pushfstring(L, "active: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "active: Unknown exception");
	}

	return dub::error(L);
}

/** int Fl_Widget::active_r() const
 * inc/Fl_Widget.h:701
 */
static int Fl_Lua_Double_Window_active_r(lua_State *L) {
	try {
		Fl_Lua_Double_Window *self = *((Fl_Lua_Double_Window **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Double_Window"));
		lua_pushnumber(L, self->active_r());
		return 1;
	} catch (std::exception &e) {
		lua_pushfstring(L, "active_r: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "active_r: Unknown exception");
	}

	return dub::error(L);
}

/** void Fl_Widget::activate()
 * inc/Fl_Widget.h:708
 */
static int Fl_Lua_Double_Window_activate(lua_State *L) {
	try {
		Fl_Lua_Double_Window *self = *((Fl_Lua_Double_Window **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Double_Window"));
		self->activate();
		return 0;
	} catch (std::exception &e) {
		lua_pushfstring(L, "activate: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "activate: Unknown exception");
	}

	return dub::error(L);
}

/** void Fl_Widget::deactivate()
 * inc/Fl_Widget.h:724
 */
static int Fl_Lua_Double_Window_deactivate(lua_State *L) {
	try {
		Fl_Lua_Double_Window *self = *((Fl_Lua_Double_Window **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Double_Window"));
		self->deactivate();
		return 0;
	} catch (std::exception &e) {
		lua_pushfstring(L, "deactivate: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "deactivate: Unknown exception");
	}

	return dub::error(L);
}

/** unsigned int Fl_Widget::output() const
 * inc/Fl_Widget.h:734
 */
static int Fl_Lua_Double_Window_output(lua_State *L) {
	try {
		Fl_Lua_Double_Window *self = *((Fl_Lua_Double_Window **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Double_Window"));
		lua_pushnumber(L, self->output());
		return 1;
	} catch (std::exception &e) {
		lua_pushfstring(L, "output: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "output: Unknown exception");
	}

	return dub::error(L);
}

/** void Fl_Widget::set_output()
 * inc/Fl_Widget.h:739
 */
static int Fl_Lua_Double_Window_set_output(lua_State *L) {
	try {
		Fl_Lua_Double_Window *self = *((Fl_Lua_Double_Window **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Double_Window"));
		self->set_output();
		return 0;
	} catch (std::exception &e) {
		lua_pushfstring(L, "set_output: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "set_output: Unknown exception");
	}

	return dub::error(L);
}

/** void Fl_Widget::clear_output()
 * inc/Fl_Widget.h:744
 */
static int Fl_Lua_Double_Window_clear_output(lua_State *L) {
	try {
		Fl_Lua_Double_Window *self = *((Fl_Lua_Double_Window **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Double_Window"));
		self->clear_output();
		return 0;
	} catch (std::exception &e) {
		lua_pushfstring(L, "clear_output: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "clear_output: Unknown exception");
	}

	return dub::error(L);
}

/** unsigned int Fl_Widget::takesevents() const
 * inc/Fl_Widget.h:751
 */
static int Fl_Lua_Double_Window_takesevents(lua_State *L) {
	try {
		Fl_Lua_Double_Window *self = *((Fl_Lua_Double_Window **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Double_Window"));
		lua_pushnumber(L, self->takesevents());
		return 1;
	} catch (std::exception &e) {
		lua_pushfstring(L, "takesevents: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "takesevents: Unknown exception");
	}

	return dub::error(L);
}

/** unsigned int Fl_Widget::changed() const
 * inc/Fl_Widget.h:768
 */
static int Fl_Lua_Double_Window_changed(lua_State *L) {
	try {
		Fl_Lua_Double_Window *self = *((Fl_Lua_Double_Window **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Double_Window"));
		lua_pushnumber(L, self->changed());
		return 1;
	} catch (std::exception &e) {
		lua_pushfstring(L, "changed: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "changed: Unknown exception");
	}

	return dub::error(L);
}

/** void Fl_Widget::set_changed()
 * inc/Fl_Widget.h:773
 */
static int Fl_Lua_Double_Window_set_changed(lua_State *L) {
	try {
		Fl_Lua_Double_Window *self = *((Fl_Lua_Double_Window **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Double_Window"));
		self->set_changed();
		return 0;
	} catch (std::exception &e) {
		lua_pushfstring(L, "set_changed: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "set_changed: Unknown exception");
	}

	return dub::error(L);
}

/** void Fl_Widget::clear_changed()
 * inc/Fl_Widget.h:778
 */
static int Fl_Lua_Double_Window_clear_changed(lua_State *L) {
	try {
		Fl_Lua_Double_Window *self = *((Fl_Lua_Double_Window **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Double_Window"));
		self->clear_changed();
		return 0;
	} catch (std::exception &e) {
		lua_pushfstring(L, "clear_changed: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "clear_changed: Unknown exception");
	}

	return dub::error(L);
}

/** void Fl_Widget::clear_active()
 * inc/Fl_Widget.h:784
 */
#if (FL_MAJOR_VERSION>=1 && FL_MINOR_VERSION>=3 && FL_PATCH_VERSION>=3)
static int Fl_Lua_Double_Window_clear_active(lua_State *L) {
	try {
		Fl_Lua_Double_Window *self = *((Fl_Lua_Double_Window **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Double_Window"));
		self->clear_active();
		return 0;
	} catch (std::exception &e) {
		lua_pushfstring(L, "clear_active: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "clear_active: Unknown exception");
	}

	return dub::error(L);
}
#endif

/** void Fl_Widget::set_active()
 * inc/Fl_Widget.h:790
 */
#if (FL_MAJOR_VERSION>=1 && FL_MINOR_VERSION>=3 && FL_PATCH_VERSION>=3)
static int Fl_Lua_Double_Window_set_active(lua_State *L) {
	try {
		Fl_Lua_Double_Window *self = *((Fl_Lua_Double_Window **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Double_Window"));
		self->set_active();
		return 0;
	} catch (std::exception &e) {
		lua_pushfstring(L, "set_active: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "set_active: Unknown exception");
	}

	return dub::error(L);
}
#endif

/** int Fl_Widget::take_focus()
 * inc/Fl_Widget.h:799
 */
static int Fl_Lua_Double_Window_take_focus(lua_State *L) {
	try {
		Fl_Lua_Double_Window *self = *((Fl_Lua_Double_Window **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Double_Window"));
		lua_pushnumber(L, self->take_focus());
		return 1;
	} catch (std::exception &e) {
		lua_pushfstring(L, "take_focus: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "take_focus: Unknown exception");
	}

	return dub::error(L);
}

/** void Fl_Widget::set_visible_focus()
 * inc/Fl_Widget.h:807
 */
static int Fl_Lua_Double_Window_set_visible_focus(lua_State *L) {
	try {
		Fl_Lua_Double_Window *self = *((Fl_Lua_Double_Window **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Double_Window"));
		self->set_visible_focus();
		return 0;
	} catch (std::exception &e) {
		lua_pushfstring(L, "set_visible_focus: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "set_visible_focus: Unknown exception");
	}

	return dub::error(L);
}

/** void Fl_Widget::clear_visible_focus()
 * inc/Fl_Widget.h:813
 */
static int Fl_Lua_Double_Window_clear_visible_focus(lua_State *L) {
	try {
		Fl_Lua_Double_Window *self = *((Fl_Lua_Double_Window **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Double_Window"));
		self->clear_visible_focus();
		return 0;
	} catch (std::exception &e) {
		lua_pushfstring(L, "clear_visible_focus: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "clear_visible_focus: Unknown exception");
	}

	return dub::error(L);
}

/** void Fl_Widget::visible_focus(int v)
 * inc/Fl_Widget.h:819
 */
static int Fl_Lua_Double_Window_visible_focus(lua_State *L) {
	try {
		Fl_Lua_Double_Window *self = *((Fl_Lua_Double_Window **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Double_Window"));
		int top__ = lua_gettop(L);

		if (top__ >= 2) {
			int v = dub::checkinteger(L, 2);
			self->visible_focus(v);
			return 0;
		} else {
			lua_pushnumber(L, self->visible_focus());
			return 1;
		}
	} catch (std::exception &e) {
		lua_pushfstring(L, "visible_focus: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "visible_focus: Unknown exception");
	}

	return dub::error(L);
}

/** void Fl_Widget::do_callback()
 * inc/Fl_Widget.h:840
 */
static int Fl_Lua_Double_Window_do_callback(lua_State *L) {
	try {
		Fl_Lua_Double_Window *self = *((Fl_Lua_Double_Window **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Double_Window"));
		int top__ = lua_gettop(L);

		if (top__ >= 3) {
			int type__ = lua_type(L, 3);
			void **ptr3__;

			if ( (ptr3__ = dub::issdata(L, 3, "long", type__)) ) {
				Fl_Widget *o = *((Fl_Widget **)dub::checksdata(L, 2, "FLTK.Fl_Widget"));
				long *arg = *((long **)ptr3__);
				self->do_callback(o, *arg);
				return 0;
			} else {
				Fl_Widget *o = *((Fl_Widget **)dub::checksdata(L, 2, "FLTK.Fl_Widget"));
				void *arg = *((void **)dub::checksdata(L, 3, "void"));
				self->do_callback(o, arg);
				return 0;
			}
		} else if (top__ >= 2) {
			Fl_Widget *o = *((Fl_Widget **)dub::checksdata(L, 2, "FLTK.Fl_Widget"));
			self->do_callback(o);
			return 0;
		} else {
			self->do_callback();
			return 0;
		}
	} catch (std::exception &e) {
		lua_pushfstring(L, "do_callback: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "do_callback: Unknown exception");
	}

	return dub::error(L);
}

/** int Fl_Widget::test_shortcut()
 * inc/Fl_Widget.h:855
 */
static int Fl_Lua_Double_Window_test_shortcut(lua_State *L) {
	try {
		Fl_Lua_Double_Window *self = *((Fl_Lua_Double_Window **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Double_Window"));
		int top__ = lua_gettop(L);

		if (top__ >= 3) {
			const char *p1 = dub::checkstring(L, 2);
			const bool require_alt = dub::checkboolean(L, 3);
			lua_pushnumber(L, Fl_Lua_Double_Window::test_shortcut(p1, require_alt));
			return 1;
		} else if (top__ >= 2) {
			const char *p1 = dub::checkstring(L, 2);
			lua_pushnumber(L, Fl_Lua_Double_Window::test_shortcut(p1));
			return 1;
		} else {
			lua_pushnumber(L, self->test_shortcut());
			return 1;
		}
	} catch (std::exception &e) {
		lua_pushfstring(L, "test_shortcut: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "test_shortcut: Unknown exception");
	}

	return dub::error(L);
}

/** void Fl_Widget::_set_fullscreen()
 * inc/Fl_Widget.h:861
 */
static int Fl_Lua_Double_Window__set_fullscreen(lua_State *L) {
	try {
		Fl_Lua_Double_Window *self = *((Fl_Lua_Double_Window **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Double_Window"));
		self->_set_fullscreen();
		return 0;
	} catch (std::exception &e) {
		lua_pushfstring(L, "_set_fullscreen: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "_set_fullscreen: Unknown exception");
	}

	return dub::error(L);
}

/** void Fl_Widget::_clear_fullscreen()
 * inc/Fl_Widget.h:862
 */
static int Fl_Lua_Double_Window__clear_fullscreen(lua_State *L) {
	try {
		Fl_Lua_Double_Window *self = *((Fl_Lua_Double_Window **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Double_Window"));
		self->_clear_fullscreen();
		return 0;
	} catch (std::exception &e) {
		lua_pushfstring(L, "_clear_fullscreen: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "_clear_fullscreen: Unknown exception");
	}

	return dub::error(L);
}

/** int Fl_Widget::contains(const Fl_Widget *w) const
 * inc/Fl_Widget.h:869
 */
static int Fl_Lua_Double_Window_contains(lua_State *L) {
	try {
		Fl_Lua_Double_Window *self = *((Fl_Lua_Double_Window **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Double_Window"));
		Fl_Widget *w = *((Fl_Widget **)dub::checksdata(L, 2, "FLTK.Fl_Widget"));
		lua_pushnumber(L, self->contains(w));
		return 1;
	} catch (std::exception &e) {
		lua_pushfstring(L, "contains: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "contains: Unknown exception");
	}

	return dub::error(L);
}

/** int Fl_Widget::inside(const Fl_Widget *wgt) const
 * inc/Fl_Widget.h:877
 */
static int Fl_Lua_Double_Window_inside(lua_State *L) {
	try {
		Fl_Lua_Double_Window *self = *((Fl_Lua_Double_Window **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Double_Window"));
		Fl_Widget *wgt = *((Fl_Widget **)dub::checksdata(L, 2, "FLTK.Fl_Widget"));
		lua_pushnumber(L, self->inside(wgt));
		return 1;
	} catch (std::exception &e) {
		lua_pushfstring(L, "inside: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "inside: Unknown exception");
	}

	return dub::error(L);
}

/** void Fl_Widget::redraw()
 * inc/Fl_Widget.h:882
 */
static int Fl_Lua_Double_Window_redraw(lua_State *L) {
	try {
		Fl_Lua_Double_Window *self = *((Fl_Lua_Double_Window **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Double_Window"));
		self->redraw();
		return 0;
	} catch (std::exception &e) {
		lua_pushfstring(L, "redraw: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "redraw: Unknown exception");
	}

	return dub::error(L);
}

/** void Fl_Widget::redraw_label()
 * inc/Fl_Widget.h:888
 */
static int Fl_Lua_Double_Window_redraw_label(lua_State *L) {
	try {
		Fl_Lua_Double_Window *self = *((Fl_Lua_Double_Window **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Double_Window"));
		self->redraw_label();
		return 0;
	} catch (std::exception &e) {
		lua_pushfstring(L, "redraw_label: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "redraw_label: Unknown exception");
	}

	return dub::error(L);
}

/** unsigned char Fl_Widget::damage() const
 * inc/Fl_Widget.h:896
 */
static int Fl_Lua_Double_Window_damage(lua_State *L) {
	try {
		Fl_Lua_Double_Window *self = *((Fl_Lua_Double_Window **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Double_Window"));
		int top__ = lua_gettop(L);

		if (top__ >= 6) {
			unsigned char c = dub::checkinteger(L, 2);
			int x = dub::checkinteger(L, 3);
			int y = dub::checkinteger(L, 4);
			int w = dub::checkinteger(L, 5);
			int h = dub::checkinteger(L, 6);
			self->damage(c, x, y, w, h);
			return 0;
		} else if (top__ >= 2) {
			unsigned char c = dub::checkinteger(L, 2);
			self->damage(c);
			return 0;
		} else {
			lua_pushnumber(L, self->damage());
			return 1;
		}
	} catch (std::exception &e) {
		lua_pushfstring(L, "damage: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "damage: Unknown exception");
	}

	return dub::error(L);
}

/** void Fl_Widget::clear_damage(unsigned char c=0)
 * inc/Fl_Widget.h:910
 */
static int Fl_Lua_Double_Window_clear_damage(lua_State *L) {
	try {
		Fl_Lua_Double_Window *self = *((Fl_Lua_Double_Window **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Double_Window"));
		int top__ = lua_gettop(L);

		if (top__ >= 2) {
			unsigned char c = dub::checkinteger(L, 2);
			self->clear_damage(c);
			return 0;
		} else {
			self->clear_damage();
			return 0;
		}
	} catch (std::exception &e) {
		lua_pushfstring(L, "clear_damage: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "clear_damage: Unknown exception");
	}

	return dub::error(L);
}

/** void Fl_Widget::draw_label(int, int, int, int, int) const
 * inc/Fl_Widget.h:927
 */
static int Fl_Lua_Double_Window_draw_label(lua_State *L) {
	try {
		Fl_Lua_Double_Window *self = *((Fl_Lua_Double_Window **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Double_Window"));
		int p1 = dub::checkinteger(L, 2);
		int p2 = dub::checkinteger(L, 3);
		int p3 = dub::checkinteger(L, 4);
		int p4 = dub::checkinteger(L, 5);
		int p5 = dub::checkinteger(L, 6);
		self->draw_label(p1, p2, p3, p4, p5);
		return 0;
	} catch (std::exception &e) {
		lua_pushfstring(L, "draw_label: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "draw_label: Unknown exception");
	}

	return dub::error(L);
}

/** void Fl_Widget::measure_label(int &ww, int &hh) const
 * inc/Fl_Widget.h:936
 */
static int Fl_Lua_Double_Window_measure_label(lua_State *L) {
	try {
		Fl_Lua_Double_Window *self = *((Fl_Lua_Double_Window **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Double_Window"));
		int ww = dub::checkinteger(L, 2);
		int hh = dub::checkinteger(L, 3);
		self->measure_label(ww, hh);
		return 0;
	} catch (std::exception &e) {
		lua_pushfstring(L, "measure_label: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "measure_label: Unknown exception");
	}

	return dub::error(L);
}

/** Fl_Window* Fl_Widget::window() const
 * inc/Fl_Widget.h:938
 */
static int Fl_Lua_Double_Window_window(lua_State *L) {
	try {
		Fl_Lua_Double_Window *self = *((Fl_Lua_Double_Window **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Double_Window"));
		Fl_Window *retval__ = self->window();

		if (!retval__) return 0;

		dub::pushudata(L, retval__, "FLTK.Fl_Window", false);
		return 1;
	} catch (std::exception &e) {
		lua_pushfstring(L, "window: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "window: Unknown exception");
	}

	return dub::error(L);
}

/** Fl_Window* Fl_Widget::top_window() const
 * inc/Fl_Widget.h:939
 */
#if (FL_MAJOR_VERSION>=1 && FL_MINOR_VERSION>=3 && FL_PATCH_VERSION>=3)
static int Fl_Lua_Double_Window_top_window(lua_State *L) {
	try {
		Fl_Lua_Double_Window *self = *((Fl_Lua_Double_Window **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Double_Window"));
		Fl_Window *retval__ = self->top_window();

		if (!retval__) return 0;

		dub::pushudata(L, retval__, "FLTK.Fl_Window", false);
		return 1;
	} catch (std::exception &e) {
		lua_pushfstring(L, "top_window: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "top_window: Unknown exception");
	}

	return dub::error(L);
}
#endif

/** Fl_Window* Fl_Widget::top_window_offset(int &xoff, int &yoff) const
 * inc/Fl_Widget.h:940
 */
#if (FL_MAJOR_VERSION>=1 && FL_MINOR_VERSION>=3 && FL_PATCH_VERSION>=3)
static int Fl_Lua_Double_Window_top_window_offset(lua_State *L) {
	try {
		Fl_Lua_Double_Window *self = *((Fl_Lua_Double_Window **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Double_Window"));
		int xoff = dub::checkinteger(L, 2);
		int yoff = dub::checkinteger(L, 3);
		Fl_Window *retval__ = self->top_window_offset(xoff, yoff);

		if (!retval__) return 0;

		dub::pushudata(L, retval__, "FLTK.Fl_Window", false);
		return 1;
	} catch (std::exception &e) {
		lua_pushfstring(L, "top_window_offset: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "top_window_offset: Unknown exception");
	}

	return dub::error(L);
}
#endif

/** virtual class Fl_Gl_Window* Fl_Widget::as_gl_window()
 * inc/Fl_Widget.h:991
 */
static int Fl_Lua_Double_Window_as_gl_window(lua_State *L) {
	try {
		Fl_Lua_Double_Window *self = *((Fl_Lua_Double_Window **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Double_Window"));
		class Fl_Gl_Window *retval__ = self->as_gl_window();

		if (!retval__) return 0;

		dub::pushudata(L, retval__, "class Fl_Gl_Window", false);
		return 1;
	} catch (std::exception &e) {
		lua_pushfstring(L, "as_gl_window: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "as_gl_window: Unknown exception");
	}

	return dub::error(L);
}

/** int Fl_Widget::use_accents_menu()
 * inc/Fl_Widget.h:995
 */
#if (FL_MAJOR_VERSION>=1 && FL_MINOR_VERSION>=3 && FL_PATCH_VERSION>=3)
static int Fl_Lua_Double_Window_use_accents_menu(lua_State *L) {
	try {
		Fl_Lua_Double_Window *self = *((Fl_Lua_Double_Window **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Double_Window"));
		lua_pushnumber(L, self->use_accents_menu());
		return 1;
	} catch (std::exception &e) {
		lua_pushfstring(L, "use_accents_menu: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "use_accents_menu: Unknown exception");
	}

	return dub::error(L);
}
#endif

/** int Fl_Widget::color2() const
 * inc/Fl_Widget.h:1000
 */
static int Fl_Lua_Double_Window_color2(lua_State *L) {
	try {
		Fl_Lua_Double_Window *self = *((Fl_Lua_Double_Window **)dub::checksdata(L, 1, "FLTK.Fl_Lua_Double_Window"));
		int top__ = lua_gettop(L);

		if (top__ >= 2) {
			unsigned a = dub::checkinteger(L, 2);
			self->color2(a);
			return 0;
		} else {
			lua_pushnumber(L, self->color2());
			return 1;
		}
	} catch (std::exception &e) {
		lua_pushfstring(L, "color2: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "color2: Unknown exception");
	}

	return dub::error(L);
}



// --=============================================== __tostring
static int Fl_Lua_Double_Window___tostring(lua_State *L) {
	Fl_Lua_Double_Window *self = *((Fl_Lua_Double_Window **)dub::checksdata_n(L, 1, "FLTK.Fl_Lua_Double_Window"));
	lua_pushfstring(L, "FLTK.Fl_Lua_Double_Window: %p", self);

	return 1;
}

// --=============================================== METHODS

static const struct luaL_Reg Fl_Lua_Double_Window_member_methods[] = {
	{ "_cast_", Fl_Lua_Double_Window__cast_ },
	{ "show", Fl_Lua_Double_Window_show },
	{ "flush", Fl_Lua_Double_Window_flush },
	{ "resize", Fl_Lua_Double_Window_resize },
	{ "hide", Fl_Lua_Double_Window_hide },
	{ "__gc", Fl_Lua_Double_Window__Fl_Lua_Double_Window },
	{ "new", Fl_Lua_Double_Window_Fl_Lua_Double_Window },
#if (FL_MAJOR_VERSION>=1 && FL_MINOR_VERSION>=3 && FL_PATCH_VERSION>=3)
	{ "shape", Fl_Lua_Double_Window_shape },
#endif
	{ "handle", Fl_Lua_Double_Window_handle },
	{ "border", Fl_Lua_Double_Window_border },
	{ "clear_border", Fl_Lua_Double_Window_clear_border },
	{ "set_override", Fl_Lua_Double_Window_set_override },
	{ "override", Fl_Lua_Double_Window_override },
	{ "set_modal", Fl_Lua_Double_Window_set_modal },
	{ "modal", Fl_Lua_Double_Window_modal },
	{ "set_non_modal", Fl_Lua_Double_Window_set_non_modal },
	{ "non_modal", Fl_Lua_Double_Window_non_modal },
#if (FL_MAJOR_VERSION>=1 && FL_MINOR_VERSION>=3 && FL_PATCH_VERSION>=3)
	{ "clear_modal_states", Fl_Lua_Double_Window_clear_modal_states },
#endif
	{ "set_menu_window", Fl_Lua_Double_Window_set_menu_window },
	{ "menu_window", Fl_Lua_Double_Window_menu_window },
	{ "set_tooltip_window", Fl_Lua_Double_Window_set_tooltip_window },
	{ "tooltip_window", Fl_Lua_Double_Window_tooltip_window },
	{ "hotspot", Fl_Lua_Double_Window_hotspot },
	{ "free_position", Fl_Lua_Double_Window_free_position },
	{ "size_range", Fl_Lua_Double_Window_size_range },
	{ "label", Fl_Lua_Double_Window_label },
	{ "iconlabel", Fl_Lua_Double_Window_iconlabel },
	{ "copy_label", Fl_Lua_Double_Window_copy_label },
	{ "xclass", Fl_Lua_Double_Window_xclass },
#if (FL_MAJOR_VERSION>=1 && FL_MINOR_VERSION>=3 && FL_PATCH_VERSION>=3)
	{ "icon", Fl_Lua_Double_Window_icon },
#endif
	{ "shown", Fl_Lua_Double_Window_shown },
#if (FL_MAJOR_VERSION>=1 && FL_MINOR_VERSION>=3 && FL_PATCH_VERSION>=3)
	{ "wait_for_expose", Fl_Lua_Double_Window_wait_for_expose },
#endif
	{ "fullscreen", Fl_Lua_Double_Window_fullscreen },
	{ "fullscreen_off", Fl_Lua_Double_Window_fullscreen_off },
	{ "fullscreen_active", Fl_Lua_Double_Window_fullscreen_active },
#if (FL_MAJOR_VERSION>=1 && FL_MINOR_VERSION>=3 && FL_PATCH_VERSION>=3)
	{ "fullscreen_screens", Fl_Lua_Double_Window_fullscreen_screens },
#endif
	{ "iconize", Fl_Lua_Double_Window_iconize },
	{ "x_root", Fl_Lua_Double_Window_x_root },
	{ "y_root", Fl_Lua_Double_Window_y_root },
	{ "make_current", Fl_Lua_Double_Window_make_current },
	{ "as_window", Fl_Lua_Double_Window_as_window },
	{ "default_cursor", Fl_Lua_Double_Window_default_cursor },
	{ "decorated_w", Fl_Lua_Double_Window_decorated_w },
	{ "decorated_h", Fl_Lua_Double_Window_decorated_h },
	{ "begin", Fl_Lua_Double_Window_begin },
	{ "End", Fl_Lua_Double_Window_end },
	{ "children", Fl_Lua_Double_Window_children },
	{ "child", Fl_Lua_Double_Window_child },
	{ "find", Fl_Lua_Double_Window_find },
	{ "add", Fl_Lua_Double_Window_add },
	{ "insert", Fl_Lua_Double_Window_insert },
	{ "remove", Fl_Lua_Double_Window_remove },
	{ "clear", Fl_Lua_Double_Window_clear },
	{ "resizable", Fl_Lua_Double_Window_resizable },
	{ "add_resizable", Fl_Lua_Double_Window_add_resizable },
	{ "init_sizes", Fl_Lua_Double_Window_init_sizes },
	{ "clip_children", Fl_Lua_Double_Window_clip_children },
	{ "as_group", Fl_Lua_Double_Window_as_group },
	{ "focus", Fl_Lua_Double_Window_focus },
	{ "parent", Fl_Lua_Double_Window_parent },
	{ "Type", Fl_Lua_Double_Window_type },
	{ "x", Fl_Lua_Double_Window_x   },
	{ "y", Fl_Lua_Double_Window_y   },
	{ "w", Fl_Lua_Double_Window_w   },
	{ "h", Fl_Lua_Double_Window_h   },
	{ "damage_resize", Fl_Lua_Double_Window_damage_resize },
	{ "position", Fl_Lua_Double_Window_position },
	{ "size", Fl_Lua_Double_Window_size },
	{ "align", Fl_Lua_Double_Window_align },
	{ "box", Fl_Lua_Double_Window_box },
	{ "color", Fl_Lua_Double_Window_color },
	{ "selection_color", Fl_Lua_Double_Window_selection_color },
	{ "labeltype", Fl_Lua_Double_Window_labeltype },
	{ "labelcolor", Fl_Lua_Double_Window_labelcolor },
	{ "labelfont", Fl_Lua_Double_Window_labelfont },
	{ "labelsize", Fl_Lua_Double_Window_labelsize },
	{ "image", Fl_Lua_Double_Window_image },
	{ "deimage", Fl_Lua_Double_Window_deimage },
	{ "tooltip", Fl_Lua_Double_Window_tooltip },
	{ "copy_tooltip", Fl_Lua_Double_Window_copy_tooltip },
	{ "callback", Fl_Lua_Double_Window_callback },
	{ "user_data", Fl_Lua_Double_Window_user_data },
	{ "argument", Fl_Lua_Double_Window_argument },
	{ "when", Fl_Lua_Double_Window_when },
	{ "visible", Fl_Lua_Double_Window_visible },
	{ "visible_r", Fl_Lua_Double_Window_visible_r },
	{ "set_visible", Fl_Lua_Double_Window_set_visible },
	{ "clear_visible", Fl_Lua_Double_Window_clear_visible },
	{ "active", Fl_Lua_Double_Window_active },
	{ "active_r", Fl_Lua_Double_Window_active_r },
	{ "activate", Fl_Lua_Double_Window_activate },
	{ "deactivate", Fl_Lua_Double_Window_deactivate },
	{ "output", Fl_Lua_Double_Window_output },
	{ "set_output", Fl_Lua_Double_Window_set_output },
	{ "clear_output", Fl_Lua_Double_Window_clear_output },
	{ "takesevents", Fl_Lua_Double_Window_takesevents },
	{ "changed", Fl_Lua_Double_Window_changed },
	{ "set_changed", Fl_Lua_Double_Window_set_changed },
	{ "clear_changed", Fl_Lua_Double_Window_clear_changed },
#if (FL_MAJOR_VERSION>=1 && FL_MINOR_VERSION>=3 && FL_PATCH_VERSION>=3)
	{ "clear_active", Fl_Lua_Double_Window_clear_active },
#endif
#if (FL_MAJOR_VERSION>=1 && FL_MINOR_VERSION>=3 && FL_PATCH_VERSION>=3)
	{ "set_active", Fl_Lua_Double_Window_set_active },
#endif
	{ "take_focus", Fl_Lua_Double_Window_take_focus },
	{ "set_visible_focus", Fl_Lua_Double_Window_set_visible_focus },
	{ "clear_visible_focus", Fl_Lua_Double_Window_clear_visible_focus },
	{ "visible_focus", Fl_Lua_Double_Window_visible_focus },
	{ "do_callback", Fl_Lua_Double_Window_do_callback },
	{ "test_shortcut", Fl_Lua_Double_Window_test_shortcut },
	{ "_set_fullscreen", Fl_Lua_Double_Window__set_fullscreen },
	{ "_clear_fullscreen", Fl_Lua_Double_Window__clear_fullscreen },
	{ "contains", Fl_Lua_Double_Window_contains },
	{ "inside", Fl_Lua_Double_Window_inside },
	{ "redraw", Fl_Lua_Double_Window_redraw },
	{ "redraw_label", Fl_Lua_Double_Window_redraw_label },
	{ "damage", Fl_Lua_Double_Window_damage },
	{ "clear_damage", Fl_Lua_Double_Window_clear_damage },
	{ "draw_label", Fl_Lua_Double_Window_draw_label },
	{ "measure_label", Fl_Lua_Double_Window_measure_label },
	{ "window", Fl_Lua_Double_Window_window },
#if (FL_MAJOR_VERSION>=1 && FL_MINOR_VERSION>=3 && FL_PATCH_VERSION>=3)
	{ "top_window", Fl_Lua_Double_Window_top_window },
#endif
#if (FL_MAJOR_VERSION>=1 && FL_MINOR_VERSION>=3 && FL_PATCH_VERSION>=3)
	{ "top_window_offset", Fl_Lua_Double_Window_top_window_offset },
#endif
	{ "as_gl_window", Fl_Lua_Double_Window_as_gl_window },
#if (FL_MAJOR_VERSION>=1 && FL_MINOR_VERSION>=3 && FL_PATCH_VERSION>=3)
	{ "use_accents_menu", Fl_Lua_Double_Window_use_accents_menu },
#endif
	{ "color2", Fl_Lua_Double_Window_color2 },
	{ "__tostring", Fl_Lua_Double_Window___tostring },
	{"baseHandle", lua_Fl_Window_baseHandle},
	{"baseDraw", lua_Fl_Window_baseDraw},
	{"setDrawFunction", lua_Fl_Window_setDrawFunction},
	{"setHandleFunction", lua_Fl_Window_setHandleFunction},
	{ "deleted", dub::isDeleted       },
	{ NULL, NULL},
};


int luaopen_FLTK_Fl_Double_Window(lua_State *L)
{
	// Create the metatable which will contain all the member methods
	luaL_newmetatable(L, "FLTK.Fl_Lua_Double_Window");
	// <mt>

	// register member methods
	dub::fregister(L, Fl_Lua_Double_Window_member_methods);
	// setup meta-table
	dub::setup(L, "FLTK.Fl_Lua_Double_Window");
	// <mt>
	return 1;
}
